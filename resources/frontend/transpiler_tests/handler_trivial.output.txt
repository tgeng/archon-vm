FTerm
========
Handler {
    parameter: Struct {
        values: [],
    },
    parameter_disposer: Lambda {
        arg_names: [
            (
                "_",
                Uniform,
            ),
        ],
        body: Struct {
            values: [],
        },
        may_have_complex_effects: false,
    },
    parameter_replicator: Lambda {
        arg_names: [
            (
                "p",
                Uniform,
            ),
        ],
        body: Struct {
            values: [
                Identifier {
                    name: "p",
                    may_have_complex_effects: false,
                },
                Identifier {
                    name: "p",
                    may_have_complex_effects: false,
                },
            ],
        },
        may_have_complex_effects: false,
    },
    transform: Lambda {
        arg_names: [
            (
                "p",
                Uniform,
            ),
            (
                "r",
                Uniform,
            ),
        ],
        body: Identifier {
            name: "r",
            may_have_complex_effects: false,
        },
        may_have_complex_effects: false,
    },
    simple_handlers: [],
    complex_handlers: [],
    input: Thunk {
        computation: Int {
            value: 1,
        },
        may_have_complex_effects: false,
    },
}

Defs
========
[
    (
        "main",
        FunctionDefinition {
            args: [],
            body: Handler {
                parameter: Struct {
                    values: [],
                },
                parameter_disposer: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_0",
                            may_have_complex_effects: false,
                        },
                        args: [],
                    },
                    may_have_complex_effects: true,
                },
                parameter_replicator: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_1",
                            may_have_complex_effects: false,
                        },
                        args: [],
                    },
                    may_have_complex_effects: true,
                },
                transform: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_2",
                            may_have_complex_effects: false,
                        },
                        args: [],
                    },
                    may_have_complex_effects: true,
                },
                complex_handlers: [],
                simple_handlers: [],
                input: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_3",
                            may_have_complex_effects: false,
                        },
                        args: [],
                    },
                    may_have_complex_effects: false,
                },
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 0,
            may_be_simple: false,
            may_be_complex: false,
            may_be_specialized: true,
        },
    ),
    (
        "main$__lambda_0",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [],
                },
            },
            c_type: Default,
            var_bound: 1,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_1",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 0,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 1,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_2",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Return {
                value: Var {
                    index: 1,
                },
            },
            c_type: Default,
            var_bound: 2,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_3",
        FunctionDefinition {
            args: [],
            body: Return {
                value: Int {
                    value: 1,
                },
            },
            c_type: Default,
            var_bound: 0,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
]

CLIR
========
[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 apple_aarch64
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64) -> i64 tail
    sig5 = (i64, i64, i64) -> i64 tail
    sig6 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig7 = (i64, i64, i64) apple_aarch64
    sig8 = (i64, i64, i64) apple_aarch64
    sig9 = (i64, i64) -> i64 tail
    sig10 = (i64, i64) -> i64 apple_aarch64
    sig11 = (i64, i64) -> i64 tail
    fn0 = colocated u0:12 sig0
    fn1 = u0:0 sig1
    fn2 = colocated u0:19 sig2
    fn3 = colocated u0:21 sig3
    fn4 = colocated u0:23 sig4
    fn5 = colocated u0:17 sig5
    fn6 = u0:6 sig6
    fn7 = u0:7 sig7
    fn8 = u0:8 sig8
    fn9 = colocated u0:25 sig9
    fn10 = u0:1 sig10

block0(v0: i64):
    v1 = call fn0()
    v2 = iconst.i64 0
    v3 = call fn1(v2)  ; v2 = 0
    v4 = iadd_imm v3, 1
    v5 = func_addr.i64 fn2
    v6 = iadd_imm v5, 3
    v7 = func_addr.i64 fn3
    v8 = iadd_imm v7, 3
    v9 = func_addr.i64 fn4
    v10 = iadd_imm v9, 3
    v11 = func_addr.i64 fn5
    stack_store v0, ss0
    v12 = stack_addr.i64 ss0
    v13 = call fn6(v12, v1, v4, v6, v8, v10, v11)
    v14 = stack_load.i64 ss0
    v15 = load.i64 v13
    v16 = func_addr.i64 fn9
    v17 = iadd_imm v16, 3
    stack_store v14, ss0
    v18 = stack_addr.i64 ss0
    v19 = call fn10(v17, v18)
    v20 = stack_load.i64 ss0
    v21 = isub v14, v20
    v22 = ushr_imm v21, 3
    v23 = load.i64 v15+8
    v24 = iadd v23, v22
    store v24, v15+8
    v25 = call_indirect sig11, v19(v20, v15)
    v26 = load.i64 v25
    v27 = iadd_imm v25, 8
    v28 = sshr_imm v26, 1
    return v28
}


[main$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 0
    v4 = call fn0(v3)  ; v3 = 0
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_1__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 2
    v4 = call fn0(v3)  ; v3 = 2
    store aligned v2, v4
    store aligned v2, v4+8
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_2__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iadd_imm v0, 8
    store v3, v4
    v5 = load.i64 v1+8
    v6 = ishl_imm v5, 3
    v7 = iadd v0, v6
    v8 = load.i64 v1
    return_call_indirect sig0, v8(v7, v1, v4)
}


[main$__lambda_3__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = iconst.i64 1
    v3 = ishl_imm v2, 1  ; v2 = 1
    v4 = iadd_imm v0, -8
    store v3, v4
    v5 = load.i64 v1+8
    v6 = ishl_imm v5, 3
    v7 = iadd v0, v6
    v8 = load.i64 v1
    return_call_indirect sig0, v8(v7, v1, v4)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:18 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}


Result
========
1