FTerm
========
Defs {
    defs: [
        (
            "f",
            Def {
                args: [
                    (
                        "x",
                        Specialized(
                            Integer,
                        ),
                    ),
                    (
                        "y",
                        Specialized(
                            Integer,
                        ),
                    ),
                ],
                body: Redex {
                    function: Identifier {
                        name: "_int_add",
                        may_have_complex_effects: false,
                    },
                    args: [
                        Identifier {
                            name: "x",
                            may_have_complex_effects: false,
                        },
                        Identifier {
                            name: "y",
                            may_have_complex_effects: false,
                        },
                    ],
                },
                c_type: SpecializedF(
                    Specialized(
                        Integer,
                    ),
                ),
            },
        ),
    ],
    body: Some(
        Defs {
            defs: [
                (
                    "g",
                    Def {
                        args: [],
                        body: Redex {
                            function: Identifier {
                                name: "f",
                                may_have_complex_effects: false,
                            },
                            args: [
                                Int {
                                    value: 1,
                                },
                            ],
                        },
                        c_type: Default,
                    },
                ),
            ],
            body: Some(
                Redex {
                    function: Identifier {
                        name: "g",
                        may_have_complex_effects: false,
                    },
                    args: [
                        Int {
                            value: 2,
                        },
                    ],
                },
            ),
        },
    ),
}

Defs
========
[
    (
        "f",
        FunctionDefinition {
            args: [
                (
                    0,
                    Specialized(
                        Integer,
                    ),
                ),
                (
                    1,
                    Specialized(
                        Integer,
                    ),
                ),
            ],
            body: PrimitiveCall {
                name: "_int_add",
                args: [
                    Var {
                        index: 0,
                    },
                    Var {
                        index: 1,
                    },
                ],
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 2,
            may_be_simple: true,
            may_be_complex: true,
        },
    ),
    (
        "g",
        FunctionDefinition {
            args: [],
            body: Redex {
                function: Def {
                    name: "f",
                    may_have_complex_effects: false,
                },
                args: [
                    Int {
                        value: 1,
                    },
                ],
            },
            c_type: Default,
            var_bound: 0,
            may_be_simple: true,
            may_be_complex: true,
        },
    ),
    (
        "main",
        FunctionDefinition {
            args: [],
            body: Redex {
                function: Def {
                    name: "g",
                    may_have_complex_effects: false,
                },
                args: [
                    Int {
                        value: 2,
                    },
                ],
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 0,
            may_be_simple: true,
            may_be_complex: false,
        },
    ),
]

CLIR
========
[f__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = sshr_imm v2, 1
    v5 = sshr_imm v3, 1
    v6 = iadd v4, v5
    v7 = ishl_imm v6, 1
    v8 = iadd_imm v0, 8
    store v7, v8
    v9 = load.i64 v1+8
    v10 = iadd v0, v9
    v11 = load.i64 v1
    return_call_indirect sig0, v11(v10, v1, v8)
}


[f__simple]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8

block0(v0: i64):
    v1 = load.i64 v0
    v2 = load.i64 v0+8
    v3 = sshr_imm v1, 1
    v4 = sshr_imm v2, 1
    v5 = iadd v3, v4
    v6 = ishl_imm v5, 1
    v7 = iadd_imm v0, 8
    store v6, v7
    return v7
}


[f__specialized]
function u0:0(i64, i64, i64) -> i64 tail {
    ss0 = explicit_slot 8

block0(v0: i64, v1: i64, v2: i64):
    v3 = iadd v1, v2
    return v3
}


[g__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 tail
    fn0 = colocated u0:17 sig0

block0(v0: i64, v1: i64):
    v2 = iconst.i64 1
    v3 = ishl_imm v2, 1  ; v2 = 1
    v4 = iadd_imm v0, -8
    store aligned v3, v4
    return_call fn0(v4)
}


[g__simple]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 tail
    fn0 = colocated u0:17 sig0

block0(v0: i64):
    v1 = iconst.i64 1
    v2 = ishl_imm v1, 1  ; v1 = 1
    v3 = iadd_imm v0, -8
    store aligned v2, v3
    return_call fn0(v3)
}


[main__simple]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 tail
    fn0 = colocated u0:21 sig0

block0(v0: i64):
    v1 = iconst.i64 2
    v2 = ishl_imm v1, 1  ; v1 = 2
    v3 = iadd_imm v0, -8
    store aligned v2, v3
    return_call fn0(v3)
}


[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 tail
    fn0 = colocated u0:21 sig0

block0(v0: i64):
    v1 = iconst.i64 2
    v2 = ishl_imm v1, 1  ; v1 = 2
    v3 = iadd_imm v0, -8
    store aligned v2, v3
    v4 = call fn0(v3)
    v5 = load.i64 v4
    v6 = iadd_imm v4, 8
    v7 = sshr_imm v5, 1
    return v7
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:23 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}


Result
========
3