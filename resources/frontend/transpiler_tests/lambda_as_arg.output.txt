FTerm
========
Defs {
    defs: [
        (
            "f",
            Def {
                args: [
                    (
                        "g",
                        Uniform,
                    ),
                    (
                        "x",
                        Uniform,
                    ),
                    (
                        "y",
                        Uniform,
                    ),
                ],
                body: Redex {
                    function: Force {
                        thunk: Identifier {
                            name: "g",
                            may_have_complex_effects: false,
                        },
                        may_have_complex_effects: false,
                    },
                    args: [
                        Identifier {
                            name: "x",
                            may_have_complex_effects: false,
                        },
                        Identifier {
                            name: "y",
                            may_have_complex_effects: false,
                        },
                    ],
                },
                c_type: Default,
            },
        ),
    ],
    body: Some(
        Redex {
            function: Identifier {
                name: "f",
                may_have_complex_effects: false,
            },
            args: [
                Lambda {
                    arg_names: [
                        (
                            "a",
                            Uniform,
                        ),
                        (
                            "b",
                            Uniform,
                        ),
                    ],
                    body: Redex {
                        function: Identifier {
                            name: "_int_add",
                            may_have_complex_effects: false,
                        },
                        args: [
                            Identifier {
                                name: "a",
                                may_have_complex_effects: false,
                            },
                            Identifier {
                                name: "b",
                                may_have_complex_effects: false,
                            },
                        ],
                    },
                    may_have_complex_effects: false,
                },
                Int {
                    value: 1,
                },
                Int {
                    value: 2,
                },
            ],
        },
    ),
}

Defs
========
[
    (
        "f",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
                (
                    2,
                    Uniform,
                ),
            ],
            body: Redex {
                function: Force {
                    thunk: Var {
                        index: 0,
                    },
                    may_have_complex_effects: false,
                },
                args: [
                    Var {
                        index: 1,
                    },
                    Var {
                        index: 2,
                    },
                ],
            },
            c_type: Default,
            var_bound: 3,
            may_be_simple: true,
            may_be_complex: false,
            may_be_specialized: false,
        },
    ),
    (
        "main",
        FunctionDefinition {
            args: [],
            body: Redex {
                function: Def {
                    name: "f",
                    may_have_complex_effects: false,
                },
                args: [
                    Thunk {
                        t: Redex {
                            function: Def {
                                name: "main$__lambda_0",
                                may_have_complex_effects: false,
                            },
                            args: [],
                        },
                        may_have_complex_effects: true,
                    },
                    Int {
                        value: 1,
                    },
                    Int {
                        value: 2,
                    },
                ],
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 0,
            may_be_simple: false,
            may_be_complex: false,
            may_be_specialized: true,
        },
    ),
    (
        "main$__lambda_0",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: PrimitiveCall {
                name: "_int_add",
                args: [
                    Var {
                        index: 0,
                    },
                    Var {
                        index: 1,
                    },
                ],
            },
            c_type: Default,
            var_bound: 2,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
]

CLIR
========
[f__simple]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 apple_aarch64
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64) -> i64 apple_aarch64
    fn0 = colocated u0:11 sig0
    fn1 = u0:1 sig1
    fn2 = %Memmove sig3

block0(v0: i64):
    v1 = load.i64 v0
    v2 = load.i64 v0+8
    v3 = load.i64 v0+16
    v4 = iadd_imm v0, -8
    store aligned v3, v4
    v5 = iadd_imm v4, -8
    store aligned v2, v5
    v6 = call fn0()
    stack_store v5, ss0
    v7 = stack_addr.i64 ss0
    v8 = call fn1(v1, v7)
    v9 = stack_load.i64 ss0
    v10 = isub v5, v9
    v11 = ushr_imm v10, 3
    v12 = load.i64 v6+8
    v13 = iadd v12, v11
    store v13, v6+8
    v14 = iadd_imm v9, 24
    v15 = isub v0, v9
    v16 = call fn2(v14, v9, v15)
    return_call_indirect sig2, v8(v14, v6)
}


[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64) -> i64 tail
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:14 sig1

block0(v0: i64):
    v1 = func_addr.i64 fn0
    v2 = iadd_imm v1, 3
    v3 = iconst.i64 1
    v4 = ishl_imm v3, 1  ; v3 = 1
    v5 = iconst.i64 2
    v6 = ishl_imm v5, 1  ; v5 = 2
    v7 = iadd_imm v0, -8
    store aligned v6, v7
    v8 = iadd_imm v7, -8
    store aligned v4, v8
    v9 = iadd_imm v8, -8
    store aligned v2, v9
    v10 = call fn1(v9)
    v11 = load.i64 v10
    v12 = iadd_imm v10, 8
    v13 = sshr_imm v11, 1
    return v13
}


[main$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = sshr_imm v2, 1
    v5 = sshr_imm v3, 1
    v6 = iadd v4, v5
    v7 = ishl_imm v6, 1
    v8 = iadd_imm v0, 8
    store v7, v8
    v9 = load.i64 v1+8
    v10 = ishl_imm v9, 3
    v11 = iadd v0, v10
    v12 = load.i64 v1
    return_call_indirect sig0, v12(v11, v1, v8)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:15 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}


Result
========
3