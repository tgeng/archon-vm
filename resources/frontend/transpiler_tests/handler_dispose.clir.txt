CLIR
========
[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname6
    gv2 = symbol colocated userextname9
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64) -> i64 tail
    sig4 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig5 = (i64, i64) -> i64 tail
    sig6 = (i64, i64, i64, i64) apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64, i64, i64) apple_aarch64
    sig9 = (i64, i64, i64, i64) -> i64 tail
    sig10 = (i64, i64) -> i64 tail
    sig11 = (i64, i64) -> i64 apple_aarch64
    fn0 = colocated u0:21 sig0
    fn1 = colocated u0:23 sig1
    fn2 = colocated u0:27 sig2
    fn3 = colocated u0:19 sig3
    fn4 = u0:6 sig4
    fn5 = colocated u0:29 sig5
    fn6 = u0:7 sig6
    fn7 = colocated u0:31 sig7
    fn8 = u0:7 sig8
    fn9 = u0:12 sig9
    fn10 = colocated u0:25 sig10
    fn11 = u0:1 sig11

block0(v0: i64):
    v1 = global_value.i64 gv0
    v2 = iadd_imm v1, 8
    v3 = iconst.i64 0
    v4 = ishl_imm v3, 1  ; v3 = 0
    v5 = func_addr.i64 fn0
    v6 = iadd_imm v5, 3
    v7 = func_addr.i64 fn1
    v8 = iadd_imm v7, 3
    v9 = func_addr.i64 fn2
    v10 = iadd_imm v9, 3
    v11 = func_addr.i64 fn3
    stack_store v0, ss0
    v12 = stack_addr.i64 ss0
    v13 = call fn4(v12, v2, v4, v6, v8, v10, v11)
    v14 = stack_load.i64 ss0
    v15 = symbol_value.i64 gv1
    v16 = iadd_imm v15, 8
    v17 = iadd_imm v16, 3
    v18 = func_addr.i64 fn5
    v19 = iadd_imm v18, 3
    v20 = iconst.i64 2
    call fn6(v13, v17, v19, v20)  ; v20 = 2
    v21 = symbol_value.i64 gv2
    v22 = iadd_imm v21, 8
    v23 = iadd_imm v22, 3
    v24 = func_addr.i64 fn7
    v25 = iadd_imm v24, 3
    v26 = iconst.i64 2
    call fn8(v13, v23, v25, v26)  ; v26 = 2
    v27 = load.i64 v13
    v28 = func_addr.i64 fn10
    v29 = iadd_imm v28, 3
    stack_store v14, ss0
    v30 = stack_addr.i64 ss0
    v31 = call fn11(v29, v30)
    v32 = stack_load.i64 ss0
    v33 = isub v14, v32
    v34 = load.i64 v27+8
    v35 = ishl_imm v34, 3
    v36 = iadd v35, v33
    v37 = ushr_imm v36, 3
    store v37, v27+8
    v38 = call fn9(v32, v27, v31, v13)
    v39 = load.i64 v38
    v40 = iadd_imm v38, 8
    v41 = sshr_imm v39, 1
    return v41
}


[main$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 0
    v4 = call fn0(v3)  ; v3 = 0
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_1__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 2
    v4 = call fn0(v3)  ; v3 = 2
    store aligned v2, v4
    store aligned v2, v4+8
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_10__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname5
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64) -> i64 tail
    sig4 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig5 = (i64, i64) -> i64 tail
    sig6 = (i64, i64, i64, i64) apple_aarch64
    sig7 = (i64, i64, i64, i64) -> i64 tail
    sig8 = (i64, i64) -> i64 tail
    sig9 = (i64, i64) -> i64 apple_aarch64
    fn0 = colocated u0:33 sig0
    fn1 = colocated u0:23 sig1
    fn2 = colocated u0:27 sig2
    fn3 = colocated u0:19 sig3
    fn4 = u0:6 sig4
    fn5 = colocated u0:35 sig5
    fn6 = u0:7 sig6
    fn7 = u0:12 sig7
    fn8 = colocated u0:37 sig8
    fn9 = u0:1 sig9

block0(v0: i64, v1: i64):
    v2 = isub v0, v0
    v3 = load.i64 v1+8
    v4 = ishl_imm v3, 3
    v5 = iadd v4, v2
    v6 = ushr_imm v5, 3
    store v6, v1+8
    v7 = iconst.i64 5
    v8 = ishl_imm v7, 1  ; v7 = 5
    v9 = func_addr.i64 fn0
    v10 = iadd_imm v9, 3
    v11 = func_addr.i64 fn1
    v12 = iadd_imm v11, 3
    v13 = func_addr.i64 fn2
    v14 = iadd_imm v13, 3
    v15 = func_addr.i64 fn3
    stack_store v0, ss0
    v16 = stack_addr.i64 ss0
    v17 = call fn4(v16, v1, v8, v10, v12, v14, v15)
    v18 = stack_load.i64 ss0
    v19 = symbol_value.i64 gv0
    v20 = iadd_imm v19, 8
    v21 = iadd_imm v20, 3
    v22 = func_addr.i64 fn5
    v23 = iadd_imm v22, 3
    v24 = iconst.i64 3
    call fn6(v17, v21, v23, v24)  ; v24 = 3
    v25 = load.i64 v17
    v26 = func_addr.i64 fn8
    v27 = iadd_imm v26, 3
    stack_store v18, ss0
    v28 = stack_addr.i64 ss0
    v29 = call fn9(v27, v28)
    v30 = stack_load.i64 ss0
    v31 = isub v18, v30
    v32 = load.i64 v25+8
    v33 = ishl_imm v32, 3
    v34 = iadd v33, v31
    v35 = ushr_imm v34, 3
    store v35, v25+8
    return_call fn7(v30, v25, v29, v17)
}


[main$__lambda_2__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iadd_imm v0, 8
    store v3, v4
    v5 = load.i64 v1+8
    v6 = ishl_imm v5, 3
    v7 = iadd v0, v6
    v8 = load.i64 v1
    return_call_indirect sig0, v8(v7, v1, v4)
}


[main$__lambda_3__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64) -> i64 apple_aarch64
    sig2 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = u0:0 sig1

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 1
    v4 = ishl_imm v3, 1  ; v3 = 1
    v5 = iconst.i64 2
    v6 = call fn0(v5)  ; v5 = 2
    store aligned v4, v6
    store aligned v2, v6+8
    v7 = iadd_imm v6, 1
    v8 = iconst.i64 2
    v9 = call fn1(v8)  ; v8 = 2
    store aligned v2, v9
    store aligned v7, v9+8
    v10 = iadd_imm v9, 1
    v11 = iadd_imm v0, 0
    store v10, v11
    v12 = load.i64 v1+8
    v13 = ishl_imm v12, 3
    v14 = iadd v0, v13
    v15 = load.i64 v1
    return_call_indirect sig2, v15(v14, v1, v11)
}


[main$__lambda_4__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64) -> i64 apple_aarch64
    sig2 = (i64) -> i64 apple_aarch64
    sig3 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = u0:0 sig1
    fn2 = u0:0 sig2

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iconst.i64 1
    v5 = ishl_imm v4, 1  ; v4 = 1
    v6 = iconst.i64 0
    v7 = call fn0(v6)  ; v6 = 0
    v8 = iadd_imm v7, 1
    v9 = iconst.i64 2
    v10 = call fn1(v9)  ; v9 = 2
    store aligned v5, v10
    store aligned v8, v10+8
    v11 = iadd_imm v10, 1
    v12 = iconst.i64 2
    v13 = call fn2(v12)  ; v12 = 2
    store aligned v3, v13
    store aligned v11, v13+8
    v14 = iadd_imm v13, 1
    v15 = iadd_imm v0, 8
    store v14, v15
    v16 = load.i64 v1+8
    v17 = ishl_imm v16, 3
    v18 = iadd v0, v17
    v19 = load.i64 v1
    return_call_indirect sig3, v19(v18, v1, v15)
}


[main$__lambda_5__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = (i64, i64, i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64) -> i64 tail
    fn0 = %Memmove sig0
    fn1 = colocated u0:14 sig1
    fn2 = colocated u0:17 sig2
    fn3 = u0:4 sig3

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = symbol_value.i64 gv0
    v4 = iadd_imm v3, 8
    v5 = iadd_imm v4, 3
    v6 = iadd_imm v0, -8
    store aligned v2, v6
    v7 = iadd_imm v6, 8
    v8 = isub v0, v6
    v9 = call fn0(v7, v6, v8)
    v10 = isub v0, v7
    v11 = load.i64 v1+8
    v12 = ishl_imm v11, 3
    v13 = iadd v12, v10
    v14 = ushr_imm v13, 3
    store v14, v1+8
    v15 = iconst.i64 1
    v16 = func_addr.i64 fn1
    v17 = func_addr.i64 fn2
    v18 = iconst.i64 1
    v19 = call fn3(v5, v7, v1, v15, v16, v17, v18)  ; v15 = 1, v18 = 1
    v20 = load.i64 v19
    v21 = load.i64 v19+8
    v22 = load.i64 v19+16
    return_call_indirect sig4, v20(v21, v22)
}


[main$__lambda_8__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname2
    sig0 = (i64, i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64) -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64) -> i64 tail
    sig5 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig6 = (i64, i64) -> i64 tail
    fn0 = u0:1 sig0
    fn1 = %Memmove sig2
    fn2 = colocated u0:14 sig3
    fn3 = colocated u0:17 sig4
    fn4 = u0:4 sig5

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iconst.i64 1
    v5 = ishl_imm v4, 1  ; v4 = 1
    v6 = iadd_imm v0, -8
    store aligned v2, v6
    v7 = iadd_imm v6, -8
    store aligned v5, v7
    v8 = global_value.i64 gv0
    v9 = iadd_imm v8, 8
    stack_store v7, ss0
    v10 = stack_addr.i64 ss0
    v11 = call fn0(v3, v10)
    v12 = stack_load.i64 ss0
    v13 = call_indirect sig1, v11(v12, v9)
    v14 = load.i64 v13
    v15 = iadd_imm v13, 8
    v16 = symbol_value.i64 gv1
    v17 = iadd_imm v16, 8
    v18 = iadd_imm v17, 3
    v19 = iadd_imm v15, 16
    v20 = isub v0, v15
    v21 = call fn1(v19, v15, v20)
    v22 = isub v0, v19
    v23 = load.i64 v1+8
    v24 = ishl_imm v23, 3
    v25 = iadd v24, v22
    v26 = ushr_imm v25, 3
    store v26, v1+8
    v27 = iconst.i64 0
    v28 = func_addr.i64 fn2
    v29 = func_addr.i64 fn3
    v30 = iconst.i64 1
    v31 = call fn4(v18, v19, v1, v27, v28, v29, v30)  ; v27 = 0, v30 = 1
    v32 = load.i64 v31
    v33 = load.i64 v31+8
    v34 = load.i64 v31+16
    return_call_indirect sig6, v32(v33, v34)
}


[main$__lambda_9__cps_impl]
function u0:0(i64, i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64, i64) -> i64 tail
    fn0 = colocated u0:14 sig0
    fn1 = colocated u0:17 sig1
    fn2 = u0:4 sig2

block0(v0: i64, v1: i64, v2: i64):
    v3 = load.i64 v1+24
    v4 = iadd_imm v1, 32
    v5 = iadd_imm v2, 8
    v6 = load.i64 v2
    v7 = icmp_imm ugt v3, 0xffff_ffff
    brif v7, block1, block3

block3:
    v8 = ireduce.i32 v3
    br_table v8, block1, [block1, block2]

block1:
    v9 = symbol_value.i64 gv0
    v10 = iadd_imm v9, 8
    v11 = iadd_imm v10, 3
    v12 = isub.i64 v0, v5
    v13 = ushr_imm v12, 3
    store v13, v1+8
    v14 = iconst.i64 1
    store v14, v1+24  ; v14 = 1
    v15 = iconst.i64 0
    v16 = func_addr.i64 fn0
    v17 = func_addr.i64 fn1
    v18 = iconst.i64 1
    v19 = call fn2(v11, v5, v1, v15, v16, v17, v18)  ; v15 = 0, v18 = 1
    v20 = load.i64 v19
    v21 = load.i64 v19+8
    v22 = load.i64 v19+16
    return_call_indirect sig3, v20(v21, v22)

block2:
    v23 = iconst.i64 1
    v24 = ishl_imm v23, 1  ; v23 = 1
    v25 = iadd_imm.i64 v0, -8
    store v24, v25
    v26 = load.i64 v1+16
    v27 = load.i64 v26+8
    v28 = ishl_imm v27, 3
    v29 = iadd.i64 v0, v28
    v30 = load.i64 v26
    return_call_indirect sig4, v30(v29, v26, v25)
}


[main$__lambda_9__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = colocated u0:38 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 40
    v3 = call fn0(v2)  ; v2 = 40
    v4 = func_addr.i64 fn1
    store v4, v3
    store v1, v3+16
    v5 = iadd_imm v0, -8
    return_call fn1(v0, v3, v5)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:20 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}
