FTerm
========
Defs {
    defs: [
        (
            "interruptAndRecover",
            Def {
                args: [
                    (
                        "x",
                        Specialized(
                            Integer,
                        ),
                    ),
                ],
                body: Handler {
                    parameter: Struct {
                        values: [],
                    },
                    parameter_disposer: Lambda {
                        arg_names: [
                            (
                                "_",
                                Uniform,
                            ),
                        ],
                        body: Struct {
                            values: [],
                        },
                        effect: Simple,
                    },
                    parameter_replicator: Lambda {
                        arg_names: [
                            (
                                "p",
                                Uniform,
                            ),
                        ],
                        body: Struct {
                            values: [
                                Identifier {
                                    name: "p",
                                    effect: Simple,
                                },
                                Identifier {
                                    name: "p",
                                    effect: Simple,
                                },
                            ],
                        },
                        effect: Simple,
                    },
                    transform: Lambda {
                        arg_names: [
                            (
                                "p",
                                Uniform,
                            ),
                            (
                                "r",
                                Uniform,
                            ),
                        ],
                        body: Identifier {
                            name: "r",
                            effect: Simple,
                        },
                        effect: Simple,
                    },
                    handlers: [
                        (
                            Str {
                                value: "exp",
                            },
                            Lambda {
                                arg_names: [
                                    (
                                        "p",
                                        Uniform,
                                    ),
                                    (
                                        "x",
                                        Uniform,
                                    ),
                                ],
                                body: Struct {
                                    values: [
                                        Identifier {
                                            name: "p",
                                            effect: Simple,
                                        },
                                        Identifier {
                                            name: "x",
                                            effect: Simple,
                                        },
                                    ],
                                },
                                effect: Simple,
                            },
                            Exceptional,
                        ),
                    ],
                    input: Thunk {
                        computation: Let {
                            name: "_",
                            t: OperationCall {
                                eff: Str {
                                    value: "exp",
                                },
                                args: [
                                    Identifier {
                                        name: "x",
                                        effect: Simple,
                                    },
                                ],
                                effect: Simple,
                            },
                            body: Let {
                                name: "_",
                                t: OperationCall {
                                    eff: Str {
                                        value: "track",
                                    },
                                    args: [
                                        Int {
                                            value: 31,
                                        },
                                    ],
                                    effect: Simple,
                                },
                                body: Int {
                                    value: 31,
                                },
                            },
                        },
                        effect: Simple,
                    },
                },
                c_type: SpecializedF(
                    Specialized(
                        Integer,
                    ),
                ),
            },
        ),
    ],
    body: Some(
        Handler {
            parameter: Int {
                value: 1,
            },
            parameter_disposer: Lambda {
                arg_names: [
                    (
                        "_",
                        Uniform,
                    ),
                ],
                body: Struct {
                    values: [],
                },
                effect: Simple,
            },
            parameter_replicator: Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                ],
                body: Struct {
                    values: [
                        Identifier {
                            name: "p",
                            effect: Simple,
                        },
                        Identifier {
                            name: "p",
                            effect: Simple,
                        },
                    ],
                },
                effect: Simple,
            },
            transform: Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                    (
                        "r",
                        Uniform,
                    ),
                ],
                body: Redex {
                    function: Identifier {
                        name: "_int_add",
                        effect: Simple,
                    },
                    args: [
                        Redex {
                            function: Identifier {
                                name: "_int_mul",
                                effect: Simple,
                            },
                            args: [
                                Identifier {
                                    name: "p",
                                    effect: Simple,
                                },
                                Int {
                                    value: 100,
                                },
                            ],
                        },
                        Identifier {
                            name: "r",
                            effect: Simple,
                        },
                    ],
                },
                effect: Simple,
            },
            handlers: [
                (
                    Str {
                        value: "track",
                    },
                    Lambda {
                        arg_names: [
                            (
                                "p",
                                Uniform,
                            ),
                            (
                                "v",
                                Uniform,
                            ),
                        ],
                        body: Struct {
                            values: [
                                Redex {
                                    function: Identifier {
                                        name: "_int_mul",
                                        effect: Simple,
                                    },
                                    args: [
                                        Identifier {
                                            name: "p",
                                            effect: Simple,
                                        },
                                        Identifier {
                                            name: "v",
                                            effect: Simple,
                                        },
                                    ],
                                },
                                Struct {
                                    values: [
                                        Int {
                                            value: 1,
                                        },
                                        Struct {
                                            values: [],
                                        },
                                    ],
                                },
                            ],
                        },
                        effect: Simple,
                    },
                    Affine,
                ),
            ],
            input: Thunk {
                computation: Let {
                    name: "_",
                    t: OperationCall {
                        eff: Str {
                            value: "track",
                        },
                        args: [
                            Int {
                                value: 2,
                            },
                        ],
                        effect: Simple,
                    },
                    body: Let {
                        name: "_",
                        t: OperationCall {
                            eff: Str {
                                value: "track",
                            },
                            args: [
                                Redex {
                                    function: Identifier {
                                        name: "interruptAndRecover",
                                        effect: Simple,
                                    },
                                    args: [
                                        Int {
                                            value: 3,
                                        },
                                    ],
                                },
                            ],
                            effect: Simple,
                        },
                        body: Let {
                            name: "_",
                            t: OperationCall {
                                eff: Str {
                                    value: "track",
                                },
                                args: [
                                    Redex {
                                        function: Identifier {
                                            name: "interruptAndRecover",
                                            effect: Simple,
                                        },
                                        args: [
                                            Int {
                                                value: 5,
                                            },
                                        ],
                                    },
                                ],
                                effect: Simple,
                            },
                            body: Let {
                                name: "_",
                                t: OperationCall {
                                    eff: Str {
                                        value: "track",
                                    },
                                    args: [
                                        Redex {
                                            function: Identifier {
                                                name: "interruptAndRecover",
                                                effect: Simple,
                                            },
                                            args: [
                                                Int {
                                                    value: 7,
                                                },
                                            ],
                                        },
                                    ],
                                    effect: Simple,
                                },
                                body: Int {
                                    value: 1,
                                },
                            },
                        },
                    },
                },
                effect: Simple,
            },
        },
    ),
}

Defs
========
[
    (
        "interruptAndRecover",
        FunctionDefinition {
            args: [
                (
                    0,
                    Specialized(
                        Integer,
                    ),
                ),
            ],
            body: Handler {
                parameter: Struct {
                    values: [],
                },
                parameter_disposer: Thunk {
                    t: Redex {
                        function: Def {
                            name: "interruptAndRecover$__lambda_0",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                parameter_replicator: Thunk {
                    t: Redex {
                        function: Def {
                            name: "interruptAndRecover$__lambda_1",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                transform: Thunk {
                    t: Redex {
                        function: Def {
                            name: "interruptAndRecover$__lambda_2",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                handlers: [
                    (
                        Str {
                            value: "exp",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "interruptAndRecover$__lambda_3",
                                    effect: Simple,
                                },
                                args: [],
                            },
                            effect: Simple,
                        },
                        Exceptional,
                    ),
                ],
                input: Thunk {
                    t: Redex {
                        function: Def {
                            name: "interruptAndRecover$__lambda_4",
                            effect: Simple,
                        },
                        args: [
                            Var {
                                index: 0,
                            },
                        ],
                    },
                    effect: Simple,
                },
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 1,
            need_simple: false,
            need_cps: false,
            need_specialized: true,
        },
    ),
    (
        "interruptAndRecover$__lambda_0",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [],
                },
            },
            c_type: Default,
            var_bound: 1,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "interruptAndRecover$__lambda_1",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 0,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 1,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "interruptAndRecover$__lambda_2",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Return {
                value: Var {
                    index: 1,
                },
            },
            c_type: Default,
            var_bound: 2,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "interruptAndRecover$__lambda_3",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 1,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 2,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "interruptAndRecover$__lambda_4",
        FunctionDefinition {
            args: [
                (
                    0,
                    Specialized(
                        Integer,
                    ),
                ),
            ],
            body: Let {
                t: OperationCall {
                    eff: Str {
                        value: "exp",
                    },
                    args: [
                        Var {
                            index: 0,
                        },
                    ],
                    effect: Simple,
                },
                bound_index: 1,
                body: Let {
                    t: OperationCall {
                        eff: Str {
                            value: "track",
                        },
                        args: [
                            Int {
                                value: 31,
                            },
                        ],
                        effect: Simple,
                    },
                    bound_index: 2,
                    body: Return {
                        value: Int {
                            value: 31,
                        },
                    },
                },
            },
            c_type: Default,
            var_bound: 3,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main",
        FunctionDefinition {
            args: [],
            body: Handler {
                parameter: Int {
                    value: 1,
                },
                parameter_disposer: Thunk {
                    t: Redex {
                        function: Def {
                            name: "interruptAndRecover$__lambda_0",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                parameter_replicator: Thunk {
                    t: Redex {
                        function: Def {
                            name: "interruptAndRecover$__lambda_1",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                transform: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_2",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                handlers: [
                    (
                        Str {
                            value: "track",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_3",
                                    effect: Simple,
                                },
                                args: [],
                            },
                            effect: Simple,
                        },
                        Affine,
                    ),
                ],
                input: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_4",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 0,
            need_simple: false,
            need_cps: false,
            need_specialized: true,
        },
    ),
    (
        "main$__lambda_2",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Let {
                t: PrimitiveCall {
                    name: "_int_mul",
                    args: [
                        Var {
                            index: 0,
                        },
                        Int {
                            value: 100,
                        },
                    ],
                },
                bound_index: 2,
                body: PrimitiveCall {
                    name: "_int_add",
                    args: [
                        Var {
                            index: 2,
                        },
                        Var {
                            index: 1,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 3,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_3",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Let {
                t: PrimitiveCall {
                    name: "_int_mul",
                    args: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 1,
                        },
                    ],
                },
                bound_index: 2,
                body: Return {
                    value: Struct {
                        values: [
                            Var {
                                index: 2,
                            },
                            Struct {
                                values: [
                                    Int {
                                        value: 1,
                                    },
                                    Struct {
                                        values: [],
                                    },
                                ],
                            },
                        ],
                    },
                },
            },
            c_type: Default,
            var_bound: 3,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_4",
        FunctionDefinition {
            args: [],
            body: Let {
                t: OperationCall {
                    eff: Str {
                        value: "track",
                    },
                    args: [
                        Int {
                            value: 2,
                        },
                    ],
                    effect: Simple,
                },
                bound_index: 0,
                body: Let {
                    t: Let {
                        t: Redex {
                            function: Def {
                                name: "interruptAndRecover",
                                effect: Simple,
                            },
                            args: [
                                Int {
                                    value: 3,
                                },
                            ],
                        },
                        bound_index: 1,
                        body: OperationCall {
                            eff: Str {
                                value: "track",
                            },
                            args: [
                                Var {
                                    index: 1,
                                },
                            ],
                            effect: Simple,
                        },
                    },
                    bound_index: 2,
                    body: Let {
                        t: Let {
                            t: Redex {
                                function: Def {
                                    name: "interruptAndRecover",
                                    effect: Simple,
                                },
                                args: [
                                    Int {
                                        value: 5,
                                    },
                                ],
                            },
                            bound_index: 3,
                            body: OperationCall {
                                eff: Str {
                                    value: "track",
                                },
                                args: [
                                    Var {
                                        index: 3,
                                    },
                                ],
                                effect: Simple,
                            },
                        },
                        bound_index: 4,
                        body: Let {
                            t: Let {
                                t: Redex {
                                    function: Def {
                                        name: "interruptAndRecover",
                                        effect: Simple,
                                    },
                                    args: [
                                        Int {
                                            value: 7,
                                        },
                                    ],
                                },
                                bound_index: 5,
                                body: OperationCall {
                                    eff: Str {
                                        value: "track",
                                    },
                                    args: [
                                        Var {
                                            index: 5,
                                        },
                                    ],
                                    effect: Simple,
                                },
                            },
                            bound_index: 6,
                            body: Return {
                                value: Int {
                                    value: 1,
                                },
                            },
                        },
                    },
                },
            },
            c_type: Default,
            var_bound: 7,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
]