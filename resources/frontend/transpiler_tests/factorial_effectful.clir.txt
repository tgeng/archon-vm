CLIR
========
[factorial__cps_impl]
function u0:0(i64, i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = colocated u0:20 sig0

block0(v0: i64, v1: i64, v2: i64):
    v3 = load.i64 v1+24
    v4 = iadd_imm v1, 32
    v5 = iadd_imm v2, 8
    v6 = load.i64 v2
    v7 = icmp_imm eq v3, 3
    brif v7, block4, block6

block6:
    brif.i64 v3, block1, block1

block1:
    v8 = load.i64 v0
    v9 = sshr_imm v8, 1
    brif v9, block3, block2

block2:
    v12 = iconst.i64 1
    jump block5(v12, v5)  ; v12 = 1

block3:
    v13 = iconst.i64 1
    v14 = sshr_imm.i64 v8, 1
    v15 = isub v14, v13  ; v13 = 1
    v16 = ishl_imm v15, 1
    v17 = iadd_imm.i64 v5, -8
    store aligned v16, v17
    v18 = isub.i64 v0, v17
    v19 = ushr_imm v18, 3
    store v19, v1+8
    v20 = iconst.i64 3
    store v20, v1+24  ; v20 = 3
    v21 = ishl_imm v15, 1
    store v21, v4
    return_call fn0(v17, v1)

block4:
    v22 = load.i64 v0
    v23 = sshr_imm v22, 1
    v24 = sshr_imm.i64 v6, 1
    v25 = imul v23, v24
    jump block5(v25, v5)

block5(v10: i64, v11: i64):
    v26 = ishl_imm v10, 1
    v27 = iadd_imm.i64 v0, 0
    store v26, v27
    v28 = load.i64 v1+16
    v29 = load.i64 v28+8
    v30 = ishl_imm v29, 3
    v31 = iadd.i64 v0, v30
    v32 = load.i64 v28
    return_call_indirect sig1, v32(v31, v28, v27)
}


[factorial__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = colocated u0:21 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 48
    v3 = call fn0(v2)  ; v2 = 48
    v4 = func_addr.i64 fn1
    store v4, v3
    store v1, v3+16
    v5 = iadd_imm v0, -8
    return_call fn1(v0, v3, v5)
}


[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64, i64, i64) -> i64 tail
    sig5 = (i64, i64) -> i64 tail
    sig6 = (i64) -> i64 apple_aarch64
    sig7 = (i64, i64) -> i64 apple_aarch64
    fn0 = u0:0 sig0
    fn1 = colocated u0:23 sig1
    fn2 = colocated u0:19 sig2
    fn3 = u0:6 sig3
    fn4 = u0:12 sig4
    fn5 = colocated u0:20 sig5
    fn6 = u0:0 sig6
    fn7 = u0:1 sig7

block0(v0: i64):
    v1 = global_value.i64 gv0
    v2 = iadd_imm v1, 8
    v3 = iconst.i64 0
    v4 = call fn0(v3)  ; v3 = 0
    v5 = iadd_imm v4, 1
    v6 = iconst.i64 3
    v7 = iconst.i64 3
    v8 = func_addr.i64 fn1
    v9 = iadd_imm v8, 3
    v10 = func_addr.i64 fn2
    stack_store v0, ss0
    v11 = stack_addr.i64 ss0
    v12 = call fn3(v11, v2, v5, v6, v7, v9, v10)  ; v6 = 3, v7 = 3
    v13 = stack_load.i64 ss0
    v14 = load.i64 v12
    v15 = func_addr.i64 fn5
    v16 = iconst.i64 1
    v17 = iadd_imm v15, 3
    v18 = iconst.i64 5
    v19 = ishl_imm v18, 1  ; v18 = 5
    v20 = iconst.i64 3
    v21 = call fn6(v20)  ; v20 = 3
    store aligned v17, v21
    store aligned v16, v21+8  ; v16 = 1
    store aligned v19, v21+16
    v22 = iadd_imm v21, 1
    stack_store v13, ss0
    v23 = stack_addr.i64 ss0
    v24 = call fn7(v22, v23)
    v25 = stack_load.i64 ss0
    v26 = isub v13, v25
    v27 = load.i64 v14+8
    v28 = ishl_imm v27, 3
    v29 = iadd v28, v26
    v30 = ushr_imm v29, 3
    store v30, v14+8
    v31 = call fn4(v25, v14, v24, v12)
    v32 = load.i64 v31
    v33 = iadd_imm v31, 8
    v34 = sshr_imm v32, 1
    return v34
}


[main$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iadd_imm v0, 8
    store v3, v4
    v5 = load.i64 v1+8
    v6 = ishl_imm v5, 3
    v7 = iadd v0, v6
    v8 = load.i64 v1
    return_call_indirect sig0, v8(v7, v1, v4)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:22 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}
