FTerm
========
Handler {
    parameter: Int {
        value: 1,
    },
    parameter_disposer: Lambda {
        arg_names: [
            (
                "_",
                Uniform,
            ),
        ],
        body: Struct {
            values: [],
        },
        effect: Simple,
    },
    parameter_replicator: Lambda {
        arg_names: [
            (
                "p",
                Uniform,
            ),
        ],
        body: Struct {
            values: [
                Identifier {
                    name: "p",
                    effect: Simple,
                },
                Identifier {
                    name: "p",
                    effect: Simple,
                },
            ],
        },
        effect: Simple,
    },
    transform: Lambda {
        arg_names: [
            (
                "p",
                Uniform,
            ),
            (
                "r",
                Uniform,
            ),
        ],
        body: Redex {
            function: Identifier {
                name: "_int_add",
                effect: Simple,
            },
            args: [
                Redex {
                    function: Identifier {
                        name: "_int_mul",
                        effect: Simple,
                    },
                    args: [
                        Identifier {
                            name: "p",
                            effect: Simple,
                        },
                        Int {
                            value: 100,
                        },
                    ],
                },
                Identifier {
                    name: "r",
                    effect: Simple,
                },
            ],
        },
        effect: Simple,
    },
    simple_handlers: [
        (
            Str {
                value: "track",
            },
            Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                    (
                        "v",
                        Uniform,
                    ),
                ],
                body: Struct {
                    values: [
                        Redex {
                            function: Identifier {
                                name: "_int_mul",
                                effect: Simple,
                            },
                            args: [
                                Identifier {
                                    name: "p",
                                    effect: Simple,
                                },
                                Identifier {
                                    name: "v",
                                    effect: Simple,
                                },
                            ],
                        },
                        Struct {
                            values: [
                                Int {
                                    value: 1,
                                },
                                Struct {
                                    values: [],
                                },
                            ],
                        },
                    ],
                },
                effect: Simple,
            },
        ),
    ],
    complex_handlers: [],
    input: Thunk {
        computation: Handler {
            parameter: Struct {
                values: [],
            },
            parameter_disposer: Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                ],
                body: OperationCall {
                    eff: Str {
                        value: "track",
                    },
                    args: [
                        Int {
                            value: 11,
                        },
                    ],
                    effect: Simple,
                },
                effect: Simple,
            },
            parameter_replicator: Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                ],
                body: Struct {
                    values: [
                        Identifier {
                            name: "p",
                            effect: Simple,
                        },
                        Identifier {
                            name: "p",
                            effect: Simple,
                        },
                    ],
                },
                effect: Simple,
            },
            transform: Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                    (
                        "r",
                        Uniform,
                    ),
                ],
                body: Identifier {
                    name: "r",
                    effect: Simple,
                },
                effect: Simple,
            },
            simple_handlers: [
                (
                    Str {
                        value: "outerExp",
                    },
                    Lambda {
                        arg_names: [
                            (
                                "p",
                                Uniform,
                            ),
                            (
                                "v",
                                Uniform,
                            ),
                        ],
                        body: Let {
                            name: "_",
                            t: OperationCall {
                                eff: Str {
                                    value: "track",
                                },
                                args: [
                                    Int {
                                        value: 2,
                                    },
                                ],
                                effect: Simple,
                            },
                            body: Struct {
                                values: [
                                    Identifier {
                                        name: "p",
                                        effect: Simple,
                                    },
                                    Struct {
                                        values: [
                                            Int {
                                                value: 0,
                                            },
                                            Identifier {
                                                name: "v",
                                                effect: Simple,
                                            },
                                        ],
                                    },
                                ],
                            },
                        },
                        effect: Simple,
                    },
                ),
            ],
            complex_handlers: [],
            input: Thunk {
                computation: Handler {
                    parameter: Struct {
                        values: [],
                    },
                    parameter_disposer: Lambda {
                        arg_names: [
                            (
                                "p",
                                Uniform,
                            ),
                        ],
                        body: OperationCall {
                            eff: Str {
                                value: "track",
                            },
                            args: [
                                Int {
                                    value: 7,
                                },
                            ],
                            effect: Simple,
                        },
                        effect: Simple,
                    },
                    parameter_replicator: Lambda {
                        arg_names: [
                            (
                                "p",
                                Uniform,
                            ),
                        ],
                        body: Struct {
                            values: [
                                Identifier {
                                    name: "p",
                                    effect: Simple,
                                },
                                Identifier {
                                    name: "p",
                                    effect: Simple,
                                },
                            ],
                        },
                        effect: Simple,
                    },
                    transform: Lambda {
                        arg_names: [
                            (
                                "p",
                                Uniform,
                            ),
                            (
                                "r",
                                Uniform,
                            ),
                        ],
                        body: Identifier {
                            name: "r",
                            effect: Simple,
                        },
                        effect: Simple,
                    },
                    simple_handlers: [
                        (
                            Str {
                                value: "innerExp",
                            },
                            Lambda {
                                arg_names: [
                                    (
                                        "p",
                                        Uniform,
                                    ),
                                    (
                                        "v",
                                        Uniform,
                                    ),
                                ],
                                body: Let {
                                    name: "_",
                                    t: OperationCall {
                                        eff: Str {
                                            value: "track",
                                        },
                                        args: [
                                            Int {
                                                value: 3,
                                            },
                                        ],
                                        effect: Simple,
                                    },
                                    body: Struct {
                                        values: [
                                            Identifier {
                                                name: "p",
                                                effect: Simple,
                                            },
                                            Struct {
                                                values: [
                                                    Int {
                                                        value: 0,
                                                    },
                                                    Identifier {
                                                        name: "v",
                                                        effect: Simple,
                                                    },
                                                ],
                                            },
                                        ],
                                    },
                                },
                                effect: Simple,
                            },
                        ),
                    ],
                    complex_handlers: [],
                    input: Thunk {
                        computation: Handler {
                            parameter: Struct {
                                values: [],
                            },
                            parameter_disposer: Lambda {
                                arg_names: [
                                    (
                                        "p",
                                        Uniform,
                                    ),
                                ],
                                body: Let {
                                    name: "_",
                                    t: OperationCall {
                                        eff: Str {
                                            value: "track",
                                        },
                                        args: [
                                            Int {
                                                value: 5,
                                            },
                                        ],
                                        effect: Simple,
                                    },
                                    body: OperationCall {
                                        eff: Str {
                                            value: "innerExp",
                                        },
                                        args: [
                                            Int {
                                                value: 2,
                                            },
                                        ],
                                        effect: Simple,
                                    },
                                },
                                effect: Simple,
                            },
                            parameter_replicator: Lambda {
                                arg_names: [
                                    (
                                        "p",
                                        Uniform,
                                    ),
                                ],
                                body: Struct {
                                    values: [
                                        Identifier {
                                            name: "p",
                                            effect: Simple,
                                        },
                                        Identifier {
                                            name: "p",
                                            effect: Simple,
                                        },
                                    ],
                                },
                                effect: Simple,
                            },
                            transform: Lambda {
                                arg_names: [
                                    (
                                        "p",
                                        Uniform,
                                    ),
                                    (
                                        "r",
                                        Uniform,
                                    ),
                                ],
                                body: Identifier {
                                    name: "r",
                                    effect: Simple,
                                },
                                effect: Simple,
                            },
                            simple_handlers: [],
                            complex_handlers: [],
                            input: Thunk {
                                computation: Let {
                                    name: "_",
                                    t: OperationCall {
                                        eff: Str {
                                            value: "outerExp",
                                        },
                                        args: [
                                            Int {
                                                value: 1,
                                            },
                                        ],
                                        effect: Simple,
                                    },
                                    body: Int {
                                        value: 0,
                                    },
                                },
                                effect: Simple,
                            },
                        },
                        effect: Simple,
                    },
                },
                effect: Simple,
            },
        },
        effect: Simple,
    },
}

Defs
========
[
    (
        "main",
        FunctionDefinition {
            args: [],
            body: Handler {
                parameter: Int {
                    value: 1,
                },
                parameter_disposer: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_0",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                parameter_replicator: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_1",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                transform: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_2",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                complex_handlers: [],
                simple_handlers: [
                    (
                        Str {
                            value: "track",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_3",
                                    effect: Simple,
                                },
                                args: [],
                            },
                            effect: Simple,
                        },
                    ),
                ],
                input: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_18",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 0,
            need_simple: false,
            need_cps: false,
            need_specialized: true,
        },
    ),
    (
        "main$__lambda_0",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [],
                },
            },
            c_type: Default,
            var_bound: 1,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_1",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 0,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 1,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_10",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Return {
                value: Var {
                    index: 1,
                },
            },
            c_type: Default,
            var_bound: 2,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_11",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Let {
                t: OperationCall {
                    eff: Str {
                        value: "track",
                    },
                    args: [
                        Int {
                            value: 3,
                        },
                    ],
                    effect: Simple,
                },
                bound_index: 2,
                body: Return {
                    value: Struct {
                        values: [
                            Var {
                                index: 0,
                            },
                            Struct {
                                values: [
                                    Int {
                                        value: 0,
                                    },
                                    Var {
                                        index: 1,
                                    },
                                ],
                            },
                        ],
                    },
                },
            },
            c_type: Default,
            var_bound: 3,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_12",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Let {
                t: OperationCall {
                    eff: Str {
                        value: "track",
                    },
                    args: [
                        Int {
                            value: 5,
                        },
                    ],
                    effect: Simple,
                },
                bound_index: 1,
                body: OperationCall {
                    eff: Str {
                        value: "innerExp",
                    },
                    args: [
                        Int {
                            value: 2,
                        },
                    ],
                    effect: Simple,
                },
            },
            c_type: Default,
            var_bound: 2,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_13",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 0,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 1,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_14",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Return {
                value: Var {
                    index: 1,
                },
            },
            c_type: Default,
            var_bound: 2,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_15",
        FunctionDefinition {
            args: [],
            body: Let {
                t: OperationCall {
                    eff: Str {
                        value: "outerExp",
                    },
                    args: [
                        Int {
                            value: 1,
                        },
                    ],
                    effect: Simple,
                },
                bound_index: 0,
                body: Return {
                    value: Int {
                        value: 0,
                    },
                },
            },
            c_type: Default,
            var_bound: 1,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_16",
        FunctionDefinition {
            args: [],
            body: Handler {
                parameter: Struct {
                    values: [],
                },
                parameter_disposer: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_12",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                parameter_replicator: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_13",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                transform: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_14",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                complex_handlers: [],
                simple_handlers: [],
                input: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_15",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
            },
            c_type: Default,
            var_bound: 0,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_17",
        FunctionDefinition {
            args: [],
            body: Handler {
                parameter: Struct {
                    values: [],
                },
                parameter_disposer: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_8",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                parameter_replicator: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_9",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                transform: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_10",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                complex_handlers: [],
                simple_handlers: [
                    (
                        Str {
                            value: "innerExp",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_11",
                                    effect: Simple,
                                },
                                args: [],
                            },
                            effect: Simple,
                        },
                    ),
                ],
                input: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_16",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
            },
            c_type: Default,
            var_bound: 0,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_18",
        FunctionDefinition {
            args: [],
            body: Handler {
                parameter: Struct {
                    values: [],
                },
                parameter_disposer: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_4",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                parameter_replicator: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_5",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                transform: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_6",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                complex_handlers: [],
                simple_handlers: [
                    (
                        Str {
                            value: "outerExp",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_7",
                                    effect: Simple,
                                },
                                args: [],
                            },
                            effect: Simple,
                        },
                    ),
                ],
                input: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_17",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
            },
            c_type: Default,
            var_bound: 0,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_2",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Let {
                t: PrimitiveCall {
                    name: "_int_mul",
                    args: [
                        Var {
                            index: 0,
                        },
                        Int {
                            value: 100,
                        },
                    ],
                },
                bound_index: 2,
                body: PrimitiveCall {
                    name: "_int_add",
                    args: [
                        Var {
                            index: 2,
                        },
                        Var {
                            index: 1,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 3,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_3",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Let {
                t: PrimitiveCall {
                    name: "_int_mul",
                    args: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 1,
                        },
                    ],
                },
                bound_index: 2,
                body: Return {
                    value: Struct {
                        values: [
                            Var {
                                index: 2,
                            },
                            Struct {
                                values: [
                                    Int {
                                        value: 1,
                                    },
                                    Struct {
                                        values: [],
                                    },
                                ],
                            },
                        ],
                    },
                },
            },
            c_type: Default,
            var_bound: 3,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_4",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: OperationCall {
                eff: Str {
                    value: "track",
                },
                args: [
                    Int {
                        value: 11,
                    },
                ],
                effect: Simple,
            },
            c_type: Default,
            var_bound: 1,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_5",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 0,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 1,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_6",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Return {
                value: Var {
                    index: 1,
                },
            },
            c_type: Default,
            var_bound: 2,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_7",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Let {
                t: OperationCall {
                    eff: Str {
                        value: "track",
                    },
                    args: [
                        Int {
                            value: 2,
                        },
                    ],
                    effect: Simple,
                },
                bound_index: 2,
                body: Return {
                    value: Struct {
                        values: [
                            Var {
                                index: 0,
                            },
                            Struct {
                                values: [
                                    Int {
                                        value: 0,
                                    },
                                    Var {
                                        index: 1,
                                    },
                                ],
                            },
                        ],
                    },
                },
            },
            c_type: Default,
            var_bound: 3,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_8",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: OperationCall {
                eff: Str {
                    value: "track",
                },
                args: [
                    Int {
                        value: 7,
                    },
                ],
                effect: Simple,
            },
            c_type: Default,
            var_bound: 1,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_9",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 0,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 1,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
]

CLIR
========
[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname7
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64, i64) -> i64 tail
    sig5 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig6 = (i64, i64, i64) apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64, i64) apple_aarch64
    sig9 = (i64, i64, i64, i64) -> i64 tail
    sig10 = (i64, i64) -> i64 tail
    sig11 = (i64, i64) -> i64 apple_aarch64
    fn0 = colocated u0:14 sig0
    fn1 = colocated u0:23 sig1
    fn2 = colocated u0:25 sig2
    fn3 = colocated u0:45 sig3
    fn4 = colocated u0:20 sig4
    fn5 = u0:6 sig5
    fn6 = u0:7 sig6
    fn7 = colocated u0:47 sig7
    fn8 = u0:8 sig8
    fn9 = u0:13 sig9
    fn10 = colocated u0:43 sig10
    fn11 = u0:1 sig11

block0(v0: i64):
    v1 = call fn0()
    v2 = iconst.i64 1
    v3 = ishl_imm v2, 1  ; v2 = 1
    v4 = func_addr.i64 fn1
    v5 = iadd_imm v4, 3
    v6 = func_addr.i64 fn2
    v7 = iadd_imm v6, 3
    v8 = func_addr.i64 fn3
    v9 = iadd_imm v8, 3
    v10 = func_addr.i64 fn4
    stack_store v0, ss0
    v11 = stack_addr.i64 ss0
    v12 = call fn5(v11, v1, v3, v5, v7, v9, v10)
    v13 = stack_load.i64 ss0
    v14 = symbol_value.i64 gv0
    v15 = iadd_imm v14, 8
    v16 = iadd_imm v15, 3
    v17 = func_addr.i64 fn7
    v18 = iadd_imm v17, 3
    call fn6(v12, v16, v18)
    v19 = load.i64 v12
    v20 = func_addr.i64 fn10
    v21 = iadd_imm v20, 3
    stack_store v13, ss0
    v22 = stack_addr.i64 ss0
    v23 = call fn11(v21, v22)
    v24 = stack_load.i64 ss0
    v25 = isub v13, v24
    v26 = load.i64 v19+8
    v27 = ishl_imm v26, 3
    v28 = iadd v27, v25
    v29 = ushr_imm v28, 3
    store v29, v19+8
    v30 = call fn9(v24, v19, v23, v12)
    v31 = load.i64 v30
    v32 = iadd_imm v30, 8
    v33 = sshr_imm v31, 1
    return v33
}


[main$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 0
    v4 = call fn0(v3)  ; v3 = 0
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_1__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 2
    v4 = call fn0(v3)  ; v3 = 2
    store aligned v2, v4
    store aligned v2, v4+8
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_10__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iadd_imm v0, 8
    store v3, v4
    v5 = load.i64 v1+8
    v6 = ishl_imm v5, 3
    v7 = iadd v0, v6
    v8 = load.i64 v1
    return_call_indirect sig0, v8(v7, v1, v4)
}


[main$__lambda_11__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64) -> i64 tail
    sig5 = (i64) -> i64 apple_aarch64
    sig6 = (i64) -> i64 apple_aarch64
    sig7 = (i64, i64, i64) -> i64 tail
    fn0 = colocated u0:14 sig0
    fn1 = colocated u0:16 sig1
    fn2 = colocated u0:18 sig2
    fn3 = u0:4 sig3
    fn4 = u0:0 sig5
    fn5 = u0:0 sig6

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = symbol_value.i64 gv0
    v5 = iadd_imm v4, 8
    v6 = iadd_imm v5, 3
    v7 = call fn0()
    v8 = iconst.i64 3
    v9 = ishl_imm v8, 1  ; v8 = 3
    v10 = iadd_imm v0, -8
    store aligned v9, v10
    v11 = iconst.i64 1
    v12 = func_addr.i64 fn1
    v13 = func_addr.i64 fn2
    v14 = iconst.i64 0
    v15 = call fn3(v6, v10, v7, v11, v12, v13, v14)  ; v11 = 1, v14 = 0
    v16 = load.i64 v15
    v17 = load.i64 v15+8
    v18 = load.i64 v15+16
    v19 = call_indirect sig4, v16(v17, v18)
    v20 = load.i64 v19
    v21 = iadd_imm v19, 8
    v22 = iconst.i64 0
    v23 = ishl_imm v22, 1  ; v22 = 0
    v24 = iconst.i64 2
    v25 = call fn4(v24)  ; v24 = 2
    store aligned v23, v25
    store aligned v3, v25+8
    v26 = iadd_imm v25, 1
    v27 = iconst.i64 2
    v28 = call fn5(v27)  ; v27 = 2
    store aligned v2, v28
    store aligned v26, v28+8
    v29 = iadd_imm v28, 1
    v30 = iadd_imm v0, 8
    store v29, v30
    v31 = load.i64 v1+8
    v32 = ishl_imm v31, 3
    v33 = iadd v0, v32
    v34 = load.i64 v1
    return_call_indirect sig7, v34(v33, v1, v30)
}


[main$__lambda_12__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname5
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64) -> i64 tail
    sig5 = (i64, i64, i64) -> i64 apple_aarch64
    sig6 = (i64, i64) -> i64 tail
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig9 = (i64, i64) -> i64 tail
    fn0 = colocated u0:14 sig0
    fn1 = colocated u0:16 sig1
    fn2 = colocated u0:18 sig2
    fn3 = u0:4 sig3
    fn4 = %Memmove sig5
    fn5 = colocated u0:16 sig6
    fn6 = colocated u0:18 sig7
    fn7 = u0:4 sig8

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = symbol_value.i64 gv0
    v4 = iadd_imm v3, 8
    v5 = iadd_imm v4, 3
    v6 = call fn0()
    v7 = iconst.i64 5
    v8 = ishl_imm v7, 1  ; v7 = 5
    v9 = iadd_imm v0, -8
    store aligned v8, v9
    v10 = iconst.i64 1
    v11 = func_addr.i64 fn1
    v12 = func_addr.i64 fn2
    v13 = iconst.i64 0
    v14 = call fn3(v5, v9, v6, v10, v11, v12, v13)  ; v10 = 1, v13 = 0
    v15 = load.i64 v14
    v16 = load.i64 v14+8
    v17 = load.i64 v14+16
    v18 = call_indirect sig4, v15(v16, v17)
    v19 = load.i64 v18
    v20 = iadd_imm v18, 8
    v21 = symbol_value.i64 gv1
    v22 = iadd_imm v21, 8
    v23 = iadd_imm v22, 3
    v24 = iconst.i64 2
    v25 = ishl_imm v24, 1  ; v24 = 2
    v26 = iadd_imm v20, -8
    store aligned v25, v26
    v27 = iadd_imm v26, 8
    v28 = isub v0, v26
    v29 = call fn4(v27, v26, v28)
    v30 = isub v0, v27
    v31 = load.i64 v1+8
    v32 = ishl_imm v31, 3
    v33 = iadd v32, v30
    v34 = ushr_imm v33, 3
    store v34, v1+8
    v35 = iconst.i64 1
    v36 = func_addr.i64 fn5
    v37 = func_addr.i64 fn6
    v38 = iconst.i64 1
    v39 = call fn7(v23, v27, v1, v35, v36, v37, v38)  ; v35 = 1, v38 = 1
    v40 = load.i64 v39
    v41 = load.i64 v39+8
    v42 = load.i64 v39+16
    return_call_indirect sig9, v40(v41, v42)
}


[main$__lambda_13__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 2
    v4 = call fn0(v3)  ; v3 = 2
    store aligned v2, v4
    store aligned v2, v4+8
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_14__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iadd_imm v0, 8
    store v3, v4
    v5 = load.i64 v1+8
    v6 = ishl_imm v5, 3
    v7 = iadd v0, v6
    v8 = load.i64 v1
    return_call_indirect sig0, v8(v7, v1, v4)
}


[main$__lambda_15__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64) -> i64 tail
    sig5 = (i64, i64, i64) -> i64 tail
    fn0 = colocated u0:14 sig0
    fn1 = colocated u0:16 sig1
    fn2 = colocated u0:18 sig2
    fn3 = u0:4 sig3

block0(v0: i64, v1: i64):
    v2 = symbol_value.i64 gv0
    v3 = iadd_imm v2, 8
    v4 = iadd_imm v3, 3
    v5 = call fn0()
    v6 = iconst.i64 1
    v7 = ishl_imm v6, 1  ; v6 = 1
    v8 = iadd_imm v0, -8
    store aligned v7, v8
    v9 = iconst.i64 1
    v10 = func_addr.i64 fn1
    v11 = func_addr.i64 fn2
    v12 = iconst.i64 0
    v13 = call fn3(v4, v8, v5, v9, v10, v11, v12)  ; v9 = 1, v12 = 0
    v14 = load.i64 v13
    v15 = load.i64 v13+8
    v16 = load.i64 v13+16
    v17 = call_indirect sig4, v14(v15, v16)
    v18 = load.i64 v17
    v19 = iadd_imm v17, 8
    v20 = iconst.i64 0
    v21 = ishl_imm v20, 1  ; v20 = 0
    v22 = iadd_imm v0, -8
    store v21, v22
    v23 = load.i64 v1+8
    v24 = ishl_imm v23, 3
    v25 = iadd v0, v24
    v26 = load.i64 v1
    return_call_indirect sig5, v26(v25, v1, v22)
}


[main$__lambda_16__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64, i64) -> i64 tail
    sig5 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig6 = (i64, i64, i64) apple_aarch64
    sig7 = (i64, i64, i64) apple_aarch64
    sig8 = (i64, i64, i64, i64) -> i64 tail
    sig9 = (i64, i64) -> i64 tail
    sig10 = (i64, i64) -> i64 apple_aarch64
    fn0 = u0:0 sig0
    fn1 = colocated u0:31 sig1
    fn2 = colocated u0:33 sig2
    fn3 = colocated u0:35 sig3
    fn4 = colocated u0:20 sig4
    fn5 = u0:6 sig5
    fn6 = u0:7 sig6
    fn7 = u0:8 sig7
    fn8 = u0:13 sig8
    fn9 = colocated u0:37 sig9
    fn10 = u0:1 sig10

block0(v0: i64, v1: i64):
    v2 = isub v0, v0
    v3 = load.i64 v1+8
    v4 = ishl_imm v3, 3
    v5 = iadd v4, v2
    v6 = ushr_imm v5, 3
    store v6, v1+8
    v7 = iconst.i64 0
    v8 = call fn0(v7)  ; v7 = 0
    v9 = iadd_imm v8, 1
    v10 = func_addr.i64 fn1
    v11 = iadd_imm v10, 3
    v12 = func_addr.i64 fn2
    v13 = iadd_imm v12, 3
    v14 = func_addr.i64 fn3
    v15 = iadd_imm v14, 3
    v16 = func_addr.i64 fn4
    stack_store v0, ss0
    v17 = stack_addr.i64 ss0
    v18 = call fn5(v17, v1, v9, v11, v13, v15, v16)
    v19 = stack_load.i64 ss0
    v20 = load.i64 v18
    v21 = func_addr.i64 fn9
    v22 = iadd_imm v21, 3
    stack_store v19, ss0
    v23 = stack_addr.i64 ss0
    v24 = call fn10(v22, v23)
    v25 = stack_load.i64 ss0
    v26 = isub v19, v25
    v27 = load.i64 v20+8
    v28 = ishl_imm v27, 3
    v29 = iadd v28, v26
    v30 = ushr_imm v29, 3
    store v30, v20+8
    return_call fn8(v25, v20, v24, v18)
}


[main$__lambda_17__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname7
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64, i64) -> i64 tail
    sig5 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig6 = (i64, i64, i64) apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64, i64) apple_aarch64
    sig9 = (i64, i64, i64, i64) -> i64 tail
    sig10 = (i64, i64) -> i64 tail
    sig11 = (i64, i64) -> i64 apple_aarch64
    fn0 = u0:0 sig0
    fn1 = colocated u0:57 sig1
    fn2 = colocated u0:59 sig2
    fn3 = colocated u0:27 sig3
    fn4 = colocated u0:20 sig4
    fn5 = u0:6 sig5
    fn6 = u0:7 sig6
    fn7 = colocated u0:29 sig7
    fn8 = u0:8 sig8
    fn9 = u0:13 sig9
    fn10 = colocated u0:39 sig10
    fn11 = u0:1 sig11

block0(v0: i64, v1: i64):
    v2 = isub v0, v0
    v3 = load.i64 v1+8
    v4 = ishl_imm v3, 3
    v5 = iadd v4, v2
    v6 = ushr_imm v5, 3
    store v6, v1+8
    v7 = iconst.i64 0
    v8 = call fn0(v7)  ; v7 = 0
    v9 = iadd_imm v8, 1
    v10 = func_addr.i64 fn1
    v11 = iadd_imm v10, 3
    v12 = func_addr.i64 fn2
    v13 = iadd_imm v12, 3
    v14 = func_addr.i64 fn3
    v15 = iadd_imm v14, 3
    v16 = func_addr.i64 fn4
    stack_store v0, ss0
    v17 = stack_addr.i64 ss0
    v18 = call fn5(v17, v1, v9, v11, v13, v15, v16)
    v19 = stack_load.i64 ss0
    v20 = symbol_value.i64 gv0
    v21 = iadd_imm v20, 8
    v22 = iadd_imm v21, 3
    v23 = func_addr.i64 fn7
    v24 = iadd_imm v23, 3
    call fn6(v18, v22, v24)
    v25 = load.i64 v18
    v26 = func_addr.i64 fn10
    v27 = iadd_imm v26, 3
    stack_store v19, ss0
    v28 = stack_addr.i64 ss0
    v29 = call fn11(v27, v28)
    v30 = stack_load.i64 ss0
    v31 = isub v19, v30
    v32 = load.i64 v25+8
    v33 = ishl_imm v32, 3
    v34 = iadd v33, v31
    v35 = ushr_imm v34, 3
    store v35, v25+8
    return_call fn9(v30, v25, v29, v18)
}


[main$__lambda_18__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname7
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64, i64) -> i64 tail
    sig5 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig6 = (i64, i64, i64) apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64, i64) apple_aarch64
    sig9 = (i64, i64, i64, i64) -> i64 tail
    sig10 = (i64, i64) -> i64 tail
    sig11 = (i64, i64) -> i64 apple_aarch64
    fn0 = u0:0 sig0
    fn1 = colocated u0:49 sig1
    fn2 = colocated u0:51 sig2
    fn3 = colocated u0:53 sig3
    fn4 = colocated u0:20 sig4
    fn5 = u0:6 sig5
    fn6 = u0:7 sig6
    fn7 = colocated u0:55 sig7
    fn8 = u0:8 sig8
    fn9 = u0:13 sig9
    fn10 = colocated u0:41 sig10
    fn11 = u0:1 sig11

block0(v0: i64, v1: i64):
    v2 = isub v0, v0
    v3 = load.i64 v1+8
    v4 = ishl_imm v3, 3
    v5 = iadd v4, v2
    v6 = ushr_imm v5, 3
    store v6, v1+8
    v7 = iconst.i64 0
    v8 = call fn0(v7)  ; v7 = 0
    v9 = iadd_imm v8, 1
    v10 = func_addr.i64 fn1
    v11 = iadd_imm v10, 3
    v12 = func_addr.i64 fn2
    v13 = iadd_imm v12, 3
    v14 = func_addr.i64 fn3
    v15 = iadd_imm v14, 3
    v16 = func_addr.i64 fn4
    stack_store v0, ss0
    v17 = stack_addr.i64 ss0
    v18 = call fn5(v17, v1, v9, v11, v13, v15, v16)
    v19 = stack_load.i64 ss0
    v20 = symbol_value.i64 gv0
    v21 = iadd_imm v20, 8
    v22 = iadd_imm v21, 3
    v23 = func_addr.i64 fn7
    v24 = iadd_imm v23, 3
    call fn6(v18, v22, v24)
    v25 = load.i64 v18
    v26 = func_addr.i64 fn10
    v27 = iadd_imm v26, 3
    stack_store v19, ss0
    v28 = stack_addr.i64 ss0
    v29 = call fn11(v27, v28)
    v30 = stack_load.i64 ss0
    v31 = isub v19, v30
    v32 = load.i64 v25+8
    v33 = ishl_imm v32, 3
    v34 = iadd v33, v31
    v35 = ushr_imm v34, 3
    store v35, v25+8
    return_call fn9(v30, v25, v29, v18)
}


[main$__lambda_2__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iconst.i64 100
    v5 = sshr_imm v2, 1
    v6 = imul v5, v4  ; v4 = 100
    v7 = sshr_imm v3, 1
    v8 = iadd v6, v7
    v9 = ishl_imm v8, 1
    v10 = iadd_imm v0, 8
    store v9, v10
    v11 = load.i64 v1+8
    v12 = ishl_imm v11, 3
    v13 = iadd v0, v12
    v14 = load.i64 v1
    return_call_indirect sig0, v14(v13, v1, v10)
}


[main$__lambda_3__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64) -> i64 apple_aarch64
    sig2 = (i64) -> i64 apple_aarch64
    sig3 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = u0:0 sig1
    fn2 = u0:0 sig2

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = sshr_imm v2, 1
    v5 = sshr_imm v3, 1
    v6 = imul v4, v5
    v7 = ishl_imm v6, 1
    v8 = iconst.i64 1
    v9 = ishl_imm v8, 1  ; v8 = 1
    v10 = iconst.i64 0
    v11 = call fn0(v10)  ; v10 = 0
    v12 = iadd_imm v11, 1
    v13 = iconst.i64 2
    v14 = call fn1(v13)  ; v13 = 2
    store aligned v9, v14
    store aligned v12, v14+8
    v15 = iadd_imm v14, 1
    v16 = iconst.i64 2
    v17 = call fn2(v16)  ; v16 = 2
    store aligned v7, v17
    store aligned v15, v17+8
    v18 = iadd_imm v17, 1
    v19 = iadd_imm v0, 8
    store v18, v19
    v20 = load.i64 v1+8
    v21 = ishl_imm v20, 3
    v22 = iadd v0, v21
    v23 = load.i64 v1
    return_call_indirect sig3, v23(v22, v1, v19)
}


[main$__lambda_4__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = (i64, i64, i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64) -> i64 tail
    fn0 = %Memmove sig0
    fn1 = colocated u0:16 sig1
    fn2 = colocated u0:18 sig2
    fn3 = u0:4 sig3

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = symbol_value.i64 gv0
    v4 = iadd_imm v3, 8
    v5 = iadd_imm v4, 3
    v6 = iconst.i64 11
    v7 = ishl_imm v6, 1  ; v6 = 11
    v8 = iadd_imm v0, -8
    store aligned v7, v8
    v9 = iadd_imm v8, 8
    v10 = isub v0, v8
    v11 = call fn0(v9, v8, v10)
    v12 = isub v0, v9
    v13 = load.i64 v1+8
    v14 = ishl_imm v13, 3
    v15 = iadd v14, v12
    v16 = ushr_imm v15, 3
    store v16, v1+8
    v17 = iconst.i64 1
    v18 = func_addr.i64 fn1
    v19 = func_addr.i64 fn2
    v20 = iconst.i64 1
    v21 = call fn3(v5, v9, v1, v17, v18, v19, v20)  ; v17 = 1, v20 = 1
    v22 = load.i64 v21
    v23 = load.i64 v21+8
    v24 = load.i64 v21+16
    return_call_indirect sig4, v22(v23, v24)
}


[main$__lambda_5__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 2
    v4 = call fn0(v3)  ; v3 = 2
    store aligned v2, v4
    store aligned v2, v4+8
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_6__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iadd_imm v0, 8
    store v3, v4
    v5 = load.i64 v1+8
    v6 = ishl_imm v5, 3
    v7 = iadd v0, v6
    v8 = load.i64 v1
    return_call_indirect sig0, v8(v7, v1, v4)
}


[main$__lambda_7__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64) -> i64 tail
    sig5 = (i64) -> i64 apple_aarch64
    sig6 = (i64) -> i64 apple_aarch64
    sig7 = (i64, i64, i64) -> i64 tail
    fn0 = colocated u0:14 sig0
    fn1 = colocated u0:16 sig1
    fn2 = colocated u0:18 sig2
    fn3 = u0:4 sig3
    fn4 = u0:0 sig5
    fn5 = u0:0 sig6

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = symbol_value.i64 gv0
    v5 = iadd_imm v4, 8
    v6 = iadd_imm v5, 3
    v7 = call fn0()
    v8 = iconst.i64 2
    v9 = ishl_imm v8, 1  ; v8 = 2
    v10 = iadd_imm v0, -8
    store aligned v9, v10
    v11 = iconst.i64 1
    v12 = func_addr.i64 fn1
    v13 = func_addr.i64 fn2
    v14 = iconst.i64 0
    v15 = call fn3(v6, v10, v7, v11, v12, v13, v14)  ; v11 = 1, v14 = 0
    v16 = load.i64 v15
    v17 = load.i64 v15+8
    v18 = load.i64 v15+16
    v19 = call_indirect sig4, v16(v17, v18)
    v20 = load.i64 v19
    v21 = iadd_imm v19, 8
    v22 = iconst.i64 0
    v23 = ishl_imm v22, 1  ; v22 = 0
    v24 = iconst.i64 2
    v25 = call fn4(v24)  ; v24 = 2
    store aligned v23, v25
    store aligned v3, v25+8
    v26 = iadd_imm v25, 1
    v27 = iconst.i64 2
    v28 = call fn5(v27)  ; v27 = 2
    store aligned v2, v28
    store aligned v26, v28+8
    v29 = iadd_imm v28, 1
    v30 = iadd_imm v0, 8
    store v29, v30
    v31 = load.i64 v1+8
    v32 = ishl_imm v31, 3
    v33 = iadd v0, v32
    v34 = load.i64 v1
    return_call_indirect sig7, v34(v33, v1, v30)
}


[main$__lambda_8__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = (i64, i64, i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64) -> i64 tail
    fn0 = %Memmove sig0
    fn1 = colocated u0:16 sig1
    fn2 = colocated u0:18 sig2
    fn3 = u0:4 sig3

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = symbol_value.i64 gv0
    v4 = iadd_imm v3, 8
    v5 = iadd_imm v4, 3
    v6 = iconst.i64 7
    v7 = ishl_imm v6, 1  ; v6 = 7
    v8 = iadd_imm v0, -8
    store aligned v7, v8
    v9 = iadd_imm v8, 8
    v10 = isub v0, v8
    v11 = call fn0(v9, v8, v10)
    v12 = isub v0, v9
    v13 = load.i64 v1+8
    v14 = ishl_imm v13, 3
    v15 = iadd v14, v12
    v16 = ushr_imm v15, 3
    store v16, v1+8
    v17 = iconst.i64 1
    v18 = func_addr.i64 fn1
    v19 = func_addr.i64 fn2
    v20 = iconst.i64 1
    v21 = call fn3(v5, v9, v1, v17, v18, v19, v20)  ; v17 = 1, v20 = 1
    v22 = load.i64 v21
    v23 = load.i64 v21+8
    v24 = load.i64 v21+16
    return_call_indirect sig4, v22(v23, v24)
}


[main$__lambda_9__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 2
    v4 = call fn0(v3)  ; v3 = 2
    store aligned v2, v4
    store aligned v2, v4+8
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:22 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}


Result
========
231001