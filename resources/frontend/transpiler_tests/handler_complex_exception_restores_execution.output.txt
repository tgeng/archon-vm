FTerm
========
Defs {
    defs: [
        (
            "interruptAndRecover",
            Def {
                args: [
                    (
                        "x",
                        Specialized(
                            Integer,
                        ),
                    ),
                ],
                body: Handler {
                    parameter: Struct {
                        values: [],
                    },
                    parameter_disposer: Lambda {
                        arg_names: [
                            (
                                "_",
                                Uniform,
                            ),
                        ],
                        body: Struct {
                            values: [],
                        },
                        effect: Basic,
                    },
                    parameter_replicator: Lambda {
                        arg_names: [
                            (
                                "p",
                                Uniform,
                            ),
                        ],
                        body: Struct {
                            values: [
                                Identifier {
                                    name: "p",
                                    effect: Basic,
                                },
                                Identifier {
                                    name: "p",
                                    effect: Basic,
                                },
                            ],
                        },
                        effect: Basic,
                    },
                    transform: Lambda {
                        arg_names: [
                            (
                                "p",
                                Uniform,
                            ),
                            (
                                "r",
                                Uniform,
                            ),
                        ],
                        body: Identifier {
                            name: "r",
                            effect: Basic,
                        },
                        effect: Basic,
                    },
                    simple_handlers: [],
                    complex_handlers: [
                        (
                            Str {
                                value: "exp",
                            },
                            Lambda {
                                arg_names: [
                                    (
                                        "p",
                                        Uniform,
                                    ),
                                    (
                                        "x",
                                        Uniform,
                                    ),
                                    (
                                        "cont",
                                        Uniform,
                                    ),
                                ],
                                body: Let {
                                    name: "_",
                                    t: Redex {
                                        function: Force {
                                            thunk: Identifier {
                                                name: "cont",
                                                effect: Basic,
                                            },
                                            effect: Basic,
                                        },
                                        args: [
                                            Int {
                                                value: 1,
                                            },
                                            Identifier {
                                                name: "p",
                                                effect: Basic,
                                            },
                                        ],
                                    },
                                    body: Identifier {
                                        name: "x",
                                        effect: Basic,
                                    },
                                },
                                effect: Basic,
                            },
                        ),
                    ],
                    input: Thunk {
                        computation: Let {
                            name: "_",
                            t: OperationCall {
                                eff: Str {
                                    value: "exp",
                                },
                                args: [
                                    Identifier {
                                        name: "x",
                                        effect: Basic,
                                    },
                                ],
                                effect: Complex,
                            },
                            body: Let {
                                name: "_",
                                t: OperationCall {
                                    eff: Str {
                                        value: "track",
                                    },
                                    args: [
                                        Int {
                                            value: 31,
                                        },
                                    ],
                                    effect: Simple,
                                },
                                body: Int {
                                    value: 31,
                                },
                            },
                        },
                        effect: Basic,
                    },
                },
                c_type: SpecializedF(
                    Specialized(
                        Integer,
                    ),
                ),
            },
        ),
    ],
    body: Some(
        Handler {
            parameter: Int {
                value: 1,
            },
            parameter_disposer: Lambda {
                arg_names: [
                    (
                        "_",
                        Uniform,
                    ),
                ],
                body: Struct {
                    values: [],
                },
                effect: Basic,
            },
            parameter_replicator: Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                ],
                body: Struct {
                    values: [
                        Identifier {
                            name: "p",
                            effect: Basic,
                        },
                        Identifier {
                            name: "p",
                            effect: Basic,
                        },
                    ],
                },
                effect: Basic,
            },
            transform: Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                    (
                        "r",
                        Uniform,
                    ),
                ],
                body: Redex {
                    function: Identifier {
                        name: "_int_add",
                        effect: Basic,
                    },
                    args: [
                        Redex {
                            function: Identifier {
                                name: "_int_mul",
                                effect: Basic,
                            },
                            args: [
                                Identifier {
                                    name: "p",
                                    effect: Basic,
                                },
                                Int {
                                    value: 100,
                                },
                            ],
                        },
                        Identifier {
                            name: "r",
                            effect: Basic,
                        },
                    ],
                },
                effect: Basic,
            },
            simple_handlers: [
                (
                    Str {
                        value: "track",
                    },
                    Lambda {
                        arg_names: [
                            (
                                "p",
                                Uniform,
                            ),
                            (
                                "v",
                                Uniform,
                            ),
                        ],
                        body: Struct {
                            values: [
                                Redex {
                                    function: Identifier {
                                        name: "_int_mul",
                                        effect: Basic,
                                    },
                                    args: [
                                        Identifier {
                                            name: "p",
                                            effect: Basic,
                                        },
                                        Identifier {
                                            name: "v",
                                            effect: Basic,
                                        },
                                    ],
                                },
                                Struct {
                                    values: [
                                        Int {
                                            value: 1,
                                        },
                                        Struct {
                                            values: [],
                                        },
                                    ],
                                },
                            ],
                        },
                        effect: Basic,
                    },
                ),
            ],
            complex_handlers: [],
            input: Thunk {
                computation: Let {
                    name: "_",
                    t: OperationCall {
                        eff: Str {
                            value: "track",
                        },
                        args: [
                            Int {
                                value: 2,
                            },
                        ],
                        effect: Simple,
                    },
                    body: Let {
                        name: "_",
                        t: OperationCall {
                            eff: Str {
                                value: "track",
                            },
                            args: [
                                Redex {
                                    function: Identifier {
                                        name: "interruptAndRecover",
                                        effect: Basic,
                                    },
                                    args: [
                                        Int {
                                            value: 3,
                                        },
                                    ],
                                },
                            ],
                            effect: Simple,
                        },
                        body: Let {
                            name: "_",
                            t: OperationCall {
                                eff: Str {
                                    value: "track",
                                },
                                args: [
                                    Redex {
                                        function: Identifier {
                                            name: "interruptAndRecover",
                                            effect: Basic,
                                        },
                                        args: [
                                            Int {
                                                value: 5,
                                            },
                                        ],
                                    },
                                ],
                                effect: Simple,
                            },
                            body: Let {
                                name: "_",
                                t: OperationCall {
                                    eff: Str {
                                        value: "track",
                                    },
                                    args: [
                                        Redex {
                                            function: Identifier {
                                                name: "interruptAndRecover",
                                                effect: Basic,
                                            },
                                            args: [
                                                Int {
                                                    value: 7,
                                                },
                                            ],
                                        },
                                    ],
                                    effect: Simple,
                                },
                                body: Int {
                                    value: 1,
                                },
                            },
                        },
                    },
                },
                effect: Basic,
            },
        },
    ),
}

Defs
========
[
    (
        "interruptAndRecover",
        FunctionDefinition {
            args: [
                (
                    0,
                    Specialized(
                        Integer,
                    ),
                ),
            ],
            body: Handler {
                parameter: Struct {
                    values: [],
                },
                parameter_disposer: Thunk {
                    t: Redex {
                        function: Def {
                            name: "interruptAndRecover$__lambda_0",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
                parameter_replicator: Thunk {
                    t: Redex {
                        function: Def {
                            name: "interruptAndRecover$__lambda_1",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
                transform: Thunk {
                    t: Redex {
                        function: Def {
                            name: "interruptAndRecover$__lambda_2",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
                complex_handlers: [
                    (
                        Str {
                            value: "exp",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "interruptAndRecover$__lambda_3",
                                    effect: Basic,
                                },
                                args: [],
                            },
                            effect: Basic,
                        },
                    ),
                ],
                simple_handlers: [],
                input: Thunk {
                    t: Redex {
                        function: Def {
                            name: "interruptAndRecover$__lambda_4",
                            effect: Basic,
                        },
                        args: [
                            Var {
                                index: 0,
                            },
                        ],
                    },
                    effect: Basic,
                },
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 1,
            may_be_simple: false,
            may_be_complex: false,
            may_be_specialized: true,
        },
    ),
    (
        "interruptAndRecover$__lambda_0",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [],
                },
            },
            c_type: Default,
            var_bound: 1,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "interruptAndRecover$__lambda_1",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 0,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 1,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "interruptAndRecover$__lambda_2",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Return {
                value: Var {
                    index: 1,
                },
            },
            c_type: Default,
            var_bound: 2,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "interruptAndRecover$__lambda_3",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
                (
                    2,
                    Uniform,
                ),
            ],
            body: Let {
                t: Redex {
                    function: Force {
                        thunk: Var {
                            index: 2,
                        },
                        effect: Basic,
                    },
                    args: [
                        Int {
                            value: 1,
                        },
                        Var {
                            index: 0,
                        },
                    ],
                },
                bound_index: 3,
                body: Return {
                    value: Var {
                        index: 1,
                    },
                },
            },
            c_type: Default,
            var_bound: 4,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "interruptAndRecover$__lambda_4",
        FunctionDefinition {
            args: [
                (
                    0,
                    Specialized(
                        Integer,
                    ),
                ),
            ],
            body: Let {
                t: OperationCall {
                    eff: Str {
                        value: "exp",
                    },
                    args: [
                        Var {
                            index: 0,
                        },
                    ],
                    effect: Complex,
                },
                bound_index: 1,
                body: Let {
                    t: OperationCall {
                        eff: Str {
                            value: "track",
                        },
                        args: [
                            Int {
                                value: 31,
                            },
                        ],
                        effect: Simple,
                    },
                    bound_index: 2,
                    body: Return {
                        value: Int {
                            value: 31,
                        },
                    },
                },
            },
            c_type: Default,
            var_bound: 3,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main",
        FunctionDefinition {
            args: [],
            body: Handler {
                parameter: Int {
                    value: 1,
                },
                parameter_disposer: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_0",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
                parameter_replicator: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_1",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
                transform: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_2",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
                complex_handlers: [],
                simple_handlers: [
                    (
                        Str {
                            value: "track",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_3",
                                    effect: Basic,
                                },
                                args: [],
                            },
                            effect: Basic,
                        },
                    ),
                ],
                input: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_4",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 0,
            may_be_simple: false,
            may_be_complex: false,
            may_be_specialized: true,
        },
    ),
    (
        "main$__lambda_0",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [],
                },
            },
            c_type: Default,
            var_bound: 1,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_1",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 0,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 1,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_2",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Let {
                t: PrimitiveCall {
                    name: "_int_mul",
                    args: [
                        Var {
                            index: 0,
                        },
                        Int {
                            value: 100,
                        },
                    ],
                },
                bound_index: 2,
                body: PrimitiveCall {
                    name: "_int_add",
                    args: [
                        Var {
                            index: 2,
                        },
                        Var {
                            index: 1,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 3,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_3",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Let {
                t: PrimitiveCall {
                    name: "_int_mul",
                    args: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 1,
                        },
                    ],
                },
                bound_index: 2,
                body: Return {
                    value: Struct {
                        values: [
                            Var {
                                index: 2,
                            },
                            Struct {
                                values: [
                                    Int {
                                        value: 1,
                                    },
                                    Struct {
                                        values: [],
                                    },
                                ],
                            },
                        ],
                    },
                },
            },
            c_type: Default,
            var_bound: 3,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_4",
        FunctionDefinition {
            args: [],
            body: Let {
                t: OperationCall {
                    eff: Str {
                        value: "track",
                    },
                    args: [
                        Int {
                            value: 2,
                        },
                    ],
                    effect: Simple,
                },
                bound_index: 0,
                body: Let {
                    t: Let {
                        t: Redex {
                            function: Def {
                                name: "interruptAndRecover",
                                effect: Basic,
                            },
                            args: [
                                Int {
                                    value: 3,
                                },
                            ],
                        },
                        bound_index: 1,
                        body: OperationCall {
                            eff: Str {
                                value: "track",
                            },
                            args: [
                                Var {
                                    index: 1,
                                },
                            ],
                            effect: Simple,
                        },
                    },
                    bound_index: 2,
                    body: Let {
                        t: Let {
                            t: Redex {
                                function: Def {
                                    name: "interruptAndRecover",
                                    effect: Basic,
                                },
                                args: [
                                    Int {
                                        value: 5,
                                    },
                                ],
                            },
                            bound_index: 3,
                            body: OperationCall {
                                eff: Str {
                                    value: "track",
                                },
                                args: [
                                    Var {
                                        index: 3,
                                    },
                                ],
                                effect: Simple,
                            },
                        },
                        bound_index: 4,
                        body: Let {
                            t: Let {
                                t: Redex {
                                    function: Def {
                                        name: "interruptAndRecover",
                                        effect: Basic,
                                    },
                                    args: [
                                        Int {
                                            value: 7,
                                        },
                                    ],
                                },
                                bound_index: 5,
                                body: OperationCall {
                                    eff: Str {
                                        value: "track",
                                    },
                                    args: [
                                        Var {
                                            index: 5,
                                        },
                                    ],
                                    effect: Simple,
                                },
                            },
                            bound_index: 6,
                            body: Return {
                                value: Int {
                                    value: 1,
                                },
                            },
                        },
                    },
                },
            },
            c_type: Default,
            var_bound: 7,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
]

CLIR
========
[interruptAndRecover__specialized]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname9
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 apple_aarch64
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64) -> i64 tail
    sig5 = (i64, i64, i64) -> i64 tail
    sig6 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig7 = (i64, i64, i64) apple_aarch64
    sig8 = (i64, i64, i64) apple_aarch64
    sig9 = (i64, i64) -> i64 tail
    sig10 = (i64, i64, i64, i64) -> i64 tail
    sig11 = (i64, i64) -> i64 tail
    sig12 = (i64) -> i64 apple_aarch64
    sig13 = (i64, i64) -> i64 apple_aarch64
    fn0 = colocated u0:14 sig0
    fn1 = u0:0 sig1
    fn2 = colocated u0:23 sig2
    fn3 = colocated u0:25 sig3
    fn4 = colocated u0:27 sig4
    fn5 = colocated u0:20 sig5
    fn6 = u0:6 sig6
    fn7 = u0:7 sig7
    fn8 = u0:8 sig8
    fn9 = colocated u0:29 sig9
    fn10 = u0:13 sig10
    fn11 = colocated u0:31 sig11
    fn12 = u0:0 sig12
    fn13 = u0:1 sig13

block0(v0: i64, v1: i64):
    v2 = call fn0()
    v3 = iconst.i64 0
    v4 = call fn1(v3)  ; v3 = 0
    v5 = iadd_imm v4, 1
    v6 = func_addr.i64 fn2
    v7 = iadd_imm v6, 3
    v8 = func_addr.i64 fn3
    v9 = iadd_imm v8, 3
    v10 = func_addr.i64 fn4
    v11 = iadd_imm v10, 3
    v12 = func_addr.i64 fn5
    stack_store v0, ss0
    v13 = stack_addr.i64 ss0
    v14 = call fn6(v13, v2, v5, v7, v9, v11, v12)
    v15 = stack_load.i64 ss0
    v16 = symbol_value.i64 gv0
    v17 = iadd_imm v16, 8
    v18 = iadd_imm v17, 3
    v19 = func_addr.i64 fn9
    v20 = iadd_imm v19, 3
    call fn8(v14, v18, v20)
    v21 = load.i64 v14
    v22 = func_addr.i64 fn11
    v23 = iconst.i64 1
    v24 = iadd_imm v22, 3
    v25 = ishl_imm v1, 1
    v26 = iconst.i64 3
    v27 = call fn12(v26)  ; v26 = 3
    store aligned v24, v27
    store aligned v23, v27+8  ; v23 = 1
    store aligned v25, v27+16
    v28 = iadd_imm v27, 1
    stack_store v15, ss0
    v29 = stack_addr.i64 ss0
    v30 = call fn13(v28, v29)
    v31 = stack_load.i64 ss0
    v32 = isub v15, v31
    v33 = load.i64 v21+8
    v34 = ishl_imm v33, 3
    v35 = iadd v34, v32
    v36 = ushr_imm v35, 3
    store v36, v21+8
    v37 = call fn10(v31, v21, v30, v14)
    v38 = load.i64 v37
    v39 = iadd_imm v37, 8
    v40 = sshr_imm v38, 1
    return v40
}


[interruptAndRecover$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 0
    v4 = call fn0(v3)  ; v3 = 0
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[interruptAndRecover$__lambda_1__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 2
    v4 = call fn0(v3)  ; v3 = 2
    store aligned v2, v4
    store aligned v2, v4+8
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[interruptAndRecover$__lambda_2__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iadd_imm v0, 8
    store v3, v4
    v5 = load.i64 v1+8
    v6 = ishl_imm v5, 3
    v7 = iadd v0, v6
    v8 = load.i64 v1
    return_call_indirect sig0, v8(v7, v1, v4)
}


[interruptAndRecover$__lambda_3__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 apple_aarch64
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64) -> i64 tail
    fn0 = colocated u0:14 sig0
    fn1 = u0:1 sig1

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = load.i64 v0+16
    v5 = iconst.i64 1
    v6 = ishl_imm v5, 1  ; v5 = 1
    v7 = iadd_imm v0, -8
    store aligned v2, v7
    v8 = iadd_imm v7, -8
    store aligned v6, v8
    v9 = call fn0()
    stack_store v8, ss0
    v10 = stack_addr.i64 ss0
    v11 = call fn1(v4, v10)
    v12 = stack_load.i64 ss0
    v13 = call_indirect sig2, v11(v12, v9)
    v14 = load.i64 v13
    v15 = iadd_imm v13, 8
    v16 = iadd_imm v0, 16
    store v3, v16
    v17 = load.i64 v1+8
    v18 = ishl_imm v17, 3
    v19 = iadd v0, v18
    v20 = load.i64 v1
    return_call_indirect sig3, v20(v19, v1, v16)
}


[interruptAndRecover$__lambda_4__cps_impl]
function u0:0(i64, i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname4
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 tail
    sig4 = () -> i64 apple_aarch64
    sig5 = (i64, i64) -> i64 tail
    sig6 = (i64, i64) -> i64 tail
    sig7 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig8 = (i64, i64) -> i64 tail
    sig9 = (i64, i64, i64) -> i64 tail
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:18 sig1
    fn2 = u0:4 sig2
    fn3 = colocated u0:14 sig4
    fn4 = colocated u0:16 sig5
    fn5 = colocated u0:18 sig6
    fn6 = u0:4 sig7

block0(v0: i64, v1: i64, v2: i64):
    v3 = load.i64 v1+24
    v4 = iadd_imm v1, 32
    v5 = iadd_imm v2, 8
    v6 = load.i64 v2
    v7 = icmp_imm ugt v3, 0xffff_ffff
    brif v7, block1, block3

block3:
    v8 = ireduce.i32 v3
    br_table v8, block1, [block1, block2]

block1:
    v9 = symbol_value.i64 gv0
    v10 = iadd_imm v9, 8
    v11 = iadd_imm v10, 3
    v12 = load.i64 v0
    v13 = iadd_imm.i64 v5, -8
    store aligned v12, v13
    v14 = isub.i64 v0, v13
    v15 = ushr_imm v14, 3
    store v15, v1+8
    v16 = iconst.i64 1
    store v16, v1+24  ; v16 = 1
    v17 = iconst.i64 1
    v18 = func_addr.i64 fn0
    v19 = func_addr.i64 fn1
    v20 = iconst.i64 1
    v21 = call fn2(v11, v13, v1, v17, v18, v19, v20)  ; v17 = 1, v20 = 1
    v22 = load.i64 v21
    v23 = load.i64 v21+8
    v24 = load.i64 v21+16
    return_call_indirect sig3, v22(v23, v24)

block2:
    v25 = symbol_value.i64 gv1
    v26 = iadd_imm v25, 8
    v27 = iadd_imm v26, 3
    v28 = call fn3()
    v29 = iconst.i64 31
    v30 = ishl_imm v29, 1  ; v29 = 31
    v31 = iadd_imm.i64 v5, -8
    store aligned v30, v31
    v32 = iconst.i64 1
    v33 = func_addr.i64 fn4
    v34 = func_addr.i64 fn5
    v35 = iconst.i64 0
    v36 = call fn6(v27, v31, v28, v32, v33, v34, v35)  ; v32 = 1, v35 = 0
    v37 = load.i64 v36
    v38 = load.i64 v36+8
    v39 = load.i64 v36+16
    v40 = call_indirect sig8, v37(v38, v39)
    v41 = load.i64 v40
    v42 = iadd_imm v40, 8
    v43 = iconst.i64 31
    v44 = ishl_imm v43, 1  ; v43 = 31
    v45 = iadd_imm.i64 v0, 0
    store v44, v45
    v46 = load.i64 v1+16
    v47 = load.i64 v46+8
    v48 = ishl_imm v47, 3
    v49 = iadd.i64 v0, v48
    v50 = load.i64 v46
    return_call_indirect sig9, v50(v49, v46, v45)
}


[interruptAndRecover$__lambda_4__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = colocated u0:32 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 48
    v3 = call fn0(v2)  ; v2 = 48
    v4 = func_addr.i64 fn1
    store v4, v3
    store v1, v3+16
    v5 = iadd_imm v0, -8
    return_call fn1(v0, v3, v5)
}


[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname7
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64, i64) -> i64 tail
    sig5 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig6 = (i64, i64, i64) apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64, i64) apple_aarch64
    sig9 = (i64, i64, i64, i64) -> i64 tail
    sig10 = (i64, i64) -> i64 tail
    sig11 = (i64, i64) -> i64 apple_aarch64
    fn0 = colocated u0:14 sig0
    fn1 = colocated u0:34 sig1
    fn2 = colocated u0:36 sig2
    fn3 = colocated u0:38 sig3
    fn4 = colocated u0:20 sig4
    fn5 = u0:6 sig5
    fn6 = u0:7 sig6
    fn7 = colocated u0:40 sig7
    fn8 = u0:8 sig8
    fn9 = u0:13 sig9
    fn10 = colocated u0:42 sig10
    fn11 = u0:1 sig11

block0(v0: i64):
    v1 = call fn0()
    v2 = iconst.i64 1
    v3 = ishl_imm v2, 1  ; v2 = 1
    v4 = func_addr.i64 fn1
    v5 = iadd_imm v4, 3
    v6 = func_addr.i64 fn2
    v7 = iadd_imm v6, 3
    v8 = func_addr.i64 fn3
    v9 = iadd_imm v8, 3
    v10 = func_addr.i64 fn4
    stack_store v0, ss0
    v11 = stack_addr.i64 ss0
    v12 = call fn5(v11, v1, v3, v5, v7, v9, v10)
    v13 = stack_load.i64 ss0
    v14 = symbol_value.i64 gv0
    v15 = iadd_imm v14, 8
    v16 = iadd_imm v15, 3
    v17 = func_addr.i64 fn7
    v18 = iadd_imm v17, 3
    call fn6(v12, v16, v18)
    v19 = load.i64 v12
    v20 = func_addr.i64 fn10
    v21 = iadd_imm v20, 3
    stack_store v13, ss0
    v22 = stack_addr.i64 ss0
    v23 = call fn11(v21, v22)
    v24 = stack_load.i64 ss0
    v25 = isub v13, v24
    v26 = load.i64 v19+8
    v27 = ishl_imm v26, 3
    v28 = iadd v27, v25
    v29 = ushr_imm v28, 3
    store v29, v19+8
    v30 = call fn9(v24, v19, v23, v12)
    v31 = load.i64 v30
    v32 = iadd_imm v30, 8
    v33 = sshr_imm v31, 1
    return v33
}


[main$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 0
    v4 = call fn0(v3)  ; v3 = 0
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_1__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 2
    v4 = call fn0(v3)  ; v3 = 2
    store aligned v2, v4
    store aligned v2, v4+8
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_2__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iconst.i64 100
    v5 = sshr_imm v2, 1
    v6 = imul v5, v4  ; v4 = 100
    v7 = sshr_imm v3, 1
    v8 = iadd v6, v7
    v9 = ishl_imm v8, 1
    v10 = iadd_imm v0, 8
    store v9, v10
    v11 = load.i64 v1+8
    v12 = ishl_imm v11, 3
    v13 = iadd v0, v12
    v14 = load.i64 v1
    return_call_indirect sig0, v14(v13, v1, v10)
}


[main$__lambda_3__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64) -> i64 apple_aarch64
    sig2 = (i64) -> i64 apple_aarch64
    sig3 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = u0:0 sig1
    fn2 = u0:0 sig2

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = sshr_imm v2, 1
    v5 = sshr_imm v3, 1
    v6 = imul v4, v5
    v7 = ishl_imm v6, 1
    v8 = iconst.i64 1
    v9 = ishl_imm v8, 1  ; v8 = 1
    v10 = iconst.i64 0
    v11 = call fn0(v10)  ; v10 = 0
    v12 = iadd_imm v11, 1
    v13 = iconst.i64 2
    v14 = call fn1(v13)  ; v13 = 2
    store aligned v9, v14
    store aligned v12, v14+8
    v15 = iadd_imm v14, 1
    v16 = iconst.i64 2
    v17 = call fn2(v16)  ; v16 = 2
    store aligned v7, v17
    store aligned v15, v17+8
    v18 = iadd_imm v17, 1
    v19 = iadd_imm v0, 8
    store v18, v19
    v20 = load.i64 v1+8
    v21 = ishl_imm v20, 3
    v22 = iadd v0, v21
    v23 = load.i64 v1
    return_call_indirect sig3, v23(v22, v1, v19)
}


[main$__lambda_4__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname0
    gv2 = symbol colocated userextname0
    gv3 = symbol colocated userextname0
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64) -> i64 tail
    sig5 = (i64, i64) -> i64 tail
    sig6 = () -> i64 apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64) -> i64 tail
    sig9 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig10 = (i64, i64) -> i64 tail
    sig11 = (i64, i64) -> i64 tail
    sig12 = () -> i64 apple_aarch64
    sig13 = (i64, i64) -> i64 tail
    sig14 = (i64, i64) -> i64 tail
    sig15 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig16 = (i64, i64) -> i64 tail
    sig17 = (i64, i64) -> i64 tail
    sig18 = () -> i64 apple_aarch64
    sig19 = (i64, i64) -> i64 tail
    sig20 = (i64, i64) -> i64 tail
    sig21 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig22 = (i64, i64) -> i64 tail
    sig23 = (i64, i64, i64) -> i64 tail
    fn0 = colocated u0:14 sig0
    fn1 = colocated u0:16 sig1
    fn2 = colocated u0:18 sig2
    fn3 = u0:4 sig3
    fn4 = colocated u0:22 sig5
    fn5 = colocated u0:14 sig6
    fn6 = colocated u0:16 sig7
    fn7 = colocated u0:18 sig8
    fn8 = u0:4 sig9
    fn9 = colocated u0:22 sig11
    fn10 = colocated u0:14 sig12
    fn11 = colocated u0:16 sig13
    fn12 = colocated u0:18 sig14
    fn13 = u0:4 sig15
    fn14 = colocated u0:22 sig17
    fn15 = colocated u0:14 sig18
    fn16 = colocated u0:16 sig19
    fn17 = colocated u0:18 sig20
    fn18 = u0:4 sig21

block0(v0: i64, v1: i64):
    v2 = symbol_value.i64 gv0
    v3 = iadd_imm v2, 8
    v4 = iadd_imm v3, 3
    v5 = call fn0()
    v6 = iconst.i64 2
    v7 = ishl_imm v6, 1  ; v6 = 2
    v8 = iadd_imm v0, -8
    store aligned v7, v8
    v9 = iconst.i64 1
    v10 = func_addr.i64 fn1
    v11 = func_addr.i64 fn2
    v12 = iconst.i64 0
    v13 = call fn3(v4, v8, v5, v9, v10, v11, v12)  ; v9 = 1, v12 = 0
    v14 = load.i64 v13
    v15 = load.i64 v13+8
    v16 = load.i64 v13+16
    v17 = call_indirect sig4, v14(v15, v16)
    v18 = load.i64 v17
    v19 = iadd_imm v17, 8
    v20 = iconst.i64 3
    v21 = call fn4(v19, v20)  ; v20 = 3
    v22 = symbol_value.i64 gv1
    v23 = iadd_imm v22, 8
    v24 = iadd_imm v23, 3
    v25 = call fn5()
    v26 = ishl_imm v21, 1
    v27 = iadd_imm v19, -8
    store aligned v26, v27
    v28 = iconst.i64 1
    v29 = func_addr.i64 fn6
    v30 = func_addr.i64 fn7
    v31 = iconst.i64 0
    v32 = call fn8(v24, v27, v25, v28, v29, v30, v31)  ; v28 = 1, v31 = 0
    v33 = load.i64 v32
    v34 = load.i64 v32+8
    v35 = load.i64 v32+16
    v36 = call_indirect sig10, v33(v34, v35)
    v37 = load.i64 v36
    v38 = iadd_imm v36, 8
    v39 = iconst.i64 5
    v40 = call fn9(v38, v39)  ; v39 = 5
    v41 = symbol_value.i64 gv2
    v42 = iadd_imm v41, 8
    v43 = iadd_imm v42, 3
    v44 = call fn10()
    v45 = ishl_imm v40, 1
    v46 = iadd_imm v38, -8
    store aligned v45, v46
    v47 = iconst.i64 1
    v48 = func_addr.i64 fn11
    v49 = func_addr.i64 fn12
    v50 = iconst.i64 0
    v51 = call fn13(v43, v46, v44, v47, v48, v49, v50)  ; v47 = 1, v50 = 0
    v52 = load.i64 v51
    v53 = load.i64 v51+8
    v54 = load.i64 v51+16
    v55 = call_indirect sig16, v52(v53, v54)
    v56 = load.i64 v55
    v57 = iadd_imm v55, 8
    v58 = iconst.i64 7
    v59 = call fn14(v57, v58)  ; v58 = 7
    v60 = symbol_value.i64 gv3
    v61 = iadd_imm v60, 8
    v62 = iadd_imm v61, 3
    v63 = call fn15()
    v64 = ishl_imm v59, 1
    v65 = iadd_imm v57, -8
    store aligned v64, v65
    v66 = iconst.i64 1
    v67 = func_addr.i64 fn16
    v68 = func_addr.i64 fn17
    v69 = iconst.i64 0
    v70 = call fn18(v62, v65, v63, v66, v67, v68, v69)  ; v66 = 1, v69 = 0
    v71 = load.i64 v70
    v72 = load.i64 v70+8
    v73 = load.i64 v70+16
    v74 = call_indirect sig22, v71(v72, v73)
    v75 = load.i64 v74
    v76 = iadd_imm v74, 8
    v77 = iconst.i64 1
    v78 = ishl_imm v77, 1  ; v77 = 1
    v79 = iadd_imm v0, -8
    store v78, v79
    v80 = load.i64 v1+8
    v81 = ishl_imm v80, 3
    v82 = iadd v0, v81
    v83 = load.i64 v1
    return_call_indirect sig23, v83(v82, v1, v79)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:33 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}


Result
========
21001