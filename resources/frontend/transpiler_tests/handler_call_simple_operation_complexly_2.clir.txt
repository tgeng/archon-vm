CLIR
========
[call_complex__cps_impl]
function u0:0(i64, i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64) -> i64 tail
    sig5 = (i64, i64) -> i64 tail
    sig6 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64, i64) -> i64 tail
    fn0 = colocated u0:14 sig0
    fn1 = colocated u0:17 sig1
    fn2 = u0:4 sig2
    fn3 = colocated u0:14 sig4
    fn4 = colocated u0:17 sig5
    fn5 = u0:4 sig6

block0(v0: i64, v1: i64, v2: i64):
    v3 = load.i64 v1+24
    v4 = iadd_imm v1, 32
    v5 = iadd_imm v2, 8
    v6 = load.i64 v2
    v7 = icmp_imm ugt v3, 0xffff_ffff
    brif v7, block1, block4

block4:
    v8 = ireduce.i32 v3
    br_table v8, block1, [block1, block2, block3]

block1:
    v9 = load.i64 v0
    v10 = load.i64 v0+8
    v11 = iadd_imm.i64 v5, -8
    store aligned v10, v11
    v12 = isub.i64 v0, v11
    v13 = ushr_imm v12, 3
    store v13, v1+8
    v14 = iconst.i64 1
    store v14, v1+24  ; v14 = 1
    v15 = iconst.i64 1
    v16 = func_addr.i64 fn0
    v17 = func_addr.i64 fn1
    v18 = iconst.i64 0
    v19 = call fn2(v9, v18, v11, v1, v15, v16, v17)  ; v18 = 0, v15 = 1
    v20 = load.i64 v19
    v21 = load.i64 v19+8
    v22 = load.i64 v19+16
    return_call_indirect sig3, v20(v21, v22)

block2:
    v23 = load.i64 v0
    v24 = load.i64 v0+8
    v25 = iadd_imm.i64 v5, -8
    store aligned v24, v25
    v26 = isub.i64 v0, v25
    v27 = ushr_imm v26, 3
    store v27, v1+8
    v28 = iconst.i64 2
    store v28, v1+24  ; v28 = 2
    store.i64 v6, v4
    v29 = iconst.i64 1
    v30 = func_addr.i64 fn3
    v31 = func_addr.i64 fn4
    v32 = iconst.i64 0
    v33 = call fn5(v23, v32, v25, v1, v29, v30, v31)  ; v32 = 0, v29 = 1
    v34 = load.i64 v33
    v35 = load.i64 v33+8
    v36 = load.i64 v33+16
    return_call_indirect sig7, v34(v35, v36)

block3:
    v37 = load.i64 v4
    v38 = sshr_imm v37, 1
    v39 = sshr_imm.i64 v6, 1
    v40 = iadd v38, v39
    v41 = ishl_imm v40, 1
    v42 = iadd_imm.i64 v0, 8
    store v41, v42
    v43 = load.i64 v1+16
    v44 = load.i64 v43+8
    v45 = ishl_imm v44, 3
    v46 = iadd.i64 v0, v45
    v47 = load.i64 v43
    return_call_indirect sig8, v47(v46, v43, v42)
}


[call_complex__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = colocated u0:21 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 48
    v3 = call fn0(v2)  ; v2 = 48
    v4 = func_addr.i64 fn1
    store v4, v3
    store v1, v3+16
    v5 = iadd_imm v0, -8
    return_call fn1(v0, v3, v5)
}


[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 tail
    sig1 = (i64) -> i64 tail
    fn0 = colocated u0:30 sig0
    fn1 = colocated u0:23 sig1

block0(v0: i64):
    v1 = call fn0(v0)
    v2 = load.i64 v1
    v3 = iadd_imm v1, 8
    v4 = call fn1(v3)
    v5 = load.i64 v4
    v6 = iadd_imm v4, 8
    v7 = sshr_imm v2, 1
    v8 = sshr_imm v5, 1
    v9 = iadd v7, v8
    return v9
}


[simple_exp__simple]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64) -> i64 tail
    sig5 = (i64, i64, i64, i64) apple_aarch64
    sig6 = (i64, i64, i64, i64) -> i64 tail
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64) -> i64 apple_aarch64
    fn0 = u0:0 sig0
    fn1 = colocated u0:24 sig1
    fn2 = colocated u0:19 sig2
    fn3 = u0:6 sig3
    fn4 = colocated u0:26 sig4
    fn5 = u0:7 sig5
    fn6 = u0:12 sig6
    fn7 = colocated u0:28 sig7
    fn8 = u0:1 sig8

block0(v0: i64):
    v1 = global_value.i64 gv0
    v2 = iadd_imm v1, 8
    v3 = iconst.i64 0
    v4 = call fn0(v3)  ; v3 = 0
    v5 = iadd_imm v4, 1
    v6 = iconst.i64 3
    v7 = iconst.i64 3
    v8 = func_addr.i64 fn1
    v9 = iadd_imm v8, 3
    v10 = func_addr.i64 fn2
    stack_store v0, ss0
    v11 = stack_addr.i64 ss0
    v12 = call fn3(v11, v2, v5, v6, v7, v9, v10)  ; v6 = 3, v7 = 3
    v13 = stack_load.i64 ss0
    v14 = load.i64 v12
    v15 = func_addr.i64 fn4
    v16 = iadd_imm v15, 3
    v17 = iconst.i64 2
    v18 = iconst.i64 0
    call fn5(v14, v16, v17, v18)  ; v17 = 2, v18 = 0
    v19 = load.i64 v14
    v20 = iadd_imm v12, 1
    v21 = iadd_imm v13, -8
    store aligned v20, v21
    v22 = func_addr.i64 fn7
    v23 = iadd_imm v22, 3
    stack_store v21, ss0
    v24 = stack_addr.i64 ss0
    v25 = call fn8(v23, v24)
    v26 = stack_load.i64 ss0
    v27 = isub v13, v26
    v28 = load.i64 v19+8
    v29 = ishl_imm v28, 3
    v30 = iadd v29, v27
    v31 = ushr_imm v30, 3
    store v31, v19+8
    return_call fn6(v26, v19, v25, v14)
}


[simple_exp$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iadd_imm v0, 8
    store v3, v4
    v5 = load.i64 v1+8
    v6 = ishl_imm v5, 3
    v7 = iadd v0, v6
    v8 = load.i64 v1
    return_call_indirect sig0, v8(v7, v1, v4)
}


[simple_exp$__lambda_1__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64) -> i64 apple_aarch64
    sig2 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = u0:0 sig1

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iconst.i64 0
    v5 = ishl_imm v4, 1  ; v4 = 0
    v6 = iconst.i64 2
    v7 = call fn0(v6)  ; v6 = 2
    store aligned v5, v7
    store aligned v3, v7+8
    v8 = iadd_imm v7, 1
    v9 = iconst.i64 2
    v10 = call fn1(v9)  ; v9 = 2
    store aligned v2, v10
    store aligned v8, v10+8
    v11 = iadd_imm v10, 1
    v12 = iadd_imm v0, 8
    store v11, v12
    v13 = load.i64 v1+8
    v14 = ishl_imm v13, 3
    v15 = iadd v0, v14
    v16 = load.i64 v1
    return_call_indirect sig2, v16(v15, v1, v12)
}


[simple_exp$__lambda_2__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64, i64) -> i64 apple_aarch64
    fn0 = colocated u0:20 sig0
    fn1 = %Memmove sig1

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 3
    v4 = ishl_imm v3, 1  ; v3 = 3
    v5 = iadd_imm v0, -8
    store aligned v4, v5
    v6 = iadd_imm v5, -8
    store aligned v2, v6
    v7 = iadd_imm v6, 8
    v8 = isub v0, v6
    v9 = call fn1(v7, v6, v8)
    v10 = isub v0, v7
    v11 = load.i64 v1+8
    v12 = ishl_imm v11, 3
    v13 = iadd v12, v10
    v14 = ushr_imm v13, 3
    store v14, v1+8
    return_call fn0(v7, v1)
}


[simple_linear__simple]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64) -> i64 tail
    sig5 = (i64, i64, i64, i64) apple_aarch64
    sig6 = (i64, i64, i64, i64) -> i64 tail
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64) -> i64 apple_aarch64
    fn0 = u0:0 sig0
    fn1 = colocated u0:24 sig1
    fn2 = colocated u0:19 sig2
    fn3 = u0:6 sig3
    fn4 = colocated u0:31 sig4
    fn5 = u0:7 sig5
    fn6 = u0:12 sig6
    fn7 = colocated u0:33 sig7
    fn8 = u0:1 sig8

block0(v0: i64):
    v1 = global_value.i64 gv0
    v2 = iadd_imm v1, 8
    v3 = iconst.i64 0
    v4 = call fn0(v3)  ; v3 = 0
    v5 = iadd_imm v4, 1
    v6 = iconst.i64 3
    v7 = iconst.i64 3
    v8 = func_addr.i64 fn1
    v9 = iadd_imm v8, 3
    v10 = func_addr.i64 fn2
    stack_store v0, ss0
    v11 = stack_addr.i64 ss0
    v12 = call fn3(v11, v2, v5, v6, v7, v9, v10)  ; v6 = 3, v7 = 3
    v13 = stack_load.i64 ss0
    v14 = load.i64 v12
    v15 = func_addr.i64 fn4
    v16 = iadd_imm v15, 3
    v17 = iconst.i64 2
    v18 = iconst.i64 0
    call fn5(v14, v16, v17, v18)  ; v17 = 2, v18 = 0
    v19 = load.i64 v14
    v20 = iadd_imm v12, 1
    v21 = iadd_imm v13, -8
    store aligned v20, v21
    v22 = func_addr.i64 fn7
    v23 = iadd_imm v22, 3
    stack_store v21, ss0
    v24 = stack_addr.i64 ss0
    v25 = call fn8(v23, v24)
    v26 = stack_load.i64 ss0
    v27 = isub v13, v26
    v28 = load.i64 v19+8
    v29 = ishl_imm v28, 3
    v30 = iadd v29, v27
    v31 = ushr_imm v30, 3
    store v31, v19+8
    return_call fn6(v26, v19, v25, v14)
}


[simple_linear$__lambda_1__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64) -> i64 apple_aarch64
    sig2 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = u0:0 sig1

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iconst.i64 1
    v5 = ishl_imm v4, 1  ; v4 = 1
    v6 = iconst.i64 2
    v7 = call fn0(v6)  ; v6 = 2
    store aligned v5, v7
    store aligned v3, v7+8
    v8 = iadd_imm v7, 1
    v9 = iconst.i64 2
    v10 = call fn1(v9)  ; v9 = 2
    store aligned v2, v10
    store aligned v8, v10+8
    v11 = iadd_imm v10, 1
    v12 = iadd_imm v0, 8
    store v11, v12
    v13 = load.i64 v1+8
    v14 = ishl_imm v13, 3
    v15 = iadd v0, v14
    v16 = load.i64 v1
    return_call_indirect sig2, v16(v15, v1, v12)
}


[simple_linear$__lambda_2__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64, i64) -> i64 apple_aarch64
    fn0 = colocated u0:20 sig0
    fn1 = %Memmove sig1

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 2
    v4 = ishl_imm v3, 1  ; v3 = 2
    v5 = iadd_imm v0, -8
    store aligned v4, v5
    v6 = iadd_imm v5, -8
    store aligned v2, v6
    v7 = iadd_imm v6, 8
    v8 = isub v0, v6
    v9 = call fn1(v7, v6, v8)
    v10 = isub v0, v7
    v11 = load.i64 v1+8
    v12 = ishl_imm v11, 3
    v13 = iadd v12, v10
    v14 = ushr_imm v13, 3
    store v14, v1+8
    return_call fn0(v7, v1)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:22 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}
