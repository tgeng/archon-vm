FTerm
========
Handler {
    parameter: Int {
        value: 0,
    },
    parameter_disposer: Lambda {
        arg_names: [
            (
                "_",
                Uniform,
            ),
        ],
        body: Struct {
            values: [],
        },
        effect: Basic,
    },
    parameter_replicator: Lambda {
        arg_names: [
            (
                "p",
                Uniform,
            ),
        ],
        body: Struct {
            values: [
                Identifier {
                    name: "p",
                    effect: Basic,
                },
                Identifier {
                    name: "p",
                    effect: Basic,
                },
            ],
        },
        effect: Basic,
    },
    transform: Lambda {
        arg_names: [
            (
                "p",
                Uniform,
            ),
            (
                "r",
                Uniform,
            ),
        ],
        body: Identifier {
            name: "r",
            effect: Basic,
        },
        effect: Basic,
    },
    simple_handlers: [
        (
            Str {
                value: "get",
            },
            Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                ],
                body: Struct {
                    values: [
                        Identifier {
                            name: "p",
                            effect: Basic,
                        },
                        Struct {
                            values: [
                                Int {
                                    value: 0,
                                },
                                Identifier {
                                    name: "p",
                                    effect: Basic,
                                },
                            ],
                        },
                    ],
                },
                effect: Basic,
            },
        ),
        (
            Str {
                value: "set",
            },
            Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                    (
                        "v",
                        Uniform,
                    ),
                ],
                body: Struct {
                    values: [
                        Identifier {
                            name: "v",
                            effect: Basic,
                        },
                        Struct {
                            values: [
                                Int {
                                    value: 0,
                                },
                                Struct {
                                    values: [],
                                },
                            ],
                        },
                    ],
                },
                effect: Basic,
            },
        ),
    ],
    complex_handlers: [],
    input: Thunk {
        computation: Handler {
            parameter: Int {
                value: 1,
            },
            parameter_disposer: Lambda {
                arg_names: [
                    (
                        "_",
                        Uniform,
                    ),
                ],
                body: Struct {
                    values: [],
                },
                effect: Basic,
            },
            parameter_replicator: Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                ],
                body: Struct {
                    values: [
                        Identifier {
                            name: "p",
                            effect: Basic,
                        },
                        Identifier {
                            name: "p",
                            effect: Basic,
                        },
                    ],
                },
                effect: Basic,
            },
            transform: Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                    (
                        "r",
                        Uniform,
                    ),
                ],
                body: Identifier {
                    name: "r",
                    effect: Basic,
                },
                effect: Basic,
            },
            simple_handlers: [
                (
                    Str {
                        value: "inc",
                    },
                    Lambda {
                        arg_names: [
                            (
                                "p",
                                Uniform,
                            ),
                        ],
                        body: Struct {
                            values: [
                                Identifier {
                                    name: "p",
                                    effect: Basic,
                                },
                                Struct {
                                    values: [
                                        Int {
                                            value: 0,
                                        },
                                        OperationCall {
                                            eff: Str {
                                                value: "set",
                                            },
                                            args: [
                                                Redex {
                                                    function: Identifier {
                                                        name: "_int_add",
                                                        effect: Basic,
                                                    },
                                                    args: [
                                                        OperationCall {
                                                            eff: Str {
                                                                value: "get",
                                                            },
                                                            args: [],
                                                            effect: Simple,
                                                        },
                                                        Int {
                                                            value: 1,
                                                        },
                                                    ],
                                                },
                                            ],
                                            effect: Simple,
                                        },
                                    ],
                                },
                            ],
                        },
                        effect: Basic,
                    },
                ),
                (
                    Str {
                        value: "dup",
                    },
                    Lambda {
                        arg_names: [
                            (
                                "p",
                                Uniform,
                            ),
                        ],
                        body: Struct {
                            values: [
                                Identifier {
                                    name: "p",
                                    effect: Basic,
                                },
                                Struct {
                                    values: [
                                        Int {
                                            value: 0,
                                        },
                                        OperationCall {
                                            eff: Str {
                                                value: "set",
                                            },
                                            args: [
                                                Redex {
                                                    function: Identifier {
                                                        name: "_int_mul",
                                                        effect: Basic,
                                                    },
                                                    args: [
                                                        OperationCall {
                                                            eff: Str {
                                                                value: "get",
                                                            },
                                                            args: [],
                                                            effect: Simple,
                                                        },
                                                        Int {
                                                            value: 2,
                                                        },
                                                    ],
                                                },
                                            ],
                                            effect: Simple,
                                        },
                                    ],
                                },
                            ],
                        },
                        effect: Basic,
                    },
                ),
            ],
            complex_handlers: [],
            input: Thunk {
                computation: Let {
                    name: "_",
                    t: OperationCall {
                        eff: Str {
                            value: "set",
                        },
                        args: [
                            Int {
                                value: 1,
                            },
                        ],
                        effect: Simple,
                    },
                    body: Let {
                        name: "_",
                        t: OperationCall {
                            eff: Str {
                                value: "inc",
                            },
                            args: [],
                            effect: Simple,
                        },
                        body: Let {
                            name: "_",
                            t: OperationCall {
                                eff: Str {
                                    value: "inc",
                                },
                                args: [],
                                effect: Simple,
                            },
                            body: Let {
                                name: "_",
                                t: OperationCall {
                                    eff: Str {
                                        value: "dup",
                                    },
                                    args: [],
                                    effect: Simple,
                                },
                                body: OperationCall {
                                    eff: Str {
                                        value: "get",
                                    },
                                    args: [],
                                    effect: Simple,
                                },
                            },
                        },
                    },
                },
                effect: Basic,
            },
        },
        effect: Basic,
    },
}

Defs
========
[
    (
        "main",
        FunctionDefinition {
            args: [],
            body: Handler {
                parameter: Int {
                    value: 0,
                },
                parameter_disposer: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_0",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
                parameter_replicator: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_1",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
                transform: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_2",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
                complex_handlers: [],
                simple_handlers: [
                    (
                        Str {
                            value: "get",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_3",
                                    effect: Basic,
                                },
                                args: [],
                            },
                            effect: Basic,
                        },
                    ),
                    (
                        Str {
                            value: "set",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_4",
                                    effect: Basic,
                                },
                                args: [],
                            },
                            effect: Basic,
                        },
                    ),
                ],
                input: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_11",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 0,
            may_be_simple: false,
            may_be_complex: false,
            may_be_specialized: true,
        },
    ),
    (
        "main$__lambda_0",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [],
                },
            },
            c_type: Default,
            var_bound: 1,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_1",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 0,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 1,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_10",
        FunctionDefinition {
            args: [],
            body: Let {
                t: OperationCall {
                    eff: Str {
                        value: "set",
                    },
                    args: [
                        Int {
                            value: 1,
                        },
                    ],
                    effect: Simple,
                },
                bound_index: 0,
                body: Let {
                    t: OperationCall {
                        eff: Str {
                            value: "inc",
                        },
                        args: [],
                        effect: Simple,
                    },
                    bound_index: 1,
                    body: Let {
                        t: OperationCall {
                            eff: Str {
                                value: "inc",
                            },
                            args: [],
                            effect: Simple,
                        },
                        bound_index: 2,
                        body: Let {
                            t: OperationCall {
                                eff: Str {
                                    value: "dup",
                                },
                                args: [],
                                effect: Simple,
                            },
                            bound_index: 3,
                            body: OperationCall {
                                eff: Str {
                                    value: "get",
                                },
                                args: [],
                                effect: Simple,
                            },
                        },
                    },
                },
            },
            c_type: Default,
            var_bound: 4,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_11",
        FunctionDefinition {
            args: [],
            body: Handler {
                parameter: Int {
                    value: 1,
                },
                parameter_disposer: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_5",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
                parameter_replicator: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_6",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
                transform: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_7",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
                complex_handlers: [],
                simple_handlers: [
                    (
                        Str {
                            value: "inc",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_8",
                                    effect: Basic,
                                },
                                args: [],
                            },
                            effect: Basic,
                        },
                    ),
                    (
                        Str {
                            value: "dup",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_9",
                                    effect: Basic,
                                },
                                args: [],
                            },
                            effect: Basic,
                        },
                    ),
                ],
                input: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_10",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
            },
            c_type: Default,
            var_bound: 0,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_2",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Return {
                value: Var {
                    index: 1,
                },
            },
            c_type: Default,
            var_bound: 2,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_3",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [
                        Var {
                            index: 0,
                        },
                        Struct {
                            values: [
                                Int {
                                    value: 0,
                                },
                                Var {
                                    index: 0,
                                },
                            ],
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 1,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_4",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [
                        Var {
                            index: 1,
                        },
                        Struct {
                            values: [
                                Int {
                                    value: 0,
                                },
                                Struct {
                                    values: [],
                                },
                            ],
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 2,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_5",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [],
                },
            },
            c_type: Default,
            var_bound: 1,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_6",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 0,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 1,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_7",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Return {
                value: Var {
                    index: 1,
                },
            },
            c_type: Default,
            var_bound: 2,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_8",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Let {
                t: Let {
                    t: Let {
                        t: Let {
                            t: OperationCall {
                                eff: Str {
                                    value: "get",
                                },
                                args: [],
                                effect: Simple,
                            },
                            bound_index: 1,
                            body: PrimitiveCall {
                                name: "_int_add",
                                args: [
                                    Var {
                                        index: 1,
                                    },
                                    Int {
                                        value: 1,
                                    },
                                ],
                            },
                        },
                        bound_index: 2,
                        body: OperationCall {
                            eff: Str {
                                value: "set",
                            },
                            args: [
                                Var {
                                    index: 2,
                                },
                            ],
                            effect: Simple,
                        },
                    },
                    bound_index: 3,
                    body: Return {
                        value: Struct {
                            values: [
                                Int {
                                    value: 0,
                                },
                                Var {
                                    index: 3,
                                },
                            ],
                        },
                    },
                },
                bound_index: 4,
                body: Return {
                    value: Struct {
                        values: [
                            Var {
                                index: 0,
                            },
                            Var {
                                index: 4,
                            },
                        ],
                    },
                },
            },
            c_type: Default,
            var_bound: 5,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_9",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Let {
                t: Let {
                    t: Let {
                        t: Let {
                            t: OperationCall {
                                eff: Str {
                                    value: "get",
                                },
                                args: [],
                                effect: Simple,
                            },
                            bound_index: 1,
                            body: PrimitiveCall {
                                name: "_int_mul",
                                args: [
                                    Var {
                                        index: 1,
                                    },
                                    Int {
                                        value: 2,
                                    },
                                ],
                            },
                        },
                        bound_index: 2,
                        body: OperationCall {
                            eff: Str {
                                value: "set",
                            },
                            args: [
                                Var {
                                    index: 2,
                                },
                            ],
                            effect: Simple,
                        },
                    },
                    bound_index: 3,
                    body: Return {
                        value: Struct {
                            values: [
                                Int {
                                    value: 0,
                                },
                                Var {
                                    index: 3,
                                },
                            ],
                        },
                    },
                },
                bound_index: 4,
                body: Return {
                    value: Struct {
                        values: [
                            Var {
                                index: 0,
                            },
                            Var {
                                index: 4,
                            },
                        ],
                    },
                },
            },
            c_type: Default,
            var_bound: 5,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
]

CLIR
========
[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname7
    gv1 = symbol colocated userextname9
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64, i64) -> i64 tail
    sig5 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig6 = (i64, i64, i64) apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64) -> i64 tail
    sig9 = (i64, i64, i64) apple_aarch64
    sig10 = (i64, i64, i64, i64) -> i64 tail
    sig11 = (i64, i64) -> i64 tail
    sig12 = (i64, i64) -> i64 apple_aarch64
    fn0 = colocated u0:13 sig0
    fn1 = colocated u0:20 sig1
    fn2 = colocated u0:22 sig2
    fn3 = colocated u0:28 sig3
    fn4 = colocated u0:18 sig4
    fn5 = u0:6 sig5
    fn6 = u0:7 sig6
    fn7 = colocated u0:30 sig7
    fn8 = colocated u0:32 sig8
    fn9 = u0:8 sig9
    fn10 = u0:12 sig10
    fn11 = colocated u0:26 sig11
    fn12 = u0:1 sig12

block0(v0: i64):
    v1 = call fn0()
    v2 = iconst.i64 0
    v3 = ishl_imm v2, 1  ; v2 = 0
    v4 = func_addr.i64 fn1
    v5 = iadd_imm v4, 3
    v6 = func_addr.i64 fn2
    v7 = iadd_imm v6, 3
    v8 = func_addr.i64 fn3
    v9 = iadd_imm v8, 3
    v10 = func_addr.i64 fn4
    stack_store v0, ss0
    v11 = stack_addr.i64 ss0
    v12 = call fn5(v11, v1, v3, v5, v7, v9, v10)
    v13 = stack_load.i64 ss0
    v14 = symbol_value.i64 gv0
    v15 = iadd_imm v14, 8
    v16 = iadd_imm v15, 3
    v17 = func_addr.i64 fn7
    v18 = iadd_imm v17, 3
    call fn6(v12, v16, v18)
    v19 = symbol_value.i64 gv1
    v20 = iadd_imm v19, 8
    v21 = iadd_imm v20, 3
    v22 = func_addr.i64 fn8
    v23 = iadd_imm v22, 3
    call fn6(v12, v21, v23)
    v24 = load.i64 v12
    v25 = func_addr.i64 fn11
    v26 = iadd_imm v25, 3
    stack_store v13, ss0
    v27 = stack_addr.i64 ss0
    v28 = call fn12(v26, v27)
    v29 = stack_load.i64 ss0
    v30 = call fn10(v29, v24, v28, v12)
    v31 = load.i64 v30
    v32 = iadd_imm v30, 8
    v33 = sshr_imm v31, 1
    return v33
}


[main$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 0
    v4 = call fn0(v3)  ; v3 = 0
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_1__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 2
    v4 = call fn0(v3)  ; v3 = 2
    store aligned v2, v4
    store aligned v2, v4+8
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_10__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname5
    gv2 = symbol colocated userextname5
    gv3 = symbol colocated userextname6
    gv4 = symbol colocated userextname7
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64) -> i64 tail
    sig5 = () -> i64 apple_aarch64
    sig6 = (i64, i64) -> i64 tail
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig9 = (i64, i64) -> i64 tail
    sig10 = () -> i64 apple_aarch64
    sig11 = (i64, i64) -> i64 tail
    sig12 = (i64, i64) -> i64 tail
    sig13 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig14 = (i64, i64) -> i64 tail
    sig15 = () -> i64 apple_aarch64
    sig16 = (i64, i64) -> i64 tail
    sig17 = (i64, i64) -> i64 tail
    sig18 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig19 = (i64, i64) -> i64 tail
    sig20 = (i64, i64) -> i64 tail
    sig21 = (i64, i64) -> i64 tail
    sig22 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig23 = (i64, i64) -> i64 tail
    fn0 = colocated u0:13 sig0
    fn1 = colocated u0:15 sig1
    fn2 = colocated u0:17 sig2
    fn3 = u0:4 sig3
    fn4 = colocated u0:13 sig5
    fn5 = colocated u0:15 sig6
    fn6 = colocated u0:17 sig7
    fn7 = u0:4 sig8
    fn8 = colocated u0:13 sig10
    fn9 = colocated u0:15 sig11
    fn10 = colocated u0:17 sig12
    fn11 = u0:4 sig13
    fn12 = colocated u0:13 sig15
    fn13 = colocated u0:15 sig16
    fn14 = colocated u0:17 sig17
    fn15 = u0:4 sig18
    fn16 = colocated u0:15 sig20
    fn17 = colocated u0:17 sig21
    fn18 = u0:4 sig22

block0(v0: i64, v1: i64):
    v2 = symbol_value.i64 gv0
    v3 = iadd_imm v2, 8
    v4 = iadd_imm v3, 3
    v5 = call fn0()
    v6 = iconst.i64 1
    v7 = ishl_imm v6, 1  ; v6 = 1
    v8 = iadd_imm v0, -8
    store aligned v7, v8
    v9 = iconst.i64 1
    v10 = func_addr.i64 fn1
    v11 = func_addr.i64 fn2
    v12 = iconst.i64 0
    v13 = call fn3(v4, v8, v5, v9, v10, v11, v12)  ; v9 = 1, v12 = 0
    v14 = load.i64 v13
    v15 = load.i64 v13+8
    v16 = load.i64 v13+16
    v17 = call_indirect sig4, v14(v15, v16)
    v18 = load.i64 v17
    v19 = iadd_imm v17, 8
    v20 = symbol_value.i64 gv1
    v21 = iadd_imm v20, 8
    v22 = iadd_imm v21, 3
    v23 = call fn4()
    v24 = iconst.i64 0
    v25 = func_addr.i64 fn5
    v26 = func_addr.i64 fn6
    v27 = iconst.i64 0
    v28 = call fn7(v22, v19, v23, v24, v25, v26, v27)  ; v24 = 0, v27 = 0
    v29 = load.i64 v28
    v30 = load.i64 v28+8
    v31 = load.i64 v28+16
    v32 = call_indirect sig9, v29(v30, v31)
    v33 = load.i64 v32
    v34 = iadd_imm v32, 8
    v35 = symbol_value.i64 gv2
    v36 = iadd_imm v35, 8
    v37 = iadd_imm v36, 3
    v38 = call fn8()
    v39 = iconst.i64 0
    v40 = func_addr.i64 fn9
    v41 = func_addr.i64 fn10
    v42 = iconst.i64 0
    v43 = call fn11(v37, v34, v38, v39, v40, v41, v42)  ; v39 = 0, v42 = 0
    v44 = load.i64 v43
    v45 = load.i64 v43+8
    v46 = load.i64 v43+16
    v47 = call_indirect sig14, v44(v45, v46)
    v48 = load.i64 v47
    v49 = iadd_imm v47, 8
    v50 = symbol_value.i64 gv3
    v51 = iadd_imm v50, 8
    v52 = iadd_imm v51, 3
    v53 = call fn12()
    v54 = iconst.i64 0
    v55 = func_addr.i64 fn13
    v56 = func_addr.i64 fn14
    v57 = iconst.i64 0
    v58 = call fn15(v52, v49, v53, v54, v55, v56, v57)  ; v54 = 0, v57 = 0
    v59 = load.i64 v58
    v60 = load.i64 v58+8
    v61 = load.i64 v58+16
    v62 = call_indirect sig19, v59(v60, v61)
    v63 = load.i64 v62
    v64 = iadd_imm v62, 8
    v65 = symbol_value.i64 gv4
    v66 = iadd_imm v65, 8
    v67 = iadd_imm v66, 3
    v68 = load.i64 v1+8
    v69 = ishl_imm v68, 3
    v70 = iadd v0, v69
    v71 = isub v70, v64
    v72 = ushr_imm v71, 3
    store v72, v1+8
    v73 = iconst.i64 0
    v74 = func_addr.i64 fn16
    v75 = func_addr.i64 fn17
    v76 = iconst.i64 1
    v77 = call fn18(v67, v64, v1, v73, v74, v75, v76)  ; v73 = 0, v76 = 1
    v78 = load.i64 v77
    v79 = load.i64 v77+8
    v80 = load.i64 v77+16
    return_call_indirect sig23, v78(v79, v80)
}


[main$__lambda_11__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname6
    gv1 = symbol colocated userextname8
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64) -> i64 tail
    sig4 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig5 = (i64, i64, i64) apple_aarch64
    sig6 = (i64, i64) -> i64 tail
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64, i64) apple_aarch64
    sig9 = (i64, i64, i64, i64) -> i64 tail
    sig10 = (i64, i64) -> i64 tail
    sig11 = (i64, i64) -> i64 apple_aarch64
    fn0 = colocated u0:34 sig0
    fn1 = colocated u0:36 sig1
    fn2 = colocated u0:38 sig2
    fn3 = colocated u0:18 sig3
    fn4 = u0:6 sig4
    fn5 = u0:7 sig5
    fn6 = colocated u0:40 sig6
    fn7 = colocated u0:42 sig7
    fn8 = u0:8 sig8
    fn9 = u0:12 sig9
    fn10 = colocated u0:24 sig10
    fn11 = u0:1 sig11

block0(v0: i64, v1: i64):
    v2 = load.i64 v1+8
    v3 = ishl_imm v2, 3
    v4 = iadd v0, v3
    v5 = isub v4, v0
    v6 = ushr_imm v5, 3
    store v6, v1+8
    v7 = iconst.i64 1
    v8 = ishl_imm v7, 1  ; v7 = 1
    v9 = func_addr.i64 fn0
    v10 = iadd_imm v9, 3
    v11 = func_addr.i64 fn1
    v12 = iadd_imm v11, 3
    v13 = func_addr.i64 fn2
    v14 = iadd_imm v13, 3
    v15 = func_addr.i64 fn3
    stack_store v0, ss0
    v16 = stack_addr.i64 ss0
    v17 = call fn4(v16, v1, v8, v10, v12, v14, v15)
    v18 = stack_load.i64 ss0
    v19 = symbol_value.i64 gv0
    v20 = iadd_imm v19, 8
    v21 = iadd_imm v20, 3
    v22 = func_addr.i64 fn6
    v23 = iadd_imm v22, 3
    call fn5(v17, v21, v23)
    v24 = symbol_value.i64 gv1
    v25 = iadd_imm v24, 8
    v26 = iadd_imm v25, 3
    v27 = func_addr.i64 fn7
    v28 = iadd_imm v27, 3
    call fn5(v17, v26, v28)
    v29 = load.i64 v17
    v30 = func_addr.i64 fn10
    v31 = iadd_imm v30, 3
    stack_store v18, ss0
    v32 = stack_addr.i64 ss0
    v33 = call fn11(v31, v32)
    v34 = stack_load.i64 ss0
    return_call fn9(v34, v29, v33, v17)
}


[main$__lambda_2__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iadd_imm v0, 8
    store v3, v4
    v5 = load.i64 v1+8
    v6 = ishl_imm v5, 3
    v7 = iadd v0, v6
    v8 = load.i64 v1
    return_call_indirect sig0, v8(v7, v1, v4)
}


[main$__lambda_3__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64) -> i64 apple_aarch64
    sig2 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = u0:0 sig1

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 0
    v4 = ishl_imm v3, 1  ; v3 = 0
    v5 = iconst.i64 2
    v6 = call fn0(v5)  ; v5 = 2
    store aligned v4, v6
    store aligned v2, v6+8
    v7 = iadd_imm v6, 1
    v8 = iconst.i64 2
    v9 = call fn1(v8)  ; v8 = 2
    store aligned v2, v9
    store aligned v7, v9+8
    v10 = iadd_imm v9, 1
    v11 = iadd_imm v0, 0
    store v10, v11
    v12 = load.i64 v1+8
    v13 = ishl_imm v12, 3
    v14 = iadd v0, v13
    v15 = load.i64 v1
    return_call_indirect sig2, v15(v14, v1, v11)
}


[main$__lambda_4__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64) -> i64 apple_aarch64
    sig2 = (i64) -> i64 apple_aarch64
    sig3 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = u0:0 sig1
    fn2 = u0:0 sig2

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iconst.i64 0
    v5 = ishl_imm v4, 1  ; v4 = 0
    v6 = iconst.i64 0
    v7 = call fn0(v6)  ; v6 = 0
    v8 = iadd_imm v7, 1
    v9 = iconst.i64 2
    v10 = call fn1(v9)  ; v9 = 2
    store aligned v5, v10
    store aligned v8, v10+8
    v11 = iadd_imm v10, 1
    v12 = iconst.i64 2
    v13 = call fn2(v12)  ; v12 = 2
    store aligned v3, v13
    store aligned v11, v13+8
    v14 = iadd_imm v13, 1
    v15 = iadd_imm v0, 8
    store v14, v15
    v16 = load.i64 v1+8
    v17 = ishl_imm v16, 3
    v18 = iadd v0, v17
    v19 = load.i64 v1
    return_call_indirect sig3, v19(v18, v1, v15)
}


[main$__lambda_5__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 0
    v4 = call fn0(v3)  ; v3 = 0
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_6__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 2
    v4 = call fn0(v3)  ; v3 = 2
    store aligned v2, v4
    store aligned v2, v4+8
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_7__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iadd_imm v0, 8
    store v3, v4
    v5 = load.i64 v1+8
    v6 = ishl_imm v5, 3
    v7 = iadd v0, v6
    v8 = load.i64 v1
    return_call_indirect sig0, v8(v7, v1, v4)
}


[main$__lambda_8__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname5
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64) -> i64 tail
    sig5 = () -> i64 apple_aarch64
    sig6 = (i64, i64) -> i64 tail
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig9 = (i64, i64) -> i64 tail
    sig10 = (i64) -> i64 apple_aarch64
    sig11 = (i64) -> i64 apple_aarch64
    sig12 = (i64, i64, i64) -> i64 tail
    fn0 = colocated u0:13 sig0
    fn1 = colocated u0:15 sig1
    fn2 = colocated u0:17 sig2
    fn3 = u0:4 sig3
    fn4 = colocated u0:13 sig5
    fn5 = colocated u0:15 sig6
    fn6 = colocated u0:17 sig7
    fn7 = u0:4 sig8
    fn8 = u0:0 sig10
    fn9 = u0:0 sig11

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = symbol_value.i64 gv0
    v4 = iadd_imm v3, 8
    v5 = iadd_imm v4, 3
    v6 = call fn0()
    v7 = iconst.i64 0
    v8 = func_addr.i64 fn1
    v9 = func_addr.i64 fn2
    v10 = iconst.i64 0
    v11 = call fn3(v5, v0, v6, v7, v8, v9, v10)  ; v7 = 0, v10 = 0
    v12 = load.i64 v11
    v13 = load.i64 v11+8
    v14 = load.i64 v11+16
    v15 = call_indirect sig4, v12(v13, v14)
    v16 = load.i64 v15
    v17 = iadd_imm v15, 8
    v18 = iconst.i64 1
    v19 = sshr_imm v16, 1
    v20 = iadd v19, v18  ; v18 = 1
    v21 = symbol_value.i64 gv1
    v22 = iadd_imm v21, 8
    v23 = iadd_imm v22, 3
    v24 = call fn4()
    v25 = ishl_imm v20, 1
    v26 = iadd_imm v17, -8
    store aligned v25, v26
    v27 = iconst.i64 1
    v28 = func_addr.i64 fn5
    v29 = func_addr.i64 fn6
    v30 = iconst.i64 0
    v31 = call fn7(v23, v26, v24, v27, v28, v29, v30)  ; v27 = 1, v30 = 0
    v32 = load.i64 v31
    v33 = load.i64 v31+8
    v34 = load.i64 v31+16
    v35 = call_indirect sig9, v32(v33, v34)
    v36 = load.i64 v35
    v37 = iadd_imm v35, 8
    v38 = iconst.i64 0
    v39 = ishl_imm v38, 1  ; v38 = 0
    v40 = iconst.i64 2
    v41 = call fn8(v40)  ; v40 = 2
    store aligned v39, v41
    store aligned v36, v41+8
    v42 = iadd_imm v41, 1
    v43 = iconst.i64 2
    v44 = call fn9(v43)  ; v43 = 2
    store aligned v2, v44
    store aligned v42, v44+8
    v45 = iadd_imm v44, 1
    v46 = iadd_imm v0, 0
    store v45, v46
    v47 = load.i64 v1+8
    v48 = ishl_imm v47, 3
    v49 = iadd v0, v48
    v50 = load.i64 v1
    return_call_indirect sig12, v50(v49, v1, v46)
}


[main$__lambda_9__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname5
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64) -> i64 tail
    sig5 = () -> i64 apple_aarch64
    sig6 = (i64, i64) -> i64 tail
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig9 = (i64, i64) -> i64 tail
    sig10 = (i64) -> i64 apple_aarch64
    sig11 = (i64) -> i64 apple_aarch64
    sig12 = (i64, i64, i64) -> i64 tail
    fn0 = colocated u0:13 sig0
    fn1 = colocated u0:15 sig1
    fn2 = colocated u0:17 sig2
    fn3 = u0:4 sig3
    fn4 = colocated u0:13 sig5
    fn5 = colocated u0:15 sig6
    fn6 = colocated u0:17 sig7
    fn7 = u0:4 sig8
    fn8 = u0:0 sig10
    fn9 = u0:0 sig11

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = symbol_value.i64 gv0
    v4 = iadd_imm v3, 8
    v5 = iadd_imm v4, 3
    v6 = call fn0()
    v7 = iconst.i64 0
    v8 = func_addr.i64 fn1
    v9 = func_addr.i64 fn2
    v10 = iconst.i64 0
    v11 = call fn3(v5, v0, v6, v7, v8, v9, v10)  ; v7 = 0, v10 = 0
    v12 = load.i64 v11
    v13 = load.i64 v11+8
    v14 = load.i64 v11+16
    v15 = call_indirect sig4, v12(v13, v14)
    v16 = load.i64 v15
    v17 = iadd_imm v15, 8
    v18 = iconst.i64 2
    v19 = sshr_imm v16, 1
    v20 = imul v19, v18  ; v18 = 2
    v21 = symbol_value.i64 gv1
    v22 = iadd_imm v21, 8
    v23 = iadd_imm v22, 3
    v24 = call fn4()
    v25 = ishl_imm v20, 1
    v26 = iadd_imm v17, -8
    store aligned v25, v26
    v27 = iconst.i64 1
    v28 = func_addr.i64 fn5
    v29 = func_addr.i64 fn6
    v30 = iconst.i64 0
    v31 = call fn7(v23, v26, v24, v27, v28, v29, v30)  ; v27 = 1, v30 = 0
    v32 = load.i64 v31
    v33 = load.i64 v31+8
    v34 = load.i64 v31+16
    v35 = call_indirect sig9, v32(v33, v34)
    v36 = load.i64 v35
    v37 = iadd_imm v35, 8
    v38 = iconst.i64 0
    v39 = ishl_imm v38, 1  ; v38 = 0
    v40 = iconst.i64 2
    v41 = call fn8(v40)  ; v40 = 2
    store aligned v39, v41
    store aligned v36, v41+8
    v42 = iadd_imm v41, 1
    v43 = iconst.i64 2
    v44 = call fn9(v43)  ; v43 = 2
    store aligned v2, v44
    store aligned v42, v44+8
    v45 = iadd_imm v44, 1
    v46 = iadd_imm v0, 0
    store v45, v46
    v47 = load.i64 v1+8
    v48 = ishl_imm v47, 3
    v49 = iadd v0, v48
    v50 = load.i64 v1
    return_call_indirect sig12, v50(v49, v1, v46)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:19 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}


Result
========
6