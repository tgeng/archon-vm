FTerm
========
Defs {
    defs: [
        (
            "add",
            Def {
                args: [
                    (
                        "x",
                        Specialized(
                            Integer,
                        ),
                    ),
                    (
                        "y",
                        Specialized(
                            Integer,
                        ),
                    ),
                ],
                body: Redex {
                    function: Identifier {
                        name: "_int_add",
                        may_have_complex_effects: false,
                    },
                    args: [
                        Identifier {
                            name: "x",
                            may_have_complex_effects: false,
                        },
                        Identifier {
                            name: "y",
                            may_have_complex_effects: false,
                        },
                    ],
                },
                c_type: SpecializedF(
                    Specialized(
                        Integer,
                    ),
                ),
            },
        ),
    ],
    body: Some(
        Defs {
            defs: [
                (
                    "fold",
                    Def {
                        args: [
                            (
                                "size",
                                Specialized(
                                    Integer,
                                ),
                            ),
                            (
                                "array",
                                Uniform,
                            ),
                            (
                                "acc",
                                Specialized(
                                    Integer,
                                ),
                            ),
                            (
                                "f",
                                Uniform,
                            ),
                            (
                                "i",
                                Specialized(
                                    Integer,
                                ),
                            ),
                        ],
                        body: CaseInt {
                            t: Redex {
                                function: Identifier {
                                    name: "_int_lt",
                                    may_have_complex_effects: false,
                                },
                                args: [
                                    Identifier {
                                        name: "i",
                                        may_have_complex_effects: false,
                                    },
                                    Identifier {
                                        name: "size",
                                        may_have_complex_effects: false,
                                    },
                                ],
                            },
                            result_type: SpecializedF(
                                Specialized(
                                    Integer,
                                ),
                            ),
                            branches: [
                                (
                                    1,
                                    Redex {
                                        function: Identifier {
                                            name: "fold",
                                            may_have_complex_effects: false,
                                        },
                                        args: [
                                            Identifier {
                                                name: "size",
                                                may_have_complex_effects: false,
                                            },
                                            Identifier {
                                                name: "array",
                                                may_have_complex_effects: false,
                                            },
                                            Redex {
                                                function: Force {
                                                    thunk: Identifier {
                                                        name: "f",
                                                        may_have_complex_effects: false,
                                                    },
                                                    may_have_complex_effects: false,
                                                },
                                                args: [
                                                    Identifier {
                                                        name: "acc",
                                                        may_have_complex_effects: false,
                                                    },
                                                    MemGet {
                                                        base: Identifier {
                                                            name: "array",
                                                            may_have_complex_effects: false,
                                                        },
                                                        offset: Identifier {
                                                            name: "i",
                                                            may_have_complex_effects: false,
                                                        },
                                                    },
                                                ],
                                            },
                                            Identifier {
                                                name: "f",
                                                may_have_complex_effects: false,
                                            },
                                            Redex {
                                                function: Identifier {
                                                    name: "_int_add",
                                                    may_have_complex_effects: false,
                                                },
                                                args: [
                                                    Identifier {
                                                        name: "i",
                                                        may_have_complex_effects: false,
                                                    },
                                                    Int {
                                                        value: 1,
                                                    },
                                                ],
                                            },
                                        ],
                                    },
                                ),
                                (
                                    0,
                                    Identifier {
                                        name: "acc",
                                        may_have_complex_effects: false,
                                    },
                                ),
                            ],
                            default_branch: None,
                        },
                        c_type: SpecializedF(
                            Specialized(
                                Integer,
                            ),
                        ),
                    },
                ),
            ],
            body: Some(
                Redex {
                    function: Identifier {
                        name: "fold",
                        may_have_complex_effects: false,
                    },
                    args: [
                        Int {
                            value: 3,
                        },
                        Struct {
                            values: [
                                Int {
                                    value: 1,
                                },
                                Int {
                                    value: 2,
                                },
                                Int {
                                    value: 3,
                                },
                            ],
                        },
                        Int {
                            value: 10,
                        },
                        Thunk {
                            computation: Identifier {
                                name: "add",
                                may_have_complex_effects: false,
                            },
                            may_have_complex_effects: false,
                        },
                        Int {
                            value: 0,
                        },
                    ],
                },
            ),
        },
    ),
}

Defs
========
[
    (
        "add",
        FunctionDefinition {
            args: [
                (
                    0,
                    Specialized(
                        Integer,
                    ),
                ),
                (
                    1,
                    Specialized(
                        Integer,
                    ),
                ),
            ],
            body: PrimitiveCall {
                name: "_int_add",
                args: [
                    Var {
                        index: 0,
                    },
                    Var {
                        index: 1,
                    },
                ],
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 2,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "fold",
        FunctionDefinition {
            args: [
                (
                    0,
                    Specialized(
                        Integer,
                    ),
                ),
                (
                    1,
                    Uniform,
                ),
                (
                    2,
                    Specialized(
                        Integer,
                    ),
                ),
                (
                    3,
                    Uniform,
                ),
                (
                    4,
                    Specialized(
                        Integer,
                    ),
                ),
            ],
            body: Let {
                t: PrimitiveCall {
                    name: "_int_lt",
                    args: [
                        Var {
                            index: 4,
                        },
                        Var {
                            index: 0,
                        },
                    ],
                },
                bound_index: 5,
                body: CaseInt {
                    t: Var {
                        index: 5,
                    },
                    result_type: SpecializedF(
                        Specialized(
                            Integer,
                        ),
                    ),
                    branches: [
                        (
                            1,
                            Let {
                                t: Let {
                                    t: MemGet {
                                        base: Var {
                                            index: 1,
                                        },
                                        offset: Var {
                                            index: 4,
                                        },
                                    },
                                    bound_index: 6,
                                    body: Redex {
                                        function: Force {
                                            thunk: Var {
                                                index: 3,
                                            },
                                            may_have_complex_effects: false,
                                        },
                                        args: [
                                            Var {
                                                index: 2,
                                            },
                                            Var {
                                                index: 6,
                                            },
                                        ],
                                    },
                                },
                                bound_index: 7,
                                body: Let {
                                    t: PrimitiveCall {
                                        name: "_int_add",
                                        args: [
                                            Var {
                                                index: 4,
                                            },
                                            Int {
                                                value: 1,
                                            },
                                        ],
                                    },
                                    bound_index: 8,
                                    body: Redex {
                                        function: Def {
                                            name: "fold",
                                            may_have_complex_effects: false,
                                        },
                                        args: [
                                            Var {
                                                index: 0,
                                            },
                                            Var {
                                                index: 1,
                                            },
                                            Var {
                                                index: 7,
                                            },
                                            Var {
                                                index: 3,
                                            },
                                            Var {
                                                index: 8,
                                            },
                                        ],
                                    },
                                },
                            },
                        ),
                        (
                            0,
                            Return {
                                value: Var {
                                    index: 2,
                                },
                            },
                        ),
                    ],
                    default_branch: None,
                },
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 9,
            may_be_simple: false,
            may_be_complex: false,
            may_be_specialized: true,
        },
    ),
    (
        "main",
        FunctionDefinition {
            args: [],
            body: Redex {
                function: Def {
                    name: "fold",
                    may_have_complex_effects: false,
                },
                args: [
                    Int {
                        value: 3,
                    },
                    Struct {
                        values: [
                            Int {
                                value: 1,
                            },
                            Int {
                                value: 2,
                            },
                            Int {
                                value: 3,
                            },
                        ],
                    },
                    Int {
                        value: 10,
                    },
                    Thunk {
                        t: Def {
                            name: "add",
                            may_have_complex_effects: false,
                        },
                        may_have_complex_effects: false,
                    },
                    Int {
                        value: 0,
                    },
                ],
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 0,
            may_be_simple: false,
            may_be_complex: false,
            may_be_specialized: true,
        },
    ),
]

CLIR
========
[add__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = sshr_imm v2, 1
    v5 = sshr_imm v3, 1
    v6 = iadd v4, v5
    v7 = ishl_imm v6, 1
    v8 = iadd_imm v0, 8
    store v7, v8
    v9 = load.i64 v1+8
    v10 = ishl_imm v9, 3
    v11 = iadd v0, v10
    v12 = load.i64 v1
    return_call_indirect sig0, v12(v11, v1, v8)
}


[fold__specialized]
function u0:0(i64, i64, i64, i64, i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 apple_aarch64
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64) -> i64 tail
    fn0 = colocated u0:11 sig0
    fn1 = u0:1 sig1
    fn2 = colocated u0:18 sig3

block0(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64, v5: i64):
    v6 = icmp slt v5, v1
    v9 = uextend.i32 v6
    br_table v9, block4, [block3, block2]

block3:
    jump block1(v3, v0)

block2:
    v10 = iadd_imm.i64 v2, -1
    v11 = ishl_imm.i64 v5, 3
    v12 = iadd v10, v11
    v13 = load.i64 v12
    v14 = ishl_imm.i64 v3, 1
    v15 = iadd_imm.i64 v0, -8
    store aligned v13, v15
    v16 = iadd_imm v15, -8
    store aligned v14, v16
    v17 = call fn0()
    stack_store v16, ss0
    v18 = stack_addr.i64 ss0
    v19 = call fn1(v4, v18)
    v20 = stack_load.i64 ss0
    v21 = isub v16, v20
    v22 = ushr_imm v21, 3
    v23 = load.i64 v17+8
    v24 = iadd v23, v22
    store v24, v17+8
    v25 = call_indirect sig2, v19(v20, v17)
    v26 = load.i64 v25
    v27 = iadd_imm v25, 8
    v28 = iconst.i64 1
    v29 = iadd.i64 v5, v28  ; v28 = 1
    v30 = sshr_imm v26, 1
    return_call fn2(v27, v1, v2, v30, v4, v29)

block4:
    trap unreachable

block1(v7: i64, v8: i64):
    return v7
}


[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = colocated u0:16 sig1
    fn2 = colocated u0:18 sig2

block0(v0: i64):
    v1 = iconst.i64 3
    v2 = iconst.i64 1
    v3 = ishl_imm v2, 1  ; v2 = 1
    v4 = iconst.i64 2
    v5 = ishl_imm v4, 1  ; v4 = 2
    v6 = iconst.i64 3
    v7 = ishl_imm v6, 1  ; v6 = 3
    v8 = iconst.i64 3
    v9 = call fn0(v8)  ; v8 = 3
    store aligned v3, v9
    store aligned v5, v9+8
    store aligned v7, v9+16
    v10 = iadd_imm v9, 1
    v11 = iconst.i64 10
    v12 = func_addr.i64 fn1
    v13 = iadd_imm v12, 3
    v14 = iconst.i64 0
    return_call fn2(v0, v1, v10, v11, v13, v14)  ; v1 = 3, v11 = 10, v14 = 0
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:19 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}


Result
========
16