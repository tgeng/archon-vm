CLIR
========
[f__simple]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = (i64, i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64) -> i64 apple_aarch64
    fn0 = u0:1 sig0
    fn1 = %Memmove sig2

block0(v0: i64):
    v1 = load.i64 v0
    v2 = load.i64 v0+8
    v3 = load.i64 v0+16
    v4 = iadd_imm v0, -8
    store aligned v3, v4
    v5 = iadd_imm v4, -8
    store aligned v2, v5
    v6 = global_value.i64 gv0
    v7 = iadd_imm v6, 8
    stack_store v5, ss0
    v8 = stack_addr.i64 ss0
    v9 = call fn0(v1, v8)
    v10 = stack_load.i64 ss0
    v11 = iadd_imm v10, 24
    v12 = isub v0, v10
    v13 = call fn1(v11, v10, v12)
    return_call_indirect sig1, v9(v11, v7)
}


[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64) -> i64 tail
    fn0 = colocated u0:22 sig0
    fn1 = colocated u0:20 sig1

block0(v0: i64):
    v1 = func_addr.i64 fn0
    v2 = iadd_imm v1, 3
    v3 = iconst.i64 1
    v4 = ishl_imm v3, 1  ; v3 = 1
    v5 = iconst.i64 2
    v6 = ishl_imm v5, 1  ; v5 = 2
    v7 = iadd_imm v0, -8
    store aligned v6, v7
    v8 = iadd_imm v7, -8
    store aligned v4, v8
    v9 = iadd_imm v8, -8
    store aligned v2, v9
    v10 = call fn1(v9)
    v11 = load.i64 v10
    v12 = iadd_imm v10, 8
    v13 = sshr_imm v11, 1
    return v13
}


[main$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = sshr_imm v2, 1
    v5 = sshr_imm v3, 1
    v6 = iadd v4, v5
    v7 = ishl_imm v6, 1
    v8 = iadd_imm v0, 8
    store v7, v8
    v9 = load.i64 v1+8
    v10 = ishl_imm v9, 3
    v11 = iadd v0, v10
    v12 = load.i64 v1
    return_call_indirect sig0, v12(v11, v1, v8)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:21 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}
