FTerm
========
Handler {
    parameter: Int {
        value: 0,
    },
    parameter_disposer: Lambda {
        arg_names: [
            (
                "_",
                Uniform,
            ),
        ],
        body: Struct {
            values: [],
        },
        effect: Simple,
    },
    parameter_replicator: Lambda {
        arg_names: [
            (
                "p",
                Uniform,
            ),
        ],
        body: Struct {
            values: [
                Identifier {
                    name: "p",
                    effect: Simple,
                },
                Identifier {
                    name: "p",
                    effect: Simple,
                },
            ],
        },
        effect: Simple,
    },
    transform: Lambda {
        arg_names: [
            (
                "p",
                Uniform,
            ),
            (
                "r",
                Uniform,
            ),
        ],
        body: Identifier {
            name: "r",
            effect: Simple,
        },
        effect: Simple,
    },
    simple_handlers: [],
    complex_handlers: [
        (
            Str {
                value: "accumulate",
            },
            Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                    (
                        "x",
                        Uniform,
                    ),
                    (
                        "cont",
                        Uniform,
                    ),
                ],
                body: Let {
                    name: "r",
                    t: Redex {
                        function: Identifier {
                            name: "_int_add",
                            effect: Simple,
                        },
                        args: [
                            Identifier {
                                name: "p",
                                effect: Simple,
                            },
                            Identifier {
                                name: "x",
                                effect: Simple,
                            },
                        ],
                    },
                    body: Redex {
                        function: Force {
                            thunk: Identifier {
                                name: "cont",
                                effect: Simple,
                            },
                            effect: Complex,
                        },
                        args: [
                            Int {
                                value: 0,
                            },
                            Identifier {
                                name: "r",
                                effect: Simple,
                            },
                            Identifier {
                                name: "r",
                                effect: Simple,
                            },
                        ],
                    },
                },
                effect: Complex,
            },
        ),
        (
            Str {
                value: "dissipate",
            },
            Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                    (
                        "x",
                        Uniform,
                    ),
                    (
                        "cont",
                        Uniform,
                    ),
                ],
                body: Let {
                    name: "r",
                    t: Redex {
                        function: Identifier {
                            name: "_int_sub",
                            effect: Simple,
                        },
                        args: [
                            Identifier {
                                name: "p",
                                effect: Simple,
                            },
                            Identifier {
                                name: "x",
                                effect: Simple,
                            },
                        ],
                    },
                    body: Redex {
                        function: Force {
                            thunk: Identifier {
                                name: "cont",
                                effect: Simple,
                            },
                            effect: Complex,
                        },
                        args: [
                            Int {
                                value: 0,
                            },
                            Identifier {
                                name: "r",
                                effect: Simple,
                            },
                            Identifier {
                                name: "r",
                                effect: Simple,
                            },
                        ],
                    },
                },
                effect: Complex,
            },
        ),
        (
            Str {
                value: "proliferate",
            },
            Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                    (
                        "cont",
                        Uniform,
                    ),
                ],
                body: Let {
                    name: "r",
                    t: Redex {
                        function: Identifier {
                            name: "_int_mul",
                            effect: Simple,
                        },
                        args: [
                            Identifier {
                                name: "p",
                                effect: Simple,
                            },
                            Int {
                                value: 2,
                            },
                        ],
                    },
                    body: Redex {
                        function: Force {
                            thunk: Identifier {
                                name: "cont",
                                effect: Simple,
                            },
                            effect: Complex,
                        },
                        args: [
                            Int {
                                value: 0,
                            },
                            Identifier {
                                name: "r",
                                effect: Simple,
                            },
                            Identifier {
                                name: "r",
                                effect: Simple,
                            },
                        ],
                    },
                },
                effect: Complex,
            },
        ),
    ],
    input: Thunk {
        computation: Let {
            name: "_",
            t: OperationCall {
                eff: Str {
                    value: "accumulate",
                },
                args: [
                    Int {
                        value: 2,
                    },
                ],
                effect: Complex,
            },
            body: Let {
                name: "_",
                t: OperationCall {
                    eff: Str {
                        value: "accumulate",
                    },
                    args: [
                        Int {
                            value: 4,
                        },
                    ],
                    effect: Complex,
                },
                body: Let {
                    name: "_",
                    t: OperationCall {
                        eff: Str {
                            value: "dissipate",
                        },
                        args: [
                            Int {
                                value: 1,
                            },
                        ],
                        effect: Complex,
                    },
                    body: OperationCall {
                        eff: Str {
                            value: "proliferate",
                        },
                        args: [],
                        effect: Complex,
                    },
                },
            },
        },
        effect: Complex,
    },
}

Defs
========
[
    (
        "main",
        FunctionDefinition {
            args: [],
            body: Handler {
                parameter: Int {
                    value: 0,
                },
                parameter_disposer: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_0",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                parameter_replicator: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_1",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                transform: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_2",
                            effect: Simple,
                        },
                        args: [],
                    },
                    effect: Simple,
                },
                complex_handlers: [
                    (
                        Str {
                            value: "accumulate",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_3",
                                    effect: Complex,
                                },
                                args: [],
                            },
                            effect: Complex,
                        },
                    ),
                    (
                        Str {
                            value: "dissipate",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_4",
                                    effect: Complex,
                                },
                                args: [],
                            },
                            effect: Complex,
                        },
                    ),
                    (
                        Str {
                            value: "proliferate",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_5",
                                    effect: Complex,
                                },
                                args: [],
                            },
                            effect: Complex,
                        },
                    ),
                ],
                simple_handlers: [],
                input: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_6",
                            effect: Complex,
                        },
                        args: [],
                    },
                    effect: Complex,
                },
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 0,
            need_simple: false,
            need_cps: false,
            need_specialized: true,
        },
    ),
    (
        "main$__lambda_0",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [],
                },
            },
            c_type: Default,
            var_bound: 1,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_1",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 0,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 1,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_2",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Return {
                value: Var {
                    index: 1,
                },
            },
            c_type: Default,
            var_bound: 2,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_3",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
                (
                    2,
                    Uniform,
                ),
            ],
            body: Let {
                t: PrimitiveCall {
                    name: "_int_add",
                    args: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 1,
                        },
                    ],
                },
                bound_index: 3,
                body: Redex {
                    function: Force {
                        thunk: Var {
                            index: 2,
                        },
                        effect: Complex,
                    },
                    args: [
                        Int {
                            value: 0,
                        },
                        Var {
                            index: 3,
                        },
                        Var {
                            index: 3,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 4,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_4",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
                (
                    2,
                    Uniform,
                ),
            ],
            body: Let {
                t: PrimitiveCall {
                    name: "_int_sub",
                    args: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 1,
                        },
                    ],
                },
                bound_index: 3,
                body: Redex {
                    function: Force {
                        thunk: Var {
                            index: 2,
                        },
                        effect: Complex,
                    },
                    args: [
                        Int {
                            value: 0,
                        },
                        Var {
                            index: 3,
                        },
                        Var {
                            index: 3,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 4,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_5",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Let {
                t: PrimitiveCall {
                    name: "_int_mul",
                    args: [
                        Var {
                            index: 0,
                        },
                        Int {
                            value: 2,
                        },
                    ],
                },
                bound_index: 2,
                body: Redex {
                    function: Force {
                        thunk: Var {
                            index: 1,
                        },
                        effect: Complex,
                    },
                    args: [
                        Int {
                            value: 0,
                        },
                        Var {
                            index: 2,
                        },
                        Var {
                            index: 2,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 3,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
    (
        "main$__lambda_6",
        FunctionDefinition {
            args: [],
            body: Let {
                t: OperationCall {
                    eff: Str {
                        value: "accumulate",
                    },
                    args: [
                        Int {
                            value: 2,
                        },
                    ],
                    effect: Complex,
                },
                bound_index: 0,
                body: Let {
                    t: OperationCall {
                        eff: Str {
                            value: "accumulate",
                        },
                        args: [
                            Int {
                                value: 4,
                            },
                        ],
                        effect: Complex,
                    },
                    bound_index: 1,
                    body: Let {
                        t: OperationCall {
                            eff: Str {
                                value: "dissipate",
                            },
                            args: [
                                Int {
                                    value: 1,
                                },
                            ],
                            effect: Complex,
                        },
                        bound_index: 2,
                        body: OperationCall {
                            eff: Str {
                                value: "proliferate",
                            },
                            args: [],
                            effect: Complex,
                        },
                    },
                },
            },
            c_type: Default,
            var_bound: 3,
            need_simple: false,
            need_cps: true,
            need_specialized: false,
        },
    ),
]