CLIR
========
[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64, i64, i64) apple_aarch64
    sig5 = (i64, i64) -> i64 tail
    sig6 = (i64, i64, i64, i64) apple_aarch64
    sig7 = (i64, i64, i64, i64) -> i64 tail
    sig8 = (i64, i64) -> i64 tail
    sig9 = (i64, i64) -> i64 apple_aarch64
    sig10 = (i64, i64, i64) -> i64 apple_aarch64
    sig11 = (i64, i64, i64) -> i64 apple_aarch64
    fn0 = colocated u0:21 sig0
    fn1 = colocated u0:19 sig1
    fn2 = u0:6 sig2
    fn3 = colocated u0:23 sig3
    fn4 = u0:7 sig4
    fn5 = colocated u0:25 sig5
    fn6 = u0:7 sig6
    fn7 = u0:12 sig7
    fn8 = colocated u0:33 sig8
    fn9 = u0:1 sig9
    fn10 = u0:3 sig10
    fn11 = u0:3 sig11

block0(v0: i64):
    v1 = global_value.i64 gv0
    v2 = iadd_imm v1, 8
    v3 = iconst.i64 0
    v4 = ishl_imm v3, 1  ; v3 = 0
    v5 = iconst.i64 3
    v6 = iconst.i64 3
    v7 = func_addr.i64 fn0
    v8 = iadd_imm v7, 3
    v9 = func_addr.i64 fn1
    stack_store v0, ss0
    v10 = stack_addr.i64 ss0
    v11 = call fn2(v10, v2, v4, v5, v6, v8, v9)  ; v5 = 3, v6 = 3
    v12 = stack_load.i64 ss0
    v13 = load.i64 v11
    v14 = func_addr.i64 fn3
    v15 = iadd_imm v14, 3
    v16 = iconst.i64 2
    v17 = iconst.i64 0
    call fn4(v13, v15, v16, v17)  ; v16 = 2, v17 = 0
    v18 = func_addr.i64 fn5
    v19 = iadd_imm v18, 3
    v20 = iconst.i64 2
    v21 = iconst.i64 1
    call fn6(v13, v19, v20, v21)  ; v20 = 2, v21 = 1
    v22 = load.i64 v13
    v23 = iadd_imm v11, 1
    v24 = iadd_imm v12, -8
    store aligned v23, v24
    v25 = func_addr.i64 fn8
    v26 = iadd_imm v25, 3
    stack_store v24, ss0
    v27 = stack_addr.i64 ss0
    v28 = call fn9(v26, v27)
    v29 = stack_load.i64 ss0
    v30 = isub v12, v29
    v31 = load.i64 v22+8
    v32 = ishl_imm v31, 3
    v33 = iadd v32, v30
    v34 = ushr_imm v33, 3
    store v34, v22+8
    v35 = call fn10(v0, v29, v28)
    v36 = call fn7(v29, v22, v28, v13)
    v37 = call fn11(v0, v29, v36)
    v38 = load.i64 v36
    v39 = iadd_imm v36, 8
    v40 = sshr_imm v38, 1
    return v40
}


[main$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iadd_imm v0, 8
    store v3, v4
    v5 = load.i64 v1+8
    v6 = ishl_imm v5, 3
    v7 = iadd v0, v6
    v8 = load.i64 v1
    return_call_indirect sig0, v8(v7, v1, v4)
}


[main$__lambda_1__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64) -> i64 apple_aarch64
    sig2 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = u0:0 sig1

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 1
    v4 = ishl_imm v3, 1  ; v3 = 1
    v5 = iconst.i64 2
    v6 = call fn0(v5)  ; v5 = 2
    store aligned v4, v6
    store aligned v2, v6+8
    v7 = iadd_imm v6, 1
    v8 = iconst.i64 2
    v9 = call fn1(v8)  ; v8 = 2
    store aligned v2, v9
    store aligned v7, v9+8
    v10 = iadd_imm v9, 1
    v11 = iadd_imm v0, 0
    store v10, v11
    v12 = load.i64 v1+8
    v13 = ishl_imm v12, 3
    v14 = iadd v0, v13
    v15 = load.i64 v1
    return_call_indirect sig2, v15(v14, v1, v11)
}


[main$__lambda_2__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64) -> i64 apple_aarch64
    sig2 = (i64) -> i64 apple_aarch64
    sig3 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = u0:0 sig1
    fn2 = u0:0 sig2

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iconst.i64 1
    v5 = ishl_imm v4, 1  ; v4 = 1
    v6 = iconst.i64 0
    v7 = call fn0(v6)  ; v6 = 0
    v8 = iadd_imm v7, 1
    v9 = iconst.i64 2
    v10 = call fn1(v9)  ; v9 = 2
    store aligned v5, v10
    store aligned v8, v10+8
    v11 = iadd_imm v10, 1
    v12 = iconst.i64 2
    v13 = call fn2(v12)  ; v12 = 2
    store aligned v3, v13
    store aligned v11, v13+8
    v14 = iadd_imm v13, 1
    v15 = iadd_imm v0, 8
    store v14, v15
    v16 = load.i64 v1+8
    v17 = ishl_imm v16, 3
    v18 = iadd v0, v17
    v19 = load.i64 v1
    return_call_indirect sig3, v19(v18, v1, v15)
}


[main$__lambda_4__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname0
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64) -> i64 tail
    sig5 = (i64, i64) -> i64 tail
    sig6 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64) -> i64 apple_aarch64
    sig9 = (i64) -> i64 apple_aarch64
    sig10 = (i64, i64, i64) -> i64 tail
    fn0 = colocated u0:14 sig0
    fn1 = colocated u0:17 sig1
    fn2 = u0:4 sig2
    fn3 = colocated u0:14 sig4
    fn4 = colocated u0:17 sig5
    fn5 = u0:4 sig6
    fn6 = u0:0 sig8
    fn7 = u0:0 sig9

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = global_value.i64 gv0
    v5 = iadd_imm v4, 8
    v6 = iconst.i64 0
    v7 = func_addr.i64 fn0
    v8 = func_addr.i64 fn1
    v9 = iconst.i64 0
    v10 = call fn2(v2, v9, v0, v5, v6, v7, v8)  ; v9 = 0, v6 = 0
    v11 = load.i64 v10
    v12 = load.i64 v10+8
    v13 = load.i64 v10+16
    v14 = call_indirect sig3, v11(v12, v13)
    v15 = load.i64 v14
    v16 = iadd_imm v14, 8
    v17 = iconst.i64 1
    v18 = sshr_imm v15, 1
    v19 = iadd v18, v17  ; v17 = 1
    v20 = global_value.i64 gv1
    v21 = iadd_imm v20, 8
    v22 = ishl_imm v19, 1
    v23 = iadd_imm v16, -8
    store aligned v22, v23
    v24 = iconst.i64 1
    v25 = func_addr.i64 fn3
    v26 = func_addr.i64 fn4
    v27 = iconst.i64 1
    v28 = call fn5(v2, v27, v23, v21, v24, v25, v26)  ; v27 = 1, v24 = 1
    v29 = load.i64 v28
    v30 = load.i64 v28+8
    v31 = load.i64 v28+16
    v32 = call_indirect sig7, v29(v30, v31)
    v33 = load.i64 v32
    v34 = iadd_imm v32, 8
    v35 = iconst.i64 1
    v36 = ishl_imm v35, 1  ; v35 = 1
    v37 = iconst.i64 2
    v38 = call fn6(v37)  ; v37 = 2
    store aligned v36, v38
    store aligned v33, v38+8
    v39 = iadd_imm v38, 1
    v40 = iconst.i64 2
    v41 = call fn7(v40)  ; v40 = 2
    store aligned v3, v41
    store aligned v39, v41+8
    v42 = iadd_imm v41, 1
    v43 = iadd_imm v0, 8
    store v42, v43
    v44 = load.i64 v1+8
    v45 = ishl_imm v44, 3
    v46 = iadd v0, v45
    v47 = load.i64 v1
    return_call_indirect sig10, v47(v46, v1, v43)
}


[main$__lambda_5__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname0
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64) -> i64 tail
    sig5 = (i64, i64) -> i64 tail
    sig6 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64) -> i64 apple_aarch64
    sig9 = (i64) -> i64 apple_aarch64
    sig10 = (i64, i64, i64) -> i64 tail
    fn0 = colocated u0:14 sig0
    fn1 = colocated u0:17 sig1
    fn2 = u0:4 sig2
    fn3 = colocated u0:14 sig4
    fn4 = colocated u0:17 sig5
    fn5 = u0:4 sig6
    fn6 = u0:0 sig8
    fn7 = u0:0 sig9

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = global_value.i64 gv0
    v5 = iadd_imm v4, 8
    v6 = iconst.i64 0
    v7 = func_addr.i64 fn0
    v8 = func_addr.i64 fn1
    v9 = iconst.i64 0
    v10 = call fn2(v2, v9, v0, v5, v6, v7, v8)  ; v9 = 0, v6 = 0
    v11 = load.i64 v10
    v12 = load.i64 v10+8
    v13 = load.i64 v10+16
    v14 = call_indirect sig3, v11(v12, v13)
    v15 = load.i64 v14
    v16 = iadd_imm v14, 8
    v17 = iconst.i64 2
    v18 = sshr_imm v15, 1
    v19 = imul v18, v17  ; v17 = 2
    v20 = global_value.i64 gv1
    v21 = iadd_imm v20, 8
    v22 = ishl_imm v19, 1
    v23 = iadd_imm v16, -8
    store aligned v22, v23
    v24 = iconst.i64 1
    v25 = func_addr.i64 fn3
    v26 = func_addr.i64 fn4
    v27 = iconst.i64 1
    v28 = call fn5(v2, v27, v23, v21, v24, v25, v26)  ; v27 = 1, v24 = 1
    v29 = load.i64 v28
    v30 = load.i64 v28+8
    v31 = load.i64 v28+16
    v32 = call_indirect sig7, v29(v30, v31)
    v33 = load.i64 v32
    v34 = iadd_imm v32, 8
    v35 = iconst.i64 1
    v36 = ishl_imm v35, 1  ; v35 = 1
    v37 = iconst.i64 2
    v38 = call fn6(v37)  ; v37 = 2
    store aligned v36, v38
    store aligned v33, v38+8
    v39 = iadd_imm v38, 1
    v40 = iconst.i64 2
    v41 = call fn7(v40)  ; v40 = 2
    store aligned v3, v41
    store aligned v39, v41+8
    v42 = iadd_imm v41, 1
    v43 = iadd_imm v0, 8
    store v42, v43
    v44 = load.i64 v1+8
    v45 = ishl_imm v44, 3
    v46 = iadd v0, v45
    v47 = load.i64 v1
    return_call_indirect sig10, v47(v46, v1, v43)
}


[main$__lambda_6__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname0
    gv2 = symbol colocated userextname0
    gv3 = symbol colocated userextname0
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64) -> i64 tail
    sig5 = (i64, i64) -> i64 tail
    sig6 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64) -> i64 tail
    sig9 = (i64, i64) -> i64 tail
    sig10 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig11 = (i64, i64) -> i64 tail
    sig12 = (i64, i64) -> i64 tail
    sig13 = (i64, i64) -> i64 tail
    sig14 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig15 = (i64, i64) -> i64 tail
    sig16 = (i64, i64, i64) -> i64 apple_aarch64
    sig17 = (i64, i64) -> i64 tail
    sig18 = (i64, i64) -> i64 tail
    sig19 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig20 = (i64, i64) -> i64 tail
    fn0 = colocated u0:14 sig0
    fn1 = colocated u0:17 sig1
    fn2 = u0:4 sig2
    fn3 = colocated u0:14 sig4
    fn4 = colocated u0:17 sig5
    fn5 = u0:4 sig6
    fn6 = colocated u0:14 sig8
    fn7 = colocated u0:17 sig9
    fn8 = u0:4 sig10
    fn9 = colocated u0:14 sig12
    fn10 = colocated u0:17 sig13
    fn11 = u0:4 sig14
    fn12 = %Memmove sig16
    fn13 = colocated u0:14 sig17
    fn14 = colocated u0:17 sig18
    fn15 = u0:4 sig19

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = global_value.i64 gv0
    v5 = iadd_imm v4, 8
    v6 = iconst.i64 1
    v7 = ishl_imm v6, 1  ; v6 = 1
    v8 = iadd_imm v0, -8
    store aligned v7, v8
    v9 = iconst.i64 1
    v10 = func_addr.i64 fn0
    v11 = func_addr.i64 fn1
    v12 = iconst.i64 1
    v13 = call fn2(v2, v12, v8, v5, v9, v10, v11)  ; v12 = 1, v9 = 1
    v14 = load.i64 v13
    v15 = load.i64 v13+8
    v16 = load.i64 v13+16
    v17 = call_indirect sig3, v14(v15, v16)
    v18 = load.i64 v17
    v19 = iadd_imm v17, 8
    v20 = global_value.i64 gv1
    v21 = iadd_imm v20, 8
    v22 = iconst.i64 0
    v23 = func_addr.i64 fn3
    v24 = func_addr.i64 fn4
    v25 = iconst.i64 0
    v26 = call fn5(v3, v25, v19, v21, v22, v23, v24)  ; v25 = 0, v22 = 0
    v27 = load.i64 v26
    v28 = load.i64 v26+8
    v29 = load.i64 v26+16
    v30 = call_indirect sig7, v27(v28, v29)
    v31 = load.i64 v30
    v32 = iadd_imm v30, 8
    v33 = global_value.i64 gv2
    v34 = iadd_imm v33, 8
    v35 = iconst.i64 0
    v36 = func_addr.i64 fn6
    v37 = func_addr.i64 fn7
    v38 = iconst.i64 0
    v39 = call fn8(v3, v38, v32, v34, v35, v36, v37)  ; v38 = 0, v35 = 0
    v40 = load.i64 v39
    v41 = load.i64 v39+8
    v42 = load.i64 v39+16
    v43 = call_indirect sig11, v40(v41, v42)
    v44 = load.i64 v43
    v45 = iadd_imm v43, 8
    v46 = global_value.i64 gv3
    v47 = iadd_imm v46, 8
    v48 = iconst.i64 0
    v49 = func_addr.i64 fn9
    v50 = func_addr.i64 fn10
    v51 = iconst.i64 1
    v52 = call fn11(v3, v51, v45, v47, v48, v49, v50)  ; v51 = 1, v48 = 0
    v53 = load.i64 v52
    v54 = load.i64 v52+8
    v55 = load.i64 v52+16
    v56 = call_indirect sig15, v53(v54, v55)
    v57 = load.i64 v56
    v58 = iadd_imm v56, 8
    v59 = iadd_imm v58, 16
    v60 = isub v0, v58
    v61 = call fn12(v59, v58, v60)
    v62 = isub v0, v59
    v63 = load.i64 v1+8
    v64 = ishl_imm v63, 3
    v65 = iadd v64, v62
    v66 = ushr_imm v65, 3
    store v66, v1+8
    v67 = iconst.i64 0
    v68 = func_addr.i64 fn13
    v69 = func_addr.i64 fn14
    v70 = iconst.i64 0
    v71 = call fn15(v2, v70, v59, v1, v67, v68, v69)  ; v70 = 0, v67 = 0
    v72 = load.i64 v71
    v73 = load.i64 v71+8
    v74 = load.i64 v71+16
    return_call_indirect sig20, v72(v73, v74)
}


[main$__lambda_7__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64) -> i64 tail
    sig5 = (i64) -> i64 apple_aarch64
    sig6 = (i64, i64, i64, i64) apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64) -> i64 apple_aarch64
    sig9 = (i64, i64, i64, i64) apple_aarch64
    sig10 = (i64, i64, i64, i64) -> i64 tail
    sig11 = (i64, i64) -> i64 tail
    sig12 = (i64) -> i64 apple_aarch64
    sig13 = (i64, i64) -> i64 apple_aarch64
    fn0 = %Memmove sig0
    fn1 = colocated u0:21 sig1
    fn2 = colocated u0:19 sig2
    fn3 = u0:6 sig3
    fn4 = colocated u0:27 sig4
    fn5 = u0:0 sig5
    fn6 = u0:7 sig6
    fn7 = colocated u0:29 sig7
    fn8 = u0:0 sig8
    fn9 = u0:7 sig9
    fn10 = u0:12 sig10
    fn11 = colocated u0:31 sig11
    fn12 = u0:0 sig12
    fn13 = u0:1 sig13

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iadd_imm v0, 8
    v4 = isub v0, v0
    v5 = call fn0(v3, v0, v4)
    v6 = isub v0, v3
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v8, v6
    v10 = ushr_imm v9, 3
    store v10, v1+8
    v11 = iconst.i64 1
    v12 = ishl_imm v11, 1  ; v11 = 1
    v13 = iconst.i64 3
    v14 = iconst.i64 3
    v15 = func_addr.i64 fn1
    v16 = iadd_imm v15, 3
    v17 = func_addr.i64 fn2
    stack_store v3, ss0
    v18 = stack_addr.i64 ss0
    v19 = call fn3(v18, v1, v12, v13, v14, v16, v17)  ; v13 = 3, v14 = 3
    v20 = stack_load.i64 ss0
    v21 = load.i64 v19
    v22 = func_addr.i64 fn4
    v23 = iconst.i64 1
    v24 = iadd_imm v22, 3
    v25 = iconst.i64 3
    v26 = call fn5(v25)  ; v25 = 3
    store aligned v24, v26
    store aligned v23, v26+8  ; v23 = 1
    store aligned v2, v26+16
    v27 = iadd_imm v26, 1
    v28 = iconst.i64 2
    v29 = iconst.i64 0
    call fn6(v21, v27, v28, v29)  ; v28 = 2, v29 = 0
    v30 = func_addr.i64 fn7
    v31 = iconst.i64 1
    v32 = iadd_imm v30, 3
    v33 = iconst.i64 3
    v34 = call fn8(v33)  ; v33 = 3
    store aligned v32, v34
    store aligned v31, v34+8  ; v31 = 1
    store aligned v2, v34+16
    v35 = iadd_imm v34, 1
    v36 = iconst.i64 2
    v37 = iconst.i64 1
    call fn9(v21, v35, v36, v37)  ; v36 = 2, v37 = 1
    v38 = load.i64 v21
    v39 = iadd_imm v19, 1
    v40 = iadd_imm v20, -8
    store aligned v39, v40
    v41 = func_addr.i64 fn11
    v42 = iconst.i64 1
    v43 = iadd_imm v41, 3
    v44 = iconst.i64 3
    v45 = call fn12(v44)  ; v44 = 3
    store aligned v43, v45
    store aligned v42, v45+8  ; v42 = 1
    store aligned v2, v45+16
    v46 = iadd_imm v45, 1
    stack_store v40, ss0
    v47 = stack_addr.i64 ss0
    v48 = call fn13(v46, v47)
    v49 = stack_load.i64 ss0
    v50 = isub v20, v49
    v51 = load.i64 v38+8
    v52 = ishl_imm v51, 3
    v53 = iadd v52, v50
    v54 = ushr_imm v53, 3
    store v54, v38+8
    return_call fn10(v49, v38, v48, v21)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:20 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}
