CLIR
========
[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname4
    gv2 = symbol colocated userextname7
    gv3 = symbol colocated userextname9
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64, i64, i64) apple_aarch64
    sig5 = (i64, i64) -> i64 tail
    sig6 = (i64, i64, i64, i64) apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64, i64, i64) apple_aarch64
    sig9 = (i64, i64, i64, i64) -> i64 tail
    sig10 = (i64, i64) -> i64 tail
    sig11 = (i64, i64) -> i64 apple_aarch64
    fn0 = colocated u0:21 sig0
    fn1 = colocated u0:19 sig1
    fn2 = u0:6 sig2
    fn3 = colocated u0:23 sig3
    fn4 = u0:7 sig4
    fn5 = colocated u0:25 sig5
    fn6 = u0:7 sig6
    fn7 = colocated u0:27 sig7
    fn8 = u0:7 sig8
    fn9 = u0:12 sig9
    fn10 = colocated u0:29 sig10
    fn11 = u0:1 sig11

block0(v0: i64):
    v1 = global_value.i64 gv0
    v2 = iadd_imm v1, 8
    v3 = iconst.i64 0
    v4 = ishl_imm v3, 1  ; v3 = 0
    v5 = iconst.i64 3
    v6 = iconst.i64 3
    v7 = func_addr.i64 fn0
    v8 = iadd_imm v7, 3
    v9 = func_addr.i64 fn1
    stack_store v0, ss0
    v10 = stack_addr.i64 ss0
    v11 = call fn2(v10, v2, v4, v5, v6, v8, v9)  ; v5 = 3, v6 = 3
    v12 = stack_load.i64 ss0
    v13 = symbol_value.i64 gv1
    v14 = iadd_imm v13, 8
    v15 = iadd_imm v14, 3
    v16 = func_addr.i64 fn3
    v17 = iadd_imm v16, 3
    v18 = iconst.i64 1
    call fn4(v11, v15, v17, v18)  ; v18 = 1
    v19 = symbol_value.i64 gv2
    v20 = iadd_imm v19, 8
    v21 = iadd_imm v20, 3
    v22 = func_addr.i64 fn5
    v23 = iadd_imm v22, 3
    v24 = iconst.i64 1
    call fn6(v11, v21, v23, v24)  ; v24 = 1
    v25 = symbol_value.i64 gv3
    v26 = iadd_imm v25, 8
    v27 = iadd_imm v26, 3
    v28 = func_addr.i64 fn7
    v29 = iadd_imm v28, 3
    v30 = iconst.i64 1
    call fn8(v11, v27, v29, v30)  ; v30 = 1
    v31 = load.i64 v11
    v32 = func_addr.i64 fn10
    v33 = iadd_imm v32, 3
    stack_store v12, ss0
    v34 = stack_addr.i64 ss0
    v35 = call fn11(v33, v34)
    v36 = stack_load.i64 ss0
    v37 = isub v12, v36
    v38 = load.i64 v31+8
    v39 = ishl_imm v38, 3
    v40 = iadd v39, v37
    v41 = ushr_imm v40, 3
    store v41, v31+8
    v42 = call fn9(v36, v31, v35, v11)
    v43 = load.i64 v42
    v44 = iadd_imm v42, 8
    v45 = sshr_imm v43, 1
    return v45
}


[main$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iadd_imm v0, 8
    store v3, v4
    v5 = load.i64 v1+8
    v6 = ishl_imm v5, 3
    v7 = iadd v0, v6
    v8 = load.i64 v1
    return_call_indirect sig0, v8(v7, v1, v4)
}


[main$__lambda_1__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = sshr_imm v2, 1
    v5 = sshr_imm v3, 1
    v6 = iadd v4, v5
    v7 = ishl_imm v6, 1
    v8 = ishl_imm v6, 1
    v9 = iconst.i64 2
    v10 = call fn0(v9)  ; v9 = 2
    store aligned v7, v10
    store aligned v8, v10+8
    v11 = iadd_imm v10, 1
    v12 = iadd_imm v0, 8
    store v11, v12
    v13 = load.i64 v1+8
    v14 = ishl_imm v13, 3
    v15 = iadd v0, v14
    v16 = load.i64 v1
    return_call_indirect sig1, v16(v15, v1, v12)
}


[main$__lambda_2__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = sshr_imm v2, 1
    v5 = sshr_imm v3, 1
    v6 = isub v4, v5
    v7 = ishl_imm v6, 1
    v8 = ishl_imm v6, 1
    v9 = iconst.i64 2
    v10 = call fn0(v9)  ; v9 = 2
    store aligned v7, v10
    store aligned v8, v10+8
    v11 = iadd_imm v10, 1
    v12 = iadd_imm v0, 8
    store v11, v12
    v13 = load.i64 v1+8
    v14 = ishl_imm v13, 3
    v15 = iadd v0, v14
    v16 = load.i64 v1
    return_call_indirect sig1, v16(v15, v1, v12)
}


[main$__lambda_3__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 2
    v4 = sshr_imm v2, 1
    v5 = imul v4, v3  ; v3 = 2
    v6 = ishl_imm v5, 1
    v7 = ishl_imm v5, 1
    v8 = iconst.i64 2
    v9 = call fn0(v8)  ; v8 = 2
    store aligned v6, v9
    store aligned v7, v9+8
    v10 = iadd_imm v9, 1
    v11 = iadd_imm v0, 0
    store v10, v11
    v12 = load.i64 v1+8
    v13 = ishl_imm v12, 3
    v14 = iadd v0, v13
    v15 = load.i64 v1
    return_call_indirect sig1, v15(v14, v1, v11)
}


[main$__lambda_4__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname1
    gv2 = symbol colocated userextname0
    gv3 = symbol colocated userextname1
    gv4 = symbol colocated userextname5
    gv5 = symbol colocated userextname1
    gv6 = symbol colocated userextname6
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64) -> i64 tail
    sig5 = (i64, i64) -> i64 tail
    sig6 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64) -> i64 tail
    sig9 = (i64, i64) -> i64 tail
    sig10 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig11 = (i64, i64) -> i64 tail
    sig12 = (i64, i64) -> i64 tail
    sig13 = (i64, i64) -> i64 tail
    sig14 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig15 = (i64, i64) -> i64 tail
    fn0 = colocated u0:14 sig0
    fn1 = colocated u0:17 sig1
    fn2 = u0:4 sig2
    fn3 = colocated u0:14 sig4
    fn4 = colocated u0:17 sig5
    fn5 = u0:4 sig6
    fn6 = colocated u0:14 sig8
    fn7 = colocated u0:17 sig9
    fn8 = u0:4 sig10
    fn9 = colocated u0:14 sig12
    fn10 = colocated u0:17 sig13
    fn11 = u0:4 sig14

block0(v0: i64, v1: i64):
    v2 = symbol_value.i64 gv0
    v3 = iadd_imm v2, 8
    v4 = iadd_imm v3, 3
    v5 = global_value.i64 gv1
    v6 = iadd_imm v5, 8
    v7 = iconst.i64 2
    v8 = ishl_imm v7, 1  ; v7 = 2
    v9 = iadd_imm v0, -8
    store aligned v8, v9
    v10 = iconst.i64 1
    v11 = func_addr.i64 fn0
    v12 = func_addr.i64 fn1
    v13 = iconst.i64 0
    v14 = call fn2(v4, v9, v6, v10, v11, v12, v13)  ; v10 = 1, v13 = 0
    v15 = load.i64 v14
    v16 = load.i64 v14+8
    v17 = load.i64 v14+16
    v18 = call_indirect sig3, v15(v16, v17)
    v19 = load.i64 v18
    v20 = iadd_imm v18, 8
    v21 = symbol_value.i64 gv2
    v22 = iadd_imm v21, 8
    v23 = iadd_imm v22, 3
    v24 = global_value.i64 gv3
    v25 = iadd_imm v24, 8
    v26 = iconst.i64 4
    v27 = ishl_imm v26, 1  ; v26 = 4
    v28 = iadd_imm v20, -8
    store aligned v27, v28
    v29 = iconst.i64 1
    v30 = func_addr.i64 fn3
    v31 = func_addr.i64 fn4
    v32 = iconst.i64 0
    v33 = call fn5(v23, v28, v25, v29, v30, v31, v32)  ; v29 = 1, v32 = 0
    v34 = load.i64 v33
    v35 = load.i64 v33+8
    v36 = load.i64 v33+16
    v37 = call_indirect sig7, v34(v35, v36)
    v38 = load.i64 v37
    v39 = iadd_imm v37, 8
    v40 = symbol_value.i64 gv4
    v41 = iadd_imm v40, 8
    v42 = iadd_imm v41, 3
    v43 = global_value.i64 gv5
    v44 = iadd_imm v43, 8
    v45 = iconst.i64 1
    v46 = ishl_imm v45, 1  ; v45 = 1
    v47 = iadd_imm v39, -8
    store aligned v46, v47
    v48 = iconst.i64 1
    v49 = func_addr.i64 fn6
    v50 = func_addr.i64 fn7
    v51 = iconst.i64 0
    v52 = call fn8(v42, v47, v44, v48, v49, v50, v51)  ; v48 = 1, v51 = 0
    v53 = load.i64 v52
    v54 = load.i64 v52+8
    v55 = load.i64 v52+16
    v56 = call_indirect sig11, v53(v54, v55)
    v57 = load.i64 v56
    v58 = iadd_imm v56, 8
    v59 = symbol_value.i64 gv6
    v60 = iadd_imm v59, 8
    v61 = iadd_imm v60, 3
    v62 = isub v0, v58
    v63 = load.i64 v1+8
    v64 = ishl_imm v63, 3
    v65 = iadd v64, v62
    v66 = ushr_imm v65, 3
    store v66, v1+8
    v67 = iconst.i64 0
    v68 = func_addr.i64 fn9
    v69 = func_addr.i64 fn10
    v70 = iconst.i64 1
    v71 = call fn11(v61, v58, v1, v67, v68, v69, v70)  ; v67 = 0, v70 = 1
    v72 = load.i64 v71
    v73 = load.i64 v71+8
    v74 = load.i64 v71+16
    return_call_indirect sig15, v72(v73, v74)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:20 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}
