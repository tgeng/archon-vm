CLIR
========
[call__specialized]
function u0:0(i64, i64, i64, i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname0
    gv2 = symbol colocated userextname0
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64) -> i64 tail
    sig5 = (i64, i64) -> i64 tail
    sig6 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64) -> i64 tail
    sig9 = (i64, i64) -> i64 tail
    sig10 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig11 = (i64, i64) -> i64 tail
    fn0 = colocated u0:14 sig0
    fn1 = colocated u0:17 sig1
    fn2 = u0:4 sig2
    fn3 = colocated u0:14 sig4
    fn4 = colocated u0:17 sig5
    fn5 = u0:4 sig6
    fn6 = colocated u0:14 sig8
    fn7 = colocated u0:17 sig9
    fn8 = u0:4 sig10

block0(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64):
    v5 = global_value.i64 gv0
    v6 = iadd_imm v5, 8
    v7 = ishl_imm v2, 1
    v8 = iadd_imm v0, -8
    store aligned v7, v8
    v9 = iconst.i64 1
    v10 = func_addr.i64 fn0
    v11 = func_addr.i64 fn1
    v12 = iconst.i64 0
    v13 = call fn2(v1, v12, v8, v6, v9, v10, v11)  ; v12 = 0, v9 = 1
    v14 = load.i64 v13
    v15 = load.i64 v13+8
    v16 = load.i64 v13+16
    v17 = call_indirect sig3, v14(v15, v16)
    v18 = load.i64 v17
    v19 = iadd_imm v17, 8
    v20 = global_value.i64 gv1
    v21 = iadd_imm v20, 8
    v22 = ishl_imm v3, 1
    v23 = iadd_imm v19, -8
    store aligned v22, v23
    v24 = iconst.i64 1
    v25 = func_addr.i64 fn3
    v26 = func_addr.i64 fn4
    v27 = iconst.i64 0
    v28 = call fn5(v1, v27, v23, v21, v24, v25, v26)  ; v27 = 0, v24 = 1
    v29 = load.i64 v28
    v30 = load.i64 v28+8
    v31 = load.i64 v28+16
    v32 = call_indirect sig7, v29(v30, v31)
    v33 = load.i64 v32
    v34 = iadd_imm v32, 8
    v35 = sshr_imm v18, 1
    v36 = sshr_imm v33, 1
    v37 = iadd v35, v36
    v38 = global_value.i64 gv2
    v39 = iadd_imm v38, 8
    v40 = ishl_imm v4, 1
    v41 = iadd_imm v34, -8
    store aligned v40, v41
    v42 = iconst.i64 1
    v43 = func_addr.i64 fn6
    v44 = func_addr.i64 fn7
    v45 = iconst.i64 0
    v46 = call fn8(v1, v45, v41, v39, v42, v43, v44)  ; v45 = 0, v42 = 1
    v47 = load.i64 v46
    v48 = load.i64 v46+8
    v49 = load.i64 v46+16
    v50 = call_indirect sig11, v47(v48, v49)
    v51 = load.i64 v50
    v52 = iadd_imm v50, 8
    v53 = sshr_imm v51, 1
    v54 = iadd v37, v53
    return v54
}


[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64) -> i64 tail
    sig5 = (i64, i64, i64, i64) apple_aarch64
    sig6 = (i64, i64, i64, i64) -> i64 tail
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64) -> i64 apple_aarch64
    fn0 = u0:0 sig0
    fn1 = colocated u0:22 sig1
    fn2 = colocated u0:19 sig2
    fn3 = u0:6 sig3
    fn4 = colocated u0:24 sig4
    fn5 = u0:7 sig5
    fn6 = u0:12 sig6
    fn7 = colocated u0:26 sig7
    fn8 = u0:1 sig8

block0(v0: i64):
    v1 = global_value.i64 gv0
    v2 = iadd_imm v1, 8
    v3 = iconst.i64 0
    v4 = call fn0(v3)  ; v3 = 0
    v5 = iadd_imm v4, 1
    v6 = iconst.i64 3
    v7 = iconst.i64 3
    v8 = func_addr.i64 fn1
    v9 = iadd_imm v8, 3
    v10 = func_addr.i64 fn2
    stack_store v0, ss0
    v11 = stack_addr.i64 ss0
    v12 = call fn3(v11, v2, v5, v6, v7, v9, v10)  ; v6 = 3, v7 = 3
    v13 = stack_load.i64 ss0
    v14 = load.i64 v12
    v15 = func_addr.i64 fn4
    v16 = iadd_imm v15, 3
    v17 = iconst.i64 2
    v18 = iconst.i64 0
    call fn5(v14, v16, v17, v18)  ; v17 = 2, v18 = 0
    v19 = load.i64 v14
    v20 = func_addr.i64 fn7
    v21 = iadd_imm v20, 3
    stack_store v13, ss0
    v22 = stack_addr.i64 ss0
    v23 = call fn8(v21, v22)
    v24 = stack_load.i64 ss0
    v25 = iadd_imm v12, 1
    v26 = iadd_imm v24, -8
    store aligned v25, v26
    v27 = isub v13, v26
    v28 = load.i64 v19+8
    v29 = ishl_imm v28, 3
    v30 = iadd v29, v27
    v31 = ushr_imm v30, 3
    store v31, v19+8
    v32 = call fn6(v26, v19, v23, v14)
    v33 = load.i64 v32
    v34 = iadd_imm v32, 8
    v35 = sshr_imm v33, 1
    return v35
}


[main$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iadd_imm v0, 8
    store v3, v4
    v5 = load.i64 v1+8
    v6 = ishl_imm v5, 3
    v7 = iadd v0, v6
    v8 = load.i64 v1
    return_call_indirect sig0, v8(v7, v1, v4)
}


[main$__lambda_1__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64) -> i64 apple_aarch64
    sig2 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = u0:0 sig1

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iconst.i64 2
    v5 = sshr_imm v3, 1
    v6 = imul v5, v4  ; v4 = 2
    v7 = iconst.i64 1
    v8 = ishl_imm v7, 1  ; v7 = 1
    v9 = ishl_imm v6, 1
    v10 = iconst.i64 2
    v11 = call fn0(v10)  ; v10 = 2
    store aligned v8, v11
    store aligned v9, v11+8
    v12 = iadd_imm v11, 1
    v13 = iconst.i64 2
    v14 = call fn1(v13)  ; v13 = 2
    store aligned v2, v14
    store aligned v12, v14+8
    v15 = iadd_imm v14, 1
    v16 = iadd_imm v0, 8
    store v15, v16
    v17 = load.i64 v1+8
    v18 = ishl_imm v17, 3
    v19 = iadd v0, v18
    v20 = load.i64 v1
    return_call_indirect sig2, v20(v19, v1, v16)
}


[main$__lambda_2__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64, i64, i64) -> i64 tail
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = colocated u0:20 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 1
    v4 = iconst.i64 2
    v5 = iconst.i64 3
    v6 = call fn0(v0, v2, v3, v4, v5)  ; v3 = 1, v4 = 2, v5 = 3
    v7 = ishl_imm v6, 1
    v8 = iadd_imm v0, 0
    store v7, v8
    v9 = load.i64 v1+8
    v10 = ishl_imm v9, 3
    v11 = iadd v0, v10
    v12 = load.i64 v1
    return_call_indirect sig1, v12(v11, v1, v8)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:21 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}
