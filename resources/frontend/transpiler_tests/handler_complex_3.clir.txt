CLIR
========
[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64, i64, i64) apple_aarch64
    sig5 = (i64, i64) -> i64 tail
    sig6 = (i64, i64, i64, i64) apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64, i64, i64) apple_aarch64
    sig9 = (i64, i64, i64, i64) -> i64 tail
    sig10 = (i64, i64) -> i64 tail
    sig11 = (i64, i64) -> i64 apple_aarch64
    sig12 = (i64, i64, i64) -> i64 apple_aarch64
    sig13 = (i64, i64, i64) -> i64 apple_aarch64
    fn0 = colocated u0:21 sig0
    fn1 = colocated u0:19 sig1
    fn2 = u0:6 sig2
    fn3 = colocated u0:23 sig3
    fn4 = u0:7 sig4
    fn5 = colocated u0:25 sig5
    fn6 = u0:7 sig6
    fn7 = colocated u0:27 sig7
    fn8 = u0:7 sig8
    fn9 = u0:12 sig9
    fn10 = colocated u0:29 sig10
    fn11 = u0:1 sig11
    fn12 = u0:3 sig12
    fn13 = u0:3 sig13

block0(v0: i64):
    v1 = global_value.i64 gv0
    v2 = iadd_imm v1, 8
    v3 = iconst.i64 0
    v4 = ishl_imm v3, 1  ; v3 = 0
    v5 = iconst.i64 3
    v6 = iconst.i64 3
    v7 = func_addr.i64 fn0
    v8 = iadd_imm v7, 3
    v9 = func_addr.i64 fn1
    stack_store v0, ss0
    v10 = stack_addr.i64 ss0
    v11 = call fn2(v10, v2, v4, v5, v6, v8, v9)  ; v5 = 3, v6 = 3
    v12 = stack_load.i64 ss0
    v13 = load.i64 v11
    v14 = func_addr.i64 fn3
    v15 = iadd_imm v14, 3
    v16 = iconst.i64 3
    v17 = iconst.i64 0
    call fn4(v13, v15, v16, v17)  ; v16 = 3, v17 = 0
    v18 = func_addr.i64 fn5
    v19 = iadd_imm v18, 3
    v20 = iconst.i64 3
    v21 = iconst.i64 1
    call fn6(v13, v19, v20, v21)  ; v20 = 3, v21 = 1
    v22 = func_addr.i64 fn7
    v23 = iadd_imm v22, 3
    v24 = iconst.i64 3
    v25 = iconst.i64 2
    call fn8(v13, v23, v24, v25)  ; v24 = 3, v25 = 2
    v26 = load.i64 v13
    v27 = iadd_imm v11, 1
    v28 = iadd_imm v12, -8
    store aligned v27, v28
    v29 = func_addr.i64 fn10
    v30 = iadd_imm v29, 3
    stack_store v28, ss0
    v31 = stack_addr.i64 ss0
    v32 = call fn11(v30, v31)
    v33 = stack_load.i64 ss0
    v34 = isub v12, v33
    v35 = load.i64 v26+8
    v36 = ishl_imm v35, 3
    v37 = iadd v36, v34
    v38 = ushr_imm v37, 3
    store v38, v26+8
    v39 = call fn12(v0, v33, v32)
    v40 = call fn9(v33, v26, v32, v13)
    v41 = call fn13(v0, v33, v40)
    v42 = load.i64 v40
    v43 = iadd_imm v40, 8
    v44 = sshr_imm v42, 1
    return v44
}


[main$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iadd_imm v0, 8
    store v3, v4
    v5 = load.i64 v1+8
    v6 = ishl_imm v5, 3
    v7 = iadd v0, v6
    v8 = load.i64 v1
    return_call_indirect sig0, v8(v7, v1, v4)
}


[main$__lambda_1__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64) -> i64 apple_aarch64
    fn0 = u0:1 sig0
    fn1 = %Memmove sig2

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = load.i64 v0+16
    v5 = sshr_imm v2, 1
    v6 = sshr_imm v3, 1
    v7 = iadd v5, v6
    v8 = iconst.i64 0
    v9 = ishl_imm v8, 1  ; v8 = 0
    v10 = ishl_imm v7, 1
    v11 = ishl_imm v7, 1
    v12 = iadd_imm v0, -8
    store aligned v11, v12
    v13 = iadd_imm v12, -8
    store aligned v10, v13
    v14 = iadd_imm v13, -8
    store aligned v9, v14
    stack_store v14, ss0
    v15 = stack_addr.i64 ss0
    v16 = call fn0(v4, v15)
    v17 = stack_load.i64 ss0
    v18 = iadd_imm v17, 24
    v19 = isub v0, v17
    v20 = call fn1(v18, v17, v19)
    v21 = isub v0, v18
    v22 = load.i64 v1+8
    v23 = ishl_imm v22, 3
    v24 = iadd v23, v21
    v25 = ushr_imm v24, 3
    store v25, v1+8
    return_call_indirect sig1, v16(v18, v1)
}


[main$__lambda_2__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64) -> i64 apple_aarch64
    fn0 = u0:1 sig0
    fn1 = %Memmove sig2

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = load.i64 v0+16
    v5 = sshr_imm v2, 1
    v6 = sshr_imm v3, 1
    v7 = isub v5, v6
    v8 = iconst.i64 0
    v9 = ishl_imm v8, 1  ; v8 = 0
    v10 = ishl_imm v7, 1
    v11 = ishl_imm v7, 1
    v12 = iadd_imm v0, -8
    store aligned v11, v12
    v13 = iadd_imm v12, -8
    store aligned v10, v13
    v14 = iadd_imm v13, -8
    store aligned v9, v14
    stack_store v14, ss0
    v15 = stack_addr.i64 ss0
    v16 = call fn0(v4, v15)
    v17 = stack_load.i64 ss0
    v18 = iadd_imm v17, 24
    v19 = isub v0, v17
    v20 = call fn1(v18, v17, v19)
    v21 = isub v0, v18
    v22 = load.i64 v1+8
    v23 = ishl_imm v22, 3
    v24 = iadd v23, v21
    v25 = ushr_imm v24, 3
    store v25, v1+8
    return_call_indirect sig1, v16(v18, v1)
}


[main$__lambda_3__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64) -> i64 apple_aarch64
    fn0 = u0:1 sig0
    fn1 = %Memmove sig2

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iconst.i64 2
    v5 = sshr_imm v2, 1
    v6 = imul v5, v4  ; v4 = 2
    v7 = iconst.i64 0
    v8 = ishl_imm v7, 1  ; v7 = 0
    v9 = ishl_imm v6, 1
    v10 = ishl_imm v6, 1
    v11 = iadd_imm v0, -8
    store aligned v10, v11
    v12 = iadd_imm v11, -8
    store aligned v9, v12
    v13 = iadd_imm v12, -8
    store aligned v8, v13
    stack_store v13, ss0
    v14 = stack_addr.i64 ss0
    v15 = call fn0(v3, v14)
    v16 = stack_load.i64 ss0
    v17 = iadd_imm v16, 16
    v18 = isub v0, v16
    v19 = call fn1(v17, v16, v18)
    v20 = isub v0, v17
    v21 = load.i64 v1+8
    v22 = ishl_imm v21, 3
    v23 = iadd v22, v20
    v24 = ushr_imm v23, 3
    store v24, v1+8
    return_call_indirect sig1, v15(v17, v1)
}


[main$__lambda_4__cps_impl]
function u0:0(i64, i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64) -> i64 tail
    sig5 = (i64, i64) -> i64 tail
    sig6 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64) -> i64 tail
    sig9 = (i64, i64) -> i64 tail
    sig10 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig11 = (i64, i64) -> i64 tail
    sig12 = (i64, i64, i64) -> i64 apple_aarch64
    sig13 = (i64, i64) -> i64 tail
    sig14 = (i64, i64) -> i64 tail
    sig15 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig16 = (i64, i64) -> i64 tail
    fn0 = colocated u0:14 sig0
    fn1 = colocated u0:17 sig1
    fn2 = u0:4 sig2
    fn3 = colocated u0:14 sig4
    fn4 = colocated u0:17 sig5
    fn5 = u0:4 sig6
    fn6 = colocated u0:14 sig8
    fn7 = colocated u0:17 sig9
    fn8 = u0:4 sig10
    fn9 = %Memmove sig12
    fn10 = colocated u0:14 sig13
    fn11 = colocated u0:17 sig14
    fn12 = u0:4 sig15

block0(v0: i64, v1: i64, v2: i64):
    v3 = load.i64 v1+24
    v4 = iadd_imm v1, 32
    v5 = iadd_imm v2, 8
    v6 = load.i64 v2
    v7 = icmp_imm ugt v3, 0xffff_ffff
    brif v7, block1, block5

block5:
    v8 = ireduce.i32 v3
    br_table v8, block1, [block1, block2, block3, block4]

block1:
    v9 = load.i64 v0
    v10 = iconst.i64 2
    v11 = ishl_imm v10, 1  ; v10 = 2
    v12 = iadd_imm.i64 v5, -8
    store aligned v11, v12
    v13 = isub.i64 v0, v12
    v14 = ushr_imm v13, 3
    store v14, v1+8
    v15 = iconst.i64 1
    store v15, v1+24  ; v15 = 1
    v16 = iconst.i64 1
    v17 = func_addr.i64 fn0
    v18 = func_addr.i64 fn1
    v19 = iconst.i64 0
    v20 = call fn2(v9, v19, v12, v1, v16, v17, v18)  ; v19 = 0, v16 = 1
    v21 = load.i64 v20
    v22 = load.i64 v20+8
    v23 = load.i64 v20+16
    return_call_indirect sig3, v21(v22, v23)

block2:
    v24 = load.i64 v0
    v25 = iconst.i64 4
    v26 = ishl_imm v25, 1  ; v25 = 4
    v27 = iadd_imm.i64 v5, -8
    store aligned v26, v27
    v28 = isub.i64 v0, v27
    v29 = ushr_imm v28, 3
    store v29, v1+8
    v30 = iconst.i64 2
    store v30, v1+24  ; v30 = 2
    store.i64 v6, v4
    v31 = iconst.i64 1
    v32 = func_addr.i64 fn3
    v33 = func_addr.i64 fn4
    v34 = iconst.i64 0
    v35 = call fn5(v24, v34, v27, v1, v31, v32, v33)  ; v34 = 0, v31 = 1
    v36 = load.i64 v35
    v37 = load.i64 v35+8
    v38 = load.i64 v35+16
    return_call_indirect sig7, v36(v37, v38)

block3:
    v39 = load.i64 v0
    v40 = iconst.i64 1
    v41 = ishl_imm v40, 1  ; v40 = 1
    v42 = iadd_imm.i64 v5, -8
    store aligned v41, v42
    v43 = isub.i64 v0, v42
    v44 = ushr_imm v43, 3
    store v44, v1+8
    v45 = iconst.i64 3
    store v45, v1+24  ; v45 = 3
    store.i64 v6, v4+8
    v46 = iconst.i64 1
    v47 = func_addr.i64 fn6
    v48 = func_addr.i64 fn7
    v49 = iconst.i64 1
    v50 = call fn8(v39, v49, v42, v1, v46, v47, v48)  ; v49 = 1, v46 = 1
    v51 = load.i64 v50
    v52 = load.i64 v50+8
    v53 = load.i64 v50+16
    return_call_indirect sig11, v51(v52, v53)

block4:
    v54 = load.i64 v0
    v55 = load.i64 v1+16
    v56 = iadd_imm.i64 v5, 8
    v57 = isub.i64 v0, v5
    v58 = call fn9(v56, v5, v57)
    v59 = isub.i64 v0, v56
    v60 = load.i64 v55+8
    v61 = ishl_imm v60, 3
    v62 = iadd v61, v59
    v63 = ushr_imm v62, 3
    store v63, v55+8
    v64 = iconst.i64 0
    v65 = func_addr.i64 fn10
    v66 = func_addr.i64 fn11
    v67 = iconst.i64 2
    v68 = call fn12(v54, v67, v56, v55, v64, v65, v66)  ; v67 = 2, v64 = 0
    v69 = load.i64 v68
    v70 = load.i64 v68+8
    v71 = load.i64 v68+16
    return_call_indirect sig16, v69(v70, v71)
}


[main$__lambda_4__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = colocated u0:30 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 56
    v3 = call fn0(v2)  ; v2 = 56
    v4 = func_addr.i64 fn1
    store v4, v3
    store v1, v3+16
    v5 = iadd_imm v0, -8
    return_call fn1(v0, v3, v5)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:20 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}
