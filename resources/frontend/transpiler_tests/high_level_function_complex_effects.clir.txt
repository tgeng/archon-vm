CLIR
========
[add__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = sshr_imm v2, 1
    v5 = sshr_imm v3, 1
    v6 = iadd v4, v5
    v7 = ishl_imm v6, 1
    v8 = iadd_imm v0, 8
    store v7, v8
    v9 = load.i64 v1+8
    v10 = ishl_imm v9, 3
    v11 = iadd v0, v10
    v12 = load.i64 v1
    return_call_indirect sig0, v12(v11, v1, v8)
}


[fold__cps_impl]
function u0:0(i64, i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64) -> i64 tail
    sig3 = (i64, i64, i64) -> i64 tail
    fn0 = u0:1 sig0
    fn1 = colocated u0:24 sig2

block0(v0: i64, v1: i64, v2: i64):
    v3 = load.i64 v1+24
    v4 = iadd_imm v1, 32
    v5 = iadd_imm v2, 8
    v6 = load.i64 v2
    v7 = icmp_imm eq v3, 2
    brif v7, block3, block7

block7:
    brif.i64 v3, block1, block1

block1:
    v8 = load.i64 v0+32
    v9 = load.i64 v0
    v10 = sshr_imm v8, 1
    v11 = sshr_imm v9, 1
    v12 = icmp slt v10, v11
    v13 = uextend.i32 v12
    br_table v13, block5, [block4, block2]

block2:
    v16 = load.i64 v0+8
    v17 = iadd_imm v16, -1
    v18 = sshr_imm.i64 v8, 1
    v19 = ishl_imm v18, 3
    v20 = iadd v17, v19
    v21 = load.i64 v20
    v22 = load.i64 v0+16
    v23 = iadd_imm.i64 v5, -8
    store aligned v21, v23
    v24 = iadd_imm v23, -8
    store aligned v22, v24
    v25 = load.i64 v0+24
    stack_store v24, ss0
    v26 = stack_addr.i64 ss0
    v27 = call fn0(v25, v26)
    v28 = stack_load.i64 ss0
    v29 = isub.i64 v0, v28
    v30 = ushr_imm v29, 3
    store v30, v1+8
    v31 = iconst.i64 2
    store v31, v1+24  ; v31 = 2
    v32 = ishl_imm.i8 v12, 1
    store v32, v4
    store v21, v4+8
    return_call_indirect sig1, v27(v28, v1)

block3:
    v33 = load.i64 v0+32
    v34 = iconst.i64 1
    v35 = sshr_imm v33, 1
    v36 = iadd v35, v34  ; v34 = 1
    v37 = load.i64 v0
    v38 = sshr_imm v37, 1
    v39 = load.i64 v0+8
    v40 = sshr_imm.i64 v6, 1
    v41 = load.i64 v0+24
    v42 = call fn1(v5, v38, v39, v40, v41, v36)
    jump block6(v42, v5)

block4:
    v43 = load.i64 v0+16
    v44 = sshr_imm v43, 1
    jump block6(v44, v5)

block5:
    trap unreachable

block6(v14: i64, v15: i64):
    v45 = ishl_imm v14, 1
    v46 = iadd_imm.i64 v0, 32
    store v45, v46
    v47 = load.i64 v1+16
    v48 = load.i64 v47+8
    v49 = ishl_imm v48, 3
    v50 = iadd.i64 v0, v49
    v51 = load.i64 v47
    return_call_indirect sig3, v51(v50, v47, v46)
}


[fold__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = colocated u0:23 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 64
    v3 = call fn0(v2)  ; v2 = 64
    v4 = func_addr.i64 fn1
    store v4, v3
    store v1, v3+16
    v5 = iadd_imm v0, -8
    return_call fn1(v0, v3, v5)
}


[fold__specialized]
function u0:0(i64, i64, i64, i64, i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = (i64, i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64) -> i64 tail
    fn0 = u0:1 sig0
    fn1 = colocated u0:24 sig2

block0(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64, v5: i64):
    v6 = icmp slt v5, v1
    v9 = uextend.i32 v6
    br_table v9, block4, [block3, block2]

block3:
    jump block1(v3, v0)

block2:
    v10 = iadd_imm.i64 v2, -1
    v11 = ishl_imm.i64 v5, 3
    v12 = iadd v10, v11
    v13 = load.i64 v12
    v14 = ishl_imm.i64 v3, 1
    v15 = iadd_imm.i64 v0, -8
    store aligned v13, v15
    v16 = iadd_imm v15, -8
    store aligned v14, v16
    v17 = global_value.i64 gv0
    v18 = iadd_imm v17, 8
    stack_store v16, ss0
    v19 = stack_addr.i64 ss0
    v20 = call fn0(v4, v19)
    v21 = stack_load.i64 ss0
    v22 = call_indirect sig1, v20(v21, v18)
    v23 = load.i64 v22
    v24 = iadd_imm v22, 8
    v25 = iconst.i64 1
    v26 = iadd.i64 v5, v25  ; v25 = 1
    v27 = sshr_imm v23, 1
    return_call fn1(v24, v1, v2, v27, v4, v26)

block4:
    trap unreachable

block1(v7: i64, v8: i64):
    return v7
}


[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64, i64, i64) -> i64 tail
    sig5 = (i64, i64) -> i64 tail
    sig6 = (i64) -> i64 apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64) -> i64 apple_aarch64
    sig9 = (i64, i64) -> i64 apple_aarch64
    fn0 = u0:0 sig0
    fn1 = colocated u0:26 sig1
    fn2 = colocated u0:19 sig2
    fn3 = u0:6 sig3
    fn4 = u0:12 sig4
    fn5 = colocated u0:22 sig5
    fn6 = u0:0 sig6
    fn7 = colocated u0:20 sig7
    fn8 = u0:0 sig8
    fn9 = u0:1 sig9

block0(v0: i64):
    v1 = global_value.i64 gv0
    v2 = iadd_imm v1, 8
    v3 = iconst.i64 0
    v4 = call fn0(v3)  ; v3 = 0
    v5 = iadd_imm v4, 1
    v6 = iconst.i64 3
    v7 = iconst.i64 3
    v8 = func_addr.i64 fn1
    v9 = iadd_imm v8, 3
    v10 = func_addr.i64 fn2
    stack_store v0, ss0
    v11 = stack_addr.i64 ss0
    v12 = call fn3(v11, v2, v5, v6, v7, v9, v10)  ; v6 = 3, v7 = 3
    v13 = stack_load.i64 ss0
    v14 = load.i64 v12
    v15 = func_addr.i64 fn5
    v16 = iconst.i64 5
    v17 = iadd_imm v15, 3
    v18 = iconst.i64 3
    v19 = ishl_imm v18, 1  ; v18 = 3
    v20 = iconst.i64 1
    v21 = ishl_imm v20, 1  ; v20 = 1
    v22 = iconst.i64 2
    v23 = ishl_imm v22, 1  ; v22 = 2
    v24 = iconst.i64 3
    v25 = ishl_imm v24, 1  ; v24 = 3
    v26 = iconst.i64 3
    v27 = call fn6(v26)  ; v26 = 3
    store aligned v21, v27
    store aligned v23, v27+8
    store aligned v25, v27+16
    v28 = iadd_imm v27, 1
    v29 = iconst.i64 10
    v30 = ishl_imm v29, 1  ; v29 = 10
    v31 = func_addr.i64 fn7
    v32 = iadd_imm v31, 3
    v33 = iconst.i64 0
    v34 = ishl_imm v33, 1  ; v33 = 0
    v35 = iconst.i64 7
    v36 = call fn8(v35)  ; v35 = 7
    store aligned v17, v36
    store aligned v16, v36+8  ; v16 = 5
    store aligned v19, v36+16
    store aligned v28, v36+24
    store aligned v30, v36+32
    store aligned v32, v36+40
    store aligned v34, v36+48
    v37 = iadd_imm v36, 1
    stack_store v13, ss0
    v38 = stack_addr.i64 ss0
    v39 = call fn9(v37, v38)
    v40 = stack_load.i64 ss0
    v41 = isub v13, v40
    v42 = load.i64 v14+8
    v43 = ishl_imm v42, 3
    v44 = iadd v43, v41
    v45 = ushr_imm v44, 3
    store v45, v14+8
    v46 = call fn4(v40, v14, v39, v12)
    v47 = load.i64 v46
    v48 = iadd_imm v46, 8
    v49 = sshr_imm v47, 1
    return v49
}


[main$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iadd_imm v0, 8
    store v3, v4
    v5 = load.i64 v1+8
    v6 = ishl_imm v5, 3
    v7 = iadd v0, v6
    v8 = load.i64 v1
    return_call_indirect sig0, v8(v7, v1, v4)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:25 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}
