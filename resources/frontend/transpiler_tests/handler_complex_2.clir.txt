CLIR
========
[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64) -> i64 tail
    sig4 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig5 = (i64, i64, i64) apple_aarch64
    sig6 = (i64, i64, i64) apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64, i64, i64) -> i64 tail
    sig9 = (i64, i64) -> i64 tail
    sig10 = (i64, i64) -> i64 apple_aarch64
    fn0 = colocated u0:22 sig0
    fn1 = colocated u0:24 sig1
    fn2 = colocated u0:26 sig2
    fn3 = colocated u0:20 sig3
    fn4 = u0:6 sig4
    fn5 = u0:7 sig5
    fn6 = u0:8 sig6
    fn7 = colocated u0:28 sig7
    fn8 = u0:13 sig8
    fn9 = colocated u0:30 sig9
    fn10 = u0:1 sig10

block0(v0: i64):
    v1 = global_value.i64 gv0
    v2 = iadd_imm v1, 8
    v3 = iconst.i64 2
    v4 = ishl_imm v3, 1  ; v3 = 2
    v5 = func_addr.i64 fn0
    v6 = iadd_imm v5, 3
    v7 = func_addr.i64 fn1
    v8 = iadd_imm v7, 3
    v9 = func_addr.i64 fn2
    v10 = iadd_imm v9, 3
    v11 = func_addr.i64 fn3
    stack_store v0, ss0
    v12 = stack_addr.i64 ss0
    v13 = call fn4(v12, v2, v4, v6, v8, v10, v11)
    v14 = stack_load.i64 ss0
    v15 = iconst.i64 11
    v16 = ishl_imm v15, 1  ; v15 = 11
    v17 = func_addr.i64 fn7
    v18 = iadd_imm v17, 3
    call fn6(v13, v16, v18)
    v19 = load.i64 v13
    v20 = func_addr.i64 fn9
    v21 = iadd_imm v20, 3
    stack_store v14, ss0
    v22 = stack_addr.i64 ss0
    v23 = call fn10(v21, v22)
    v24 = stack_load.i64 ss0
    v25 = isub v14, v24
    v26 = load.i64 v19+8
    v27 = ishl_imm v26, 3
    v28 = iadd v27, v25
    v29 = ushr_imm v28, 3
    store v29, v19+8
    v30 = call fn8(v24, v19, v23, v13)
    v31 = load.i64 v30
    v32 = iadd_imm v30, 8
    v33 = sshr_imm v31, 1
    return v33
}


[main$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 0
    v4 = call fn0(v3)  ; v3 = 0
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_1__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 2
    v4 = call fn0(v3)  ; v3 = 2
    store aligned v2, v4
    store aligned v2, v4+8
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_2__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = sshr_imm v3, 1
    v5 = sshr_imm v2, 1
    v6 = imul v4, v5
    v7 = ishl_imm v6, 1
    v8 = iadd_imm v0, 8
    store v7, v8
    v9 = load.i64 v1+8
    v10 = ishl_imm v9, 3
    v11 = iadd v0, v10
    v12 = load.i64 v1
    return_call_indirect sig0, v12(v11, v1, v8)
}


[main$__lambda_3__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64) -> i64 apple_aarch64
    fn0 = u0:1 sig0
    fn1 = %Memmove sig2

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = load.i64 v0+16
    v5 = sshr_imm v2, 1
    v6 = sshr_imm v3, 1
    v7 = imul v5, v6
    v8 = iconst.i64 0
    v9 = ishl_imm v8, 1  ; v8 = 0
    v10 = iconst.i64 3
    v11 = ishl_imm v10, 1  ; v10 = 3
    v12 = ishl_imm v7, 1
    v13 = iadd_imm v0, -8
    store aligned v12, v13
    v14 = iadd_imm v13, -8
    store aligned v11, v14
    v15 = iadd_imm v14, -8
    store aligned v9, v15
    stack_store v15, ss0
    v16 = stack_addr.i64 ss0
    v17 = call fn0(v4, v16)
    v18 = stack_load.i64 ss0
    v19 = iadd_imm v18, 24
    v20 = isub v0, v18
    v21 = call fn1(v19, v18, v20)
    v22 = isub v0, v19
    v23 = load.i64 v1+8
    v24 = ishl_imm v23, 3
    v25 = iadd v24, v22
    v26 = ushr_imm v25, 3
    store v26, v1+8
    return_call_indirect sig1, v17(v19, v1)
}


[main$__lambda_4__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 tail
    fn0 = colocated u0:15 sig0
    fn1 = colocated u0:18 sig1
    fn2 = u0:4 sig2

block0(v0: i64, v1: i64):
    v2 = iconst.i64 11
    v3 = ishl_imm v2, 1  ; v2 = 11
    v4 = iconst.i64 5
    v5 = ishl_imm v4, 1  ; v4 = 5
    v6 = iadd_imm v0, -8
    store aligned v5, v6
    v7 = isub v0, v6
    v8 = load.i64 v1+8
    v9 = ishl_imm v8, 3
    v10 = iadd v9, v7
    v11 = ushr_imm v10, 3
    store v11, v1+8
    v12 = iconst.i64 1
    v13 = func_addr.i64 fn0
    v14 = func_addr.i64 fn1
    v15 = iconst.i64 1
    v16 = call fn2(v3, v6, v1, v12, v13, v14, v15)  ; v12 = 1, v15 = 1
    v17 = load.i64 v16
    v18 = load.i64 v16+8
    v19 = load.i64 v16+16
    return_call_indirect sig3, v17(v18, v19)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:21 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}
