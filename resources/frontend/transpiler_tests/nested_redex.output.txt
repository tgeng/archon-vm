FTerm
========
Let {
    name: "a",
    t: Int {
        value: 1,
    },
    body: Defs {
        defs: [
            (
                "f",
                Def {
                    args: [
                        (
                            "x",
                            Uniform,
                        ),
                    ],
                    body: Redex {
                        function: Identifier {
                            name: "_int_add",
                            may_have_complex_effects: false,
                        },
                        args: [
                            Identifier {
                                name: "a",
                                may_have_complex_effects: false,
                            },
                            Identifier {
                                name: "x",
                                may_have_complex_effects: false,
                            },
                        ],
                    },
                    c_type: Default,
                },
            ),
        ],
        body: Some(
            Redex {
                function: Identifier {
                    name: "f",
                    may_have_complex_effects: false,
                },
                args: [
                    Int {
                        value: 2,
                    },
                ],
            },
        ),
    },
}

Defs
========
[
    (
        "f",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: PrimitiveCall {
                name: "_int_add",
                args: [
                    Var {
                        index: 0,
                    },
                    Var {
                        index: 1,
                    },
                ],
            },
            c_type: Default,
            var_bound: 2,
            may_be_simple: true,
            may_be_complex: false,
            may_be_specialized: false,
        },
    ),
    (
        "main",
        FunctionDefinition {
            args: [],
            body: Let {
                t: Return {
                    value: Int {
                        value: 1,
                    },
                },
                bound_index: 0,
                body: Redex {
                    function: Def {
                        name: "f",
                        may_have_complex_effects: false,
                    },
                    args: [
                        Var {
                            index: 0,
                        },
                        Int {
                            value: 2,
                        },
                    ],
                },
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 1,
            may_be_simple: false,
            may_be_complex: false,
            may_be_specialized: true,
        },
    ),
]

CLIR
========
[f__simple]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8

block0(v0: i64):
    v1 = load.i64 v0
    v2 = load.i64 v0+8
    v3 = sshr_imm v1, 1
    v4 = sshr_imm v2, 1
    v5 = iadd v3, v4
    v6 = ishl_imm v5, 1
    v7 = iadd_imm v0, 8
    store v6, v7
    return v7
}


[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 tail
    fn0 = colocated u0:17 sig0

block0(v0: i64):
    v1 = iconst.i64 1
    v2 = ishl_imm v1, 1  ; v1 = 1
    v3 = iconst.i64 2
    v4 = ishl_imm v3, 1  ; v3 = 2
    v5 = iadd_imm v0, -8
    store aligned v4, v5
    v6 = iadd_imm v5, -8
    store aligned v2, v6
    v7 = call fn0(v6)
    v8 = load.i64 v7
    v9 = iadd_imm v7, 8
    v10 = sshr_imm v8, 1
    return v10
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:18 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}


Result
========
3