FTerm
========
Handler {
    parameter: Int {
        value: 0,
    },
    parameter_disposer: Lambda {
        arg_names: [
            (
                "_",
                Uniform,
            ),
        ],
        body: Struct {
            values: [],
        },
        effect: Basic,
    },
    parameter_replicator: Lambda {
        arg_names: [
            (
                "p",
                Uniform,
            ),
        ],
        body: Struct {
            values: [
                Identifier {
                    name: "p",
                    effect: Basic,
                },
                Identifier {
                    name: "p",
                    effect: Basic,
                },
            ],
        },
        effect: Basic,
    },
    transform: Lambda {
        arg_names: [
            (
                "p",
                Uniform,
            ),
            (
                "r",
                Uniform,
            ),
        ],
        body: Identifier {
            name: "r",
            effect: Basic,
        },
        effect: Basic,
    },
    simple_handlers: [
        (
            Str {
                value: "accumulate",
            },
            Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                    (
                        "x",
                        Uniform,
                    ),
                ],
                body: Let {
                    name: "r",
                    t: Redex {
                        function: Identifier {
                            name: "_int_add",
                            effect: Basic,
                        },
                        args: [
                            Identifier {
                                name: "p",
                                effect: Basic,
                            },
                            Identifier {
                                name: "x",
                                effect: Basic,
                            },
                        ],
                    },
                    body: Struct {
                        values: [
                            Identifier {
                                name: "r",
                                effect: Basic,
                            },
                            Struct {
                                values: [
                                    Int {
                                        value: 1,
                                    },
                                    Identifier {
                                        name: "r",
                                        effect: Basic,
                                    },
                                ],
                            },
                        ],
                    },
                },
                effect: Basic,
            },
        ),
        (
            Str {
                value: "dissipate",
            },
            Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                    (
                        "x",
                        Uniform,
                    ),
                ],
                body: Let {
                    name: "r",
                    t: Redex {
                        function: Identifier {
                            name: "_int_sub",
                            effect: Basic,
                        },
                        args: [
                            Identifier {
                                name: "p",
                                effect: Basic,
                            },
                            Identifier {
                                name: "x",
                                effect: Basic,
                            },
                        ],
                    },
                    body: Struct {
                        values: [
                            Identifier {
                                name: "r",
                                effect: Basic,
                            },
                            Struct {
                                values: [
                                    Int {
                                        value: 1,
                                    },
                                    Identifier {
                                        name: "r",
                                        effect: Basic,
                                    },
                                ],
                            },
                        ],
                    },
                },
                effect: Basic,
            },
        ),
        (
            Str {
                value: "proliferate",
            },
            Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                ],
                body: Let {
                    name: "r",
                    t: Redex {
                        function: Identifier {
                            name: "_int_mul",
                            effect: Basic,
                        },
                        args: [
                            Identifier {
                                name: "p",
                                effect: Basic,
                            },
                            Int {
                                value: 2,
                            },
                        ],
                    },
                    body: Struct {
                        values: [
                            Identifier {
                                name: "r",
                                effect: Basic,
                            },
                            Struct {
                                values: [
                                    Int {
                                        value: 1,
                                    },
                                    Identifier {
                                        name: "r",
                                        effect: Basic,
                                    },
                                ],
                            },
                        ],
                    },
                },
                effect: Basic,
            },
        ),
    ],
    complex_handlers: [],
    input: Thunk {
        computation: Let {
            name: "_",
            t: OperationCall {
                eff: Str {
                    value: "accumulate",
                },
                args: [
                    Int {
                        value: 2,
                    },
                ],
                effect: Simple,
            },
            body: Let {
                name: "_",
                t: OperationCall {
                    eff: Str {
                        value: "accumulate",
                    },
                    args: [
                        Int {
                            value: 4,
                        },
                    ],
                    effect: Simple,
                },
                body: Let {
                    name: "_",
                    t: OperationCall {
                        eff: Str {
                            value: "dissipate",
                        },
                        args: [
                            Int {
                                value: 1,
                            },
                        ],
                        effect: Simple,
                    },
                    body: OperationCall {
                        eff: Str {
                            value: "proliferate",
                        },
                        args: [],
                        effect: Simple,
                    },
                },
            },
        },
        effect: Basic,
    },
}

Defs
========
[
    (
        "main",
        FunctionDefinition {
            args: [],
            body: Handler {
                parameter: Int {
                    value: 0,
                },
                parameter_disposer: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_0",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
                parameter_replicator: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_1",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
                transform: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_2",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
                complex_handlers: [],
                simple_handlers: [
                    (
                        Str {
                            value: "accumulate",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_3",
                                    effect: Basic,
                                },
                                args: [],
                            },
                            effect: Basic,
                        },
                    ),
                    (
                        Str {
                            value: "dissipate",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_4",
                                    effect: Basic,
                                },
                                args: [],
                            },
                            effect: Basic,
                        },
                    ),
                    (
                        Str {
                            value: "proliferate",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_5",
                                    effect: Basic,
                                },
                                args: [],
                            },
                            effect: Basic,
                        },
                    ),
                ],
                input: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_6",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 0,
            may_be_simple: false,
            may_be_complex: false,
            may_be_specialized: true,
        },
    ),
    (
        "main$__lambda_0",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [],
                },
            },
            c_type: Default,
            var_bound: 1,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_1",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 0,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 1,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_2",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Return {
                value: Var {
                    index: 1,
                },
            },
            c_type: Default,
            var_bound: 2,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_3",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Let {
                t: PrimitiveCall {
                    name: "_int_add",
                    args: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 1,
                        },
                    ],
                },
                bound_index: 2,
                body: Return {
                    value: Struct {
                        values: [
                            Var {
                                index: 2,
                            },
                            Struct {
                                values: [
                                    Int {
                                        value: 1,
                                    },
                                    Var {
                                        index: 2,
                                    },
                                ],
                            },
                        ],
                    },
                },
            },
            c_type: Default,
            var_bound: 3,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_4",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Let {
                t: PrimitiveCall {
                    name: "_int_sub",
                    args: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 1,
                        },
                    ],
                },
                bound_index: 2,
                body: Return {
                    value: Struct {
                        values: [
                            Var {
                                index: 2,
                            },
                            Struct {
                                values: [
                                    Int {
                                        value: 1,
                                    },
                                    Var {
                                        index: 2,
                                    },
                                ],
                            },
                        ],
                    },
                },
            },
            c_type: Default,
            var_bound: 3,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_5",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Let {
                t: PrimitiveCall {
                    name: "_int_mul",
                    args: [
                        Var {
                            index: 0,
                        },
                        Int {
                            value: 2,
                        },
                    ],
                },
                bound_index: 1,
                body: Return {
                    value: Struct {
                        values: [
                            Var {
                                index: 1,
                            },
                            Struct {
                                values: [
                                    Int {
                                        value: 1,
                                    },
                                    Var {
                                        index: 1,
                                    },
                                ],
                            },
                        ],
                    },
                },
            },
            c_type: Default,
            var_bound: 2,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_6",
        FunctionDefinition {
            args: [],
            body: Let {
                t: OperationCall {
                    eff: Str {
                        value: "accumulate",
                    },
                    args: [
                        Int {
                            value: 2,
                        },
                    ],
                    effect: Simple,
                },
                bound_index: 0,
                body: Let {
                    t: OperationCall {
                        eff: Str {
                            value: "accumulate",
                        },
                        args: [
                            Int {
                                value: 4,
                            },
                        ],
                        effect: Simple,
                    },
                    bound_index: 1,
                    body: Let {
                        t: OperationCall {
                            eff: Str {
                                value: "dissipate",
                            },
                            args: [
                                Int {
                                    value: 1,
                                },
                            ],
                            effect: Simple,
                        },
                        bound_index: 2,
                        body: OperationCall {
                            eff: Str {
                                value: "proliferate",
                            },
                            args: [],
                            effect: Simple,
                        },
                    },
                },
            },
            c_type: Default,
            var_bound: 3,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
]

CLIR
========
[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname7
    gv1 = symbol colocated userextname9
    gv2 = symbol colocated userextname11
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64, i64) -> i64 tail
    sig5 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig6 = (i64, i64, i64) apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64) -> i64 tail
    sig9 = (i64, i64) -> i64 tail
    sig10 = (i64, i64, i64) apple_aarch64
    sig11 = (i64, i64, i64, i64) -> i64 tail
    sig12 = (i64, i64) -> i64 tail
    sig13 = (i64, i64) -> i64 apple_aarch64
    fn0 = colocated u0:14 sig0
    fn1 = colocated u0:23 sig1
    fn2 = colocated u0:25 sig2
    fn3 = colocated u0:27 sig3
    fn4 = colocated u0:20 sig4
    fn5 = u0:6 sig5
    fn6 = u0:7 sig6
    fn7 = colocated u0:29 sig7
    fn8 = colocated u0:31 sig8
    fn9 = colocated u0:33 sig9
    fn10 = u0:8 sig10
    fn11 = u0:13 sig11
    fn12 = colocated u0:35 sig12
    fn13 = u0:1 sig13

block0(v0: i64):
    v1 = call fn0()
    v2 = iconst.i64 0
    v3 = ishl_imm v2, 1  ; v2 = 0
    v4 = func_addr.i64 fn1
    v5 = iadd_imm v4, 3
    v6 = func_addr.i64 fn2
    v7 = iadd_imm v6, 3
    v8 = func_addr.i64 fn3
    v9 = iadd_imm v8, 3
    v10 = func_addr.i64 fn4
    stack_store v0, ss0
    v11 = stack_addr.i64 ss0
    v12 = call fn5(v11, v1, v3, v5, v7, v9, v10)
    v13 = stack_load.i64 ss0
    v14 = symbol_value.i64 gv0
    v15 = iadd_imm v14, 8
    v16 = iadd_imm v15, 3
    v17 = func_addr.i64 fn7
    v18 = iadd_imm v17, 3
    call fn6(v12, v16, v18)
    v19 = symbol_value.i64 gv1
    v20 = iadd_imm v19, 8
    v21 = iadd_imm v20, 3
    v22 = func_addr.i64 fn8
    v23 = iadd_imm v22, 3
    call fn6(v12, v21, v23)
    v24 = symbol_value.i64 gv2
    v25 = iadd_imm v24, 8
    v26 = iadd_imm v25, 3
    v27 = func_addr.i64 fn9
    v28 = iadd_imm v27, 3
    call fn6(v12, v26, v28)
    v29 = load.i64 v12
    v30 = func_addr.i64 fn12
    v31 = iadd_imm v30, 3
    stack_store v13, ss0
    v32 = stack_addr.i64 ss0
    v33 = call fn13(v31, v32)
    v34 = stack_load.i64 ss0
    v35 = call fn11(v34, v29, v33, v12)
    v36 = load.i64 v35
    v37 = iadd_imm v35, 8
    v38 = sshr_imm v36, 1
    return v38
}


[main$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 0
    v4 = call fn0(v3)  ; v3 = 0
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_1__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 2
    v4 = call fn0(v3)  ; v3 = 2
    store aligned v2, v4
    store aligned v2, v4+8
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_2__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iadd_imm v0, 8
    store v3, v4
    v5 = load.i64 v1+8
    v6 = ishl_imm v5, 3
    v7 = iadd v0, v6
    v8 = load.i64 v1
    return_call_indirect sig0, v8(v7, v1, v4)
}


[main$__lambda_3__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64) -> i64 apple_aarch64
    sig2 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = u0:0 sig1

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = sshr_imm v2, 1
    v5 = sshr_imm v3, 1
    v6 = iadd v4, v5
    v7 = ishl_imm v6, 1
    v8 = iconst.i64 1
    v9 = ishl_imm v8, 1  ; v8 = 1
    v10 = ishl_imm v6, 1
    v11 = iconst.i64 2
    v12 = call fn0(v11)  ; v11 = 2
    store aligned v9, v12
    store aligned v10, v12+8
    v13 = iadd_imm v12, 1
    v14 = iconst.i64 2
    v15 = call fn1(v14)  ; v14 = 2
    store aligned v7, v15
    store aligned v13, v15+8
    v16 = iadd_imm v15, 1
    v17 = iadd_imm v0, 8
    store v16, v17
    v18 = load.i64 v1+8
    v19 = ishl_imm v18, 3
    v20 = iadd v0, v19
    v21 = load.i64 v1
    return_call_indirect sig2, v21(v20, v1, v17)
}


[main$__lambda_4__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64) -> i64 apple_aarch64
    sig2 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = u0:0 sig1

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = sshr_imm v2, 1
    v5 = sshr_imm v3, 1
    v6 = isub v4, v5
    v7 = ishl_imm v6, 1
    v8 = iconst.i64 1
    v9 = ishl_imm v8, 1  ; v8 = 1
    v10 = ishl_imm v6, 1
    v11 = iconst.i64 2
    v12 = call fn0(v11)  ; v11 = 2
    store aligned v9, v12
    store aligned v10, v12+8
    v13 = iadd_imm v12, 1
    v14 = iconst.i64 2
    v15 = call fn1(v14)  ; v14 = 2
    store aligned v7, v15
    store aligned v13, v15+8
    v16 = iadd_imm v15, 1
    v17 = iadd_imm v0, 8
    store v16, v17
    v18 = load.i64 v1+8
    v19 = ishl_imm v18, 3
    v20 = iadd v0, v19
    v21 = load.i64 v1
    return_call_indirect sig2, v21(v20, v1, v17)
}


[main$__lambda_5__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64) -> i64 apple_aarch64
    sig2 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = u0:0 sig1

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 2
    v4 = sshr_imm v2, 1
    v5 = imul v4, v3  ; v3 = 2
    v6 = ishl_imm v5, 1
    v7 = iconst.i64 1
    v8 = ishl_imm v7, 1  ; v7 = 1
    v9 = ishl_imm v5, 1
    v10 = iconst.i64 2
    v11 = call fn0(v10)  ; v10 = 2
    store aligned v8, v11
    store aligned v9, v11+8
    v12 = iadd_imm v11, 1
    v13 = iconst.i64 2
    v14 = call fn1(v13)  ; v13 = 2
    store aligned v6, v14
    store aligned v12, v14+8
    v15 = iadd_imm v14, 1
    v16 = iadd_imm v0, 0
    store v15, v16
    v17 = load.i64 v1+8
    v18 = ishl_imm v17, 3
    v19 = iadd v0, v18
    v20 = load.i64 v1
    return_call_indirect sig2, v20(v19, v1, v16)
}


[main$__lambda_6__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname0
    gv2 = symbol colocated userextname5
    gv3 = symbol colocated userextname6
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64) -> i64 tail
    sig5 = () -> i64 apple_aarch64
    sig6 = (i64, i64) -> i64 tail
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig9 = (i64, i64) -> i64 tail
    sig10 = () -> i64 apple_aarch64
    sig11 = (i64, i64) -> i64 tail
    sig12 = (i64, i64) -> i64 tail
    sig13 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig14 = (i64, i64) -> i64 tail
    sig15 = (i64, i64) -> i64 tail
    sig16 = (i64, i64) -> i64 tail
    sig17 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig18 = (i64, i64) -> i64 tail
    fn0 = colocated u0:14 sig0
    fn1 = colocated u0:16 sig1
    fn2 = colocated u0:18 sig2
    fn3 = u0:4 sig3
    fn4 = colocated u0:14 sig5
    fn5 = colocated u0:16 sig6
    fn6 = colocated u0:18 sig7
    fn7 = u0:4 sig8
    fn8 = colocated u0:14 sig10
    fn9 = colocated u0:16 sig11
    fn10 = colocated u0:18 sig12
    fn11 = u0:4 sig13
    fn12 = colocated u0:16 sig15
    fn13 = colocated u0:18 sig16
    fn14 = u0:4 sig17

block0(v0: i64, v1: i64):
    v2 = symbol_value.i64 gv0
    v3 = iadd_imm v2, 8
    v4 = iadd_imm v3, 3
    v5 = call fn0()
    v6 = iconst.i64 2
    v7 = ishl_imm v6, 1  ; v6 = 2
    v8 = iadd_imm v0, -8
    store aligned v7, v8
    v9 = iconst.i64 1
    v10 = func_addr.i64 fn1
    v11 = func_addr.i64 fn2
    v12 = iconst.i64 0
    v13 = call fn3(v4, v8, v5, v9, v10, v11, v12)  ; v9 = 1, v12 = 0
    v14 = load.i64 v13
    v15 = load.i64 v13+8
    v16 = load.i64 v13+16
    v17 = call_indirect sig4, v14(v15, v16)
    v18 = load.i64 v17
    v19 = iadd_imm v17, 8
    v20 = symbol_value.i64 gv1
    v21 = iadd_imm v20, 8
    v22 = iadd_imm v21, 3
    v23 = call fn4()
    v24 = iconst.i64 4
    v25 = ishl_imm v24, 1  ; v24 = 4
    v26 = iadd_imm v19, -8
    store aligned v25, v26
    v27 = iconst.i64 1
    v28 = func_addr.i64 fn5
    v29 = func_addr.i64 fn6
    v30 = iconst.i64 0
    v31 = call fn7(v22, v26, v23, v27, v28, v29, v30)  ; v27 = 1, v30 = 0
    v32 = load.i64 v31
    v33 = load.i64 v31+8
    v34 = load.i64 v31+16
    v35 = call_indirect sig9, v32(v33, v34)
    v36 = load.i64 v35
    v37 = iadd_imm v35, 8
    v38 = symbol_value.i64 gv2
    v39 = iadd_imm v38, 8
    v40 = iadd_imm v39, 3
    v41 = call fn8()
    v42 = iconst.i64 1
    v43 = ishl_imm v42, 1  ; v42 = 1
    v44 = iadd_imm v37, -8
    store aligned v43, v44
    v45 = iconst.i64 1
    v46 = func_addr.i64 fn9
    v47 = func_addr.i64 fn10
    v48 = iconst.i64 0
    v49 = call fn11(v40, v44, v41, v45, v46, v47, v48)  ; v45 = 1, v48 = 0
    v50 = load.i64 v49
    v51 = load.i64 v49+8
    v52 = load.i64 v49+16
    v53 = call_indirect sig14, v50(v51, v52)
    v54 = load.i64 v53
    v55 = iadd_imm v53, 8
    v56 = symbol_value.i64 gv3
    v57 = iadd_imm v56, 8
    v58 = iadd_imm v57, 3
    v59 = load.i64 v1+8
    v60 = ishl_imm v59, 3
    v61 = iadd v0, v60
    v62 = isub v61, v55
    v63 = ushr_imm v62, 3
    store v63, v1+8
    v64 = iconst.i64 0
    v65 = func_addr.i64 fn12
    v66 = func_addr.i64 fn13
    v67 = iconst.i64 1
    v68 = call fn14(v58, v55, v1, v64, v65, v66, v67)  ; v64 = 0, v67 = 1
    v69 = load.i64 v68
    v70 = load.i64 v68+8
    v71 = load.i64 v68+16
    return_call_indirect sig18, v69(v70, v71)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:22 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}


Result
========
10