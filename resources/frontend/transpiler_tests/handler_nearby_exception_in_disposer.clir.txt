CLIR
========
[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname7
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64) -> i64 tail
    sig4 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig5 = (i64, i64, i64) apple_aarch64
    sig6 = (i64, i64) -> i64 tail
    sig7 = (i64, i64, i64) apple_aarch64
    sig8 = (i64, i64, i64, i64) -> i64 tail
    sig9 = (i64, i64) -> i64 tail
    sig10 = (i64, i64) -> i64 apple_aarch64
    fn0 = colocated u0:22 sig0
    fn1 = colocated u0:24 sig1
    fn2 = colocated u0:40 sig2
    fn3 = colocated u0:20 sig3
    fn4 = u0:6 sig4
    fn5 = u0:7 sig5
    fn6 = colocated u0:42 sig6
    fn7 = u0:8 sig7
    fn8 = u0:13 sig8
    fn9 = colocated u0:38 sig9
    fn10 = u0:1 sig10

block0(v0: i64):
    v1 = global_value.i64 gv0
    v2 = iadd_imm v1, 8
    v3 = iconst.i64 1
    v4 = ishl_imm v3, 1  ; v3 = 1
    v5 = func_addr.i64 fn0
    v6 = iadd_imm v5, 3
    v7 = func_addr.i64 fn1
    v8 = iadd_imm v7, 3
    v9 = func_addr.i64 fn2
    v10 = iadd_imm v9, 3
    v11 = func_addr.i64 fn3
    stack_store v0, ss0
    v12 = stack_addr.i64 ss0
    v13 = call fn4(v12, v2, v4, v6, v8, v10, v11)
    v14 = stack_load.i64 ss0
    v15 = symbol_value.i64 gv1
    v16 = iadd_imm v15, 8
    v17 = iadd_imm v16, 3
    v18 = func_addr.i64 fn6
    v19 = iadd_imm v18, 3
    call fn5(v13, v17, v19)
    v20 = load.i64 v13
    v21 = func_addr.i64 fn9
    v22 = iadd_imm v21, 3
    stack_store v14, ss0
    v23 = stack_addr.i64 ss0
    v24 = call fn10(v22, v23)
    v25 = stack_load.i64 ss0
    v26 = isub v14, v25
    v27 = load.i64 v20+8
    v28 = ishl_imm v27, 3
    v29 = iadd v28, v26
    v30 = ushr_imm v29, 3
    store v30, v20+8
    v31 = call fn8(v25, v20, v24, v13)
    v32 = load.i64 v31
    v33 = iadd_imm v31, 8
    v34 = sshr_imm v32, 1
    return v34
}


[main$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 0
    v4 = call fn0(v3)  ; v3 = 0
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_1__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 2
    v4 = call fn0(v3)  ; v3 = 2
    store aligned v2, v4
    store aligned v2, v4+8
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_10__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iadd_imm v0, 8
    store v3, v4
    v5 = load.i64 v1+8
    v6 = ishl_imm v5, 3
    v7 = iadd v0, v6
    v8 = load.i64 v1
    return_call_indirect sig0, v8(v7, v1, v4)
}


[main$__lambda_11__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname1
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64) -> i64 apple_aarch64
    sig5 = (i64) -> i64 apple_aarch64
    sig6 = (i64, i64, i64) -> i64 tail
    fn0 = colocated u0:15 sig0
    fn1 = colocated u0:18 sig1
    fn2 = u0:4 sig2
    fn3 = u0:0 sig4
    fn4 = u0:0 sig5

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = symbol_value.i64 gv0
    v5 = iadd_imm v4, 8
    v6 = iadd_imm v5, 3
    v7 = global_value.i64 gv1
    v8 = iadd_imm v7, 8
    v9 = iconst.i64 3
    v10 = ishl_imm v9, 1  ; v9 = 3
    v11 = iadd_imm v0, -8
    store aligned v10, v11
    v12 = iconst.i64 1
    v13 = func_addr.i64 fn0
    v14 = func_addr.i64 fn1
    v15 = iconst.i64 0
    v16 = call fn2(v6, v11, v8, v12, v13, v14, v15)  ; v12 = 1, v15 = 0
    v17 = load.i64 v16
    v18 = load.i64 v16+8
    v19 = load.i64 v16+16
    v20 = call_indirect sig3, v17(v18, v19)
    v21 = load.i64 v20
    v22 = iadd_imm v20, 8
    v23 = iconst.i64 0
    v24 = ishl_imm v23, 1  ; v23 = 0
    v25 = iconst.i64 2
    v26 = call fn3(v25)  ; v25 = 2
    store aligned v24, v26
    store aligned v3, v26+8
    v27 = iadd_imm v26, 1
    v28 = iconst.i64 2
    v29 = call fn4(v28)  ; v28 = 2
    store aligned v2, v29
    store aligned v27, v29+8
    v30 = iadd_imm v29, 1
    v31 = iadd_imm v0, 8
    store v30, v31
    v32 = load.i64 v1+8
    v33 = ishl_imm v32, 3
    v34 = iadd v0, v33
    v35 = load.i64 v1
    return_call_indirect sig6, v35(v34, v1, v31)
}


[main$__lambda_12__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname1
    gv2 = symbol colocated userextname5
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64, i64) -> i64 apple_aarch64
    sig5 = (i64, i64) -> i64 tail
    sig6 = (i64, i64) -> i64 tail
    sig7 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig8 = (i64, i64) -> i64 tail
    fn0 = colocated u0:15 sig0
    fn1 = colocated u0:18 sig1
    fn2 = u0:4 sig2
    fn3 = %Memmove sig4
    fn4 = colocated u0:15 sig5
    fn5 = colocated u0:18 sig6
    fn6 = u0:4 sig7

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = symbol_value.i64 gv0
    v4 = iadd_imm v3, 8
    v5 = iadd_imm v4, 3
    v6 = global_value.i64 gv1
    v7 = iadd_imm v6, 8
    v8 = iconst.i64 5
    v9 = ishl_imm v8, 1  ; v8 = 5
    v10 = iadd_imm v0, -8
    store aligned v9, v10
    v11 = iconst.i64 1
    v12 = func_addr.i64 fn0
    v13 = func_addr.i64 fn1
    v14 = iconst.i64 0
    v15 = call fn2(v5, v10, v7, v11, v12, v13, v14)  ; v11 = 1, v14 = 0
    v16 = load.i64 v15
    v17 = load.i64 v15+8
    v18 = load.i64 v15+16
    v19 = call_indirect sig3, v16(v17, v18)
    v20 = load.i64 v19
    v21 = iadd_imm v19, 8
    v22 = symbol_value.i64 gv2
    v23 = iadd_imm v22, 8
    v24 = iadd_imm v23, 3
    v25 = iconst.i64 2
    v26 = ishl_imm v25, 1  ; v25 = 2
    v27 = iadd_imm v21, -8
    store aligned v26, v27
    v28 = iadd_imm v27, 8
    v29 = isub v0, v27
    v30 = call fn3(v28, v27, v29)
    v31 = isub v0, v28
    v32 = load.i64 v1+8
    v33 = ishl_imm v32, 3
    v34 = iadd v33, v31
    v35 = ushr_imm v34, 3
    store v35, v1+8
    v36 = iconst.i64 1
    v37 = func_addr.i64 fn4
    v38 = func_addr.i64 fn5
    v39 = iconst.i64 1
    v40 = call fn6(v24, v28, v1, v36, v37, v38, v39)  ; v36 = 1, v39 = 1
    v41 = load.i64 v40
    v42 = load.i64 v40+8
    v43 = load.i64 v40+16
    return_call_indirect sig8, v41(v42, v43)
}


[main$__lambda_15__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname1
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64, i64) -> i64 tail
    fn0 = colocated u0:15 sig0
    fn1 = colocated u0:18 sig1
    fn2 = u0:4 sig2

block0(v0: i64, v1: i64):
    v2 = symbol_value.i64 gv0
    v3 = iadd_imm v2, 8
    v4 = iadd_imm v3, 3
    v5 = global_value.i64 gv1
    v6 = iadd_imm v5, 8
    v7 = iconst.i64 1
    v8 = ishl_imm v7, 1  ; v7 = 1
    v9 = iadd_imm v0, -8
    store aligned v8, v9
    v10 = iconst.i64 1
    v11 = func_addr.i64 fn0
    v12 = func_addr.i64 fn1
    v13 = iconst.i64 0
    v14 = call fn2(v4, v9, v6, v10, v11, v12, v13)  ; v10 = 1, v13 = 0
    v15 = load.i64 v14
    v16 = load.i64 v14+8
    v17 = load.i64 v14+16
    v18 = call_indirect sig3, v15(v16, v17)
    v19 = load.i64 v18
    v20 = iadd_imm v18, 8
    v21 = iconst.i64 0
    v22 = ishl_imm v21, 1  ; v21 = 0
    v23 = iadd_imm v0, -8
    store v22, v23
    v24 = load.i64 v1+8
    v25 = ishl_imm v24, 3
    v26 = iadd v0, v25
    v27 = load.i64 v1
    return_call_indirect sig4, v27(v26, v1, v23)
}


[main$__lambda_16__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64, i64) -> i64 tail
    sig5 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig6 = (i64, i64, i64) apple_aarch64
    sig7 = (i64, i64, i64) apple_aarch64
    sig8 = (i64, i64, i64, i64) -> i64 tail
    sig9 = (i64, i64) -> i64 tail
    sig10 = (i64, i64) -> i64 apple_aarch64
    fn0 = u0:0 sig0
    fn1 = colocated u0:30 sig1
    fn2 = colocated u0:24 sig2
    fn3 = colocated u0:26 sig3
    fn4 = colocated u0:20 sig4
    fn5 = u0:6 sig5
    fn6 = u0:7 sig6
    fn7 = u0:8 sig7
    fn8 = u0:13 sig8
    fn9 = colocated u0:32 sig9
    fn10 = u0:1 sig10

block0(v0: i64, v1: i64):
    v2 = isub v0, v0
    v3 = load.i64 v1+8
    v4 = ishl_imm v3, 3
    v5 = iadd v4, v2
    v6 = ushr_imm v5, 3
    store v6, v1+8
    v7 = iconst.i64 0
    v8 = call fn0(v7)  ; v7 = 0
    v9 = iadd_imm v8, 1
    v10 = func_addr.i64 fn1
    v11 = iadd_imm v10, 3
    v12 = func_addr.i64 fn2
    v13 = iadd_imm v12, 3
    v14 = func_addr.i64 fn3
    v15 = iadd_imm v14, 3
    v16 = func_addr.i64 fn4
    stack_store v0, ss0
    v17 = stack_addr.i64 ss0
    v18 = call fn5(v17, v1, v9, v11, v13, v15, v16)
    v19 = stack_load.i64 ss0
    v20 = load.i64 v18
    v21 = func_addr.i64 fn9
    v22 = iadd_imm v21, 3
    stack_store v19, ss0
    v23 = stack_addr.i64 ss0
    v24 = call fn10(v22, v23)
    v25 = stack_load.i64 ss0
    v26 = isub v19, v25
    v27 = load.i64 v20+8
    v28 = ishl_imm v27, 3
    v29 = iadd v28, v26
    v30 = ushr_imm v29, 3
    store v30, v20+8
    return_call fn8(v25, v20, v24, v18)
}


[main$__lambda_17__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname7
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64, i64) -> i64 tail
    sig5 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig6 = (i64, i64, i64) apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64, i64) apple_aarch64
    sig9 = (i64, i64, i64, i64) -> i64 tail
    sig10 = (i64, i64) -> i64 tail
    sig11 = (i64, i64) -> i64 apple_aarch64
    fn0 = u0:0 sig0
    fn1 = colocated u0:48 sig1
    fn2 = colocated u0:24 sig2
    fn3 = colocated u0:26 sig3
    fn4 = colocated u0:20 sig4
    fn5 = u0:6 sig5
    fn6 = u0:7 sig6
    fn7 = colocated u0:28 sig7
    fn8 = u0:8 sig8
    fn9 = u0:13 sig9
    fn10 = colocated u0:34 sig10
    fn11 = u0:1 sig11

block0(v0: i64, v1: i64):
    v2 = isub v0, v0
    v3 = load.i64 v1+8
    v4 = ishl_imm v3, 3
    v5 = iadd v4, v2
    v6 = ushr_imm v5, 3
    store v6, v1+8
    v7 = iconst.i64 0
    v8 = call fn0(v7)  ; v7 = 0
    v9 = iadd_imm v8, 1
    v10 = func_addr.i64 fn1
    v11 = iadd_imm v10, 3
    v12 = func_addr.i64 fn2
    v13 = iadd_imm v12, 3
    v14 = func_addr.i64 fn3
    v15 = iadd_imm v14, 3
    v16 = func_addr.i64 fn4
    stack_store v0, ss0
    v17 = stack_addr.i64 ss0
    v18 = call fn5(v17, v1, v9, v11, v13, v15, v16)
    v19 = stack_load.i64 ss0
    v20 = symbol_value.i64 gv0
    v21 = iadd_imm v20, 8
    v22 = iadd_imm v21, 3
    v23 = func_addr.i64 fn7
    v24 = iadd_imm v23, 3
    call fn6(v18, v22, v24)
    v25 = load.i64 v18
    v26 = func_addr.i64 fn10
    v27 = iadd_imm v26, 3
    stack_store v19, ss0
    v28 = stack_addr.i64 ss0
    v29 = call fn11(v27, v28)
    v30 = stack_load.i64 ss0
    v31 = isub v19, v30
    v32 = load.i64 v25+8
    v33 = ishl_imm v32, 3
    v34 = iadd v33, v31
    v35 = ushr_imm v34, 3
    store v35, v25+8
    return_call fn9(v30, v25, v29, v18)
}


[main$__lambda_18__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname7
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64, i64) -> i64 tail
    sig5 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig6 = (i64, i64, i64) apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64, i64) apple_aarch64
    sig9 = (i64, i64, i64, i64) -> i64 tail
    sig10 = (i64, i64) -> i64 tail
    sig11 = (i64, i64) -> i64 apple_aarch64
    fn0 = u0:0 sig0
    fn1 = colocated u0:44 sig1
    fn2 = colocated u0:24 sig2
    fn3 = colocated u0:26 sig3
    fn4 = colocated u0:20 sig4
    fn5 = u0:6 sig5
    fn6 = u0:7 sig6
    fn7 = colocated u0:46 sig7
    fn8 = u0:8 sig8
    fn9 = u0:13 sig9
    fn10 = colocated u0:36 sig10
    fn11 = u0:1 sig11

block0(v0: i64, v1: i64):
    v2 = isub v0, v0
    v3 = load.i64 v1+8
    v4 = ishl_imm v3, 3
    v5 = iadd v4, v2
    v6 = ushr_imm v5, 3
    store v6, v1+8
    v7 = iconst.i64 0
    v8 = call fn0(v7)  ; v7 = 0
    v9 = iadd_imm v8, 1
    v10 = func_addr.i64 fn1
    v11 = iadd_imm v10, 3
    v12 = func_addr.i64 fn2
    v13 = iadd_imm v12, 3
    v14 = func_addr.i64 fn3
    v15 = iadd_imm v14, 3
    v16 = func_addr.i64 fn4
    stack_store v0, ss0
    v17 = stack_addr.i64 ss0
    v18 = call fn5(v17, v1, v9, v11, v13, v15, v16)
    v19 = stack_load.i64 ss0
    v20 = symbol_value.i64 gv0
    v21 = iadd_imm v20, 8
    v22 = iadd_imm v21, 3
    v23 = func_addr.i64 fn7
    v24 = iadd_imm v23, 3
    call fn6(v18, v22, v24)
    v25 = load.i64 v18
    v26 = func_addr.i64 fn10
    v27 = iadd_imm v26, 3
    stack_store v19, ss0
    v28 = stack_addr.i64 ss0
    v29 = call fn11(v27, v28)
    v30 = stack_load.i64 ss0
    v31 = isub v19, v30
    v32 = load.i64 v25+8
    v33 = ishl_imm v32, 3
    v34 = iadd v33, v31
    v35 = ushr_imm v34, 3
    store v35, v25+8
    return_call fn9(v30, v25, v29, v18)
}


[main$__lambda_2__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iconst.i64 100
    v5 = sshr_imm v2, 1
    v6 = imul v5, v4  ; v4 = 100
    v7 = sshr_imm v3, 1
    v8 = iadd v6, v7
    v9 = ishl_imm v8, 1
    v10 = iadd_imm v0, 8
    store v9, v10
    v11 = load.i64 v1+8
    v12 = ishl_imm v11, 3
    v13 = iadd v0, v12
    v14 = load.i64 v1
    return_call_indirect sig0, v14(v13, v1, v10)
}


[main$__lambda_3__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64) -> i64 apple_aarch64
    sig2 = (i64) -> i64 apple_aarch64
    sig3 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = u0:0 sig1
    fn2 = u0:0 sig2

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = sshr_imm v2, 1
    v5 = sshr_imm v3, 1
    v6 = imul v4, v5
    v7 = ishl_imm v6, 1
    v8 = iconst.i64 1
    v9 = ishl_imm v8, 1  ; v8 = 1
    v10 = iconst.i64 0
    v11 = call fn0(v10)  ; v10 = 0
    v12 = iadd_imm v11, 1
    v13 = iconst.i64 2
    v14 = call fn1(v13)  ; v13 = 2
    store aligned v9, v14
    store aligned v12, v14+8
    v15 = iadd_imm v14, 1
    v16 = iconst.i64 2
    v17 = call fn2(v16)  ; v16 = 2
    store aligned v7, v17
    store aligned v15, v17+8
    v18 = iadd_imm v17, 1
    v19 = iadd_imm v0, 8
    store v18, v19
    v20 = load.i64 v1+8
    v21 = ishl_imm v20, 3
    v22 = iadd v0, v21
    v23 = load.i64 v1
    return_call_indirect sig3, v23(v22, v1, v19)
}


[main$__lambda_4__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = (i64, i64, i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64) -> i64 tail
    fn0 = %Memmove sig0
    fn1 = colocated u0:15 sig1
    fn2 = colocated u0:18 sig2
    fn3 = u0:4 sig3

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = symbol_value.i64 gv0
    v4 = iadd_imm v3, 8
    v5 = iadd_imm v4, 3
    v6 = iconst.i64 11
    v7 = ishl_imm v6, 1  ; v6 = 11
    v8 = iadd_imm v0, -8
    store aligned v7, v8
    v9 = iadd_imm v8, 8
    v10 = isub v0, v8
    v11 = call fn0(v9, v8, v10)
    v12 = isub v0, v9
    v13 = load.i64 v1+8
    v14 = ishl_imm v13, 3
    v15 = iadd v14, v12
    v16 = ushr_imm v15, 3
    store v16, v1+8
    v17 = iconst.i64 1
    v18 = func_addr.i64 fn1
    v19 = func_addr.i64 fn2
    v20 = iconst.i64 1
    v21 = call fn3(v5, v9, v1, v17, v18, v19, v20)  ; v17 = 1, v20 = 1
    v22 = load.i64 v21
    v23 = load.i64 v21+8
    v24 = load.i64 v21+16
    return_call_indirect sig4, v22(v23, v24)
}


[main$__lambda_7__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname1
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64) -> i64 apple_aarch64
    sig5 = (i64) -> i64 apple_aarch64
    sig6 = (i64, i64, i64) -> i64 tail
    fn0 = colocated u0:15 sig0
    fn1 = colocated u0:18 sig1
    fn2 = u0:4 sig2
    fn3 = u0:0 sig4
    fn4 = u0:0 sig5

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = symbol_value.i64 gv0
    v5 = iadd_imm v4, 8
    v6 = iadd_imm v5, 3
    v7 = global_value.i64 gv1
    v8 = iadd_imm v7, 8
    v9 = iconst.i64 2
    v10 = ishl_imm v9, 1  ; v9 = 2
    v11 = iadd_imm v0, -8
    store aligned v10, v11
    v12 = iconst.i64 1
    v13 = func_addr.i64 fn0
    v14 = func_addr.i64 fn1
    v15 = iconst.i64 0
    v16 = call fn2(v6, v11, v8, v12, v13, v14, v15)  ; v12 = 1, v15 = 0
    v17 = load.i64 v16
    v18 = load.i64 v16+8
    v19 = load.i64 v16+16
    v20 = call_indirect sig3, v17(v18, v19)
    v21 = load.i64 v20
    v22 = iadd_imm v20, 8
    v23 = iconst.i64 0
    v24 = ishl_imm v23, 1  ; v23 = 0
    v25 = iconst.i64 2
    v26 = call fn3(v25)  ; v25 = 2
    store aligned v24, v26
    store aligned v3, v26+8
    v27 = iadd_imm v26, 1
    v28 = iconst.i64 2
    v29 = call fn4(v28)  ; v28 = 2
    store aligned v2, v29
    store aligned v27, v29+8
    v30 = iadd_imm v29, 1
    v31 = iadd_imm v0, 8
    store v30, v31
    v32 = load.i64 v1+8
    v33 = ishl_imm v32, 3
    v34 = iadd v0, v33
    v35 = load.i64 v1
    return_call_indirect sig6, v35(v34, v1, v31)
}


[main$__lambda_8__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    sig0 = (i64, i64, i64) -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64) -> i64 tail
    fn0 = %Memmove sig0
    fn1 = colocated u0:15 sig1
    fn2 = colocated u0:18 sig2
    fn3 = u0:4 sig3

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = symbol_value.i64 gv0
    v4 = iadd_imm v3, 8
    v5 = iadd_imm v4, 3
    v6 = iconst.i64 7
    v7 = ishl_imm v6, 1  ; v6 = 7
    v8 = iadd_imm v0, -8
    store aligned v7, v8
    v9 = iadd_imm v8, 8
    v10 = isub v0, v8
    v11 = call fn0(v9, v8, v10)
    v12 = isub v0, v9
    v13 = load.i64 v1+8
    v14 = ishl_imm v13, 3
    v15 = iadd v14, v12
    v16 = ushr_imm v15, 3
    store v16, v1+8
    v17 = iconst.i64 1
    v18 = func_addr.i64 fn1
    v19 = func_addr.i64 fn2
    v20 = iconst.i64 1
    v21 = call fn3(v5, v9, v1, v17, v18, v19, v20)  ; v17 = 1, v20 = 1
    v22 = load.i64 v21
    v23 = load.i64 v21+8
    v24 = load.i64 v21+16
    return_call_indirect sig4, v22(v23, v24)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:21 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}
