FTerm
========
Handler {
    parameter: Int {
        value: 0,
    },
    parameter_disposer: Lambda {
        arg_names: [
            (
                "_",
                Uniform,
            ),
        ],
        body: Struct {
            values: [],
        },
        may_have_complex_effects: false,
    },
    parameter_replicator: Lambda {
        arg_names: [
            (
                "p",
                Uniform,
            ),
        ],
        body: Struct {
            values: [
                Identifier {
                    name: "p",
                    may_have_complex_effects: false,
                },
                Identifier {
                    name: "p",
                    may_have_complex_effects: false,
                },
            ],
        },
        may_have_complex_effects: false,
    },
    transform: Lambda {
        arg_names: [
            (
                "p",
                Uniform,
            ),
            (
                "r",
                Uniform,
            ),
        ],
        body: Identifier {
            name: "r",
            may_have_complex_effects: false,
        },
        may_have_complex_effects: false,
    },
    simple_handlers: [],
    complex_handlers: [
        (
            Str {
                value: "accumulate",
            },
            Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                    (
                        "x",
                        Uniform,
                    ),
                    (
                        "cont",
                        Uniform,
                    ),
                ],
                body: Let {
                    name: "r",
                    t: Redex {
                        function: Identifier {
                            name: "_int_add",
                            may_have_complex_effects: false,
                        },
                        args: [
                            Identifier {
                                name: "p",
                                may_have_complex_effects: false,
                            },
                            Identifier {
                                name: "x",
                                may_have_complex_effects: false,
                            },
                        ],
                    },
                    body: Redex {
                        function: Force {
                            thunk: Identifier {
                                name: "cont",
                                may_have_complex_effects: false,
                            },
                            may_have_complex_effects: true,
                        },
                        args: [
                            Int {
                                value: 0,
                            },
                            Identifier {
                                name: "r",
                                may_have_complex_effects: false,
                            },
                            Identifier {
                                name: "r",
                                may_have_complex_effects: false,
                            },
                        ],
                    },
                },
                may_have_complex_effects: true,
            },
        ),
        (
            Str {
                value: "dissipate",
            },
            Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                    (
                        "x",
                        Uniform,
                    ),
                    (
                        "cont",
                        Uniform,
                    ),
                ],
                body: Let {
                    name: "r",
                    t: Redex {
                        function: Identifier {
                            name: "_int_sub",
                            may_have_complex_effects: false,
                        },
                        args: [
                            Identifier {
                                name: "p",
                                may_have_complex_effects: false,
                            },
                            Identifier {
                                name: "x",
                                may_have_complex_effects: false,
                            },
                        ],
                    },
                    body: Redex {
                        function: Force {
                            thunk: Identifier {
                                name: "cont",
                                may_have_complex_effects: false,
                            },
                            may_have_complex_effects: true,
                        },
                        args: [
                            Int {
                                value: 0,
                            },
                            Identifier {
                                name: "r",
                                may_have_complex_effects: false,
                            },
                            Identifier {
                                name: "r",
                                may_have_complex_effects: false,
                            },
                        ],
                    },
                },
                may_have_complex_effects: true,
            },
        ),
        (
            Str {
                value: "proliferate",
            },
            Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                    (
                        "cont",
                        Uniform,
                    ),
                ],
                body: Let {
                    name: "r",
                    t: Redex {
                        function: Identifier {
                            name: "_int_mul",
                            may_have_complex_effects: false,
                        },
                        args: [
                            Identifier {
                                name: "p",
                                may_have_complex_effects: false,
                            },
                            Int {
                                value: 2,
                            },
                        ],
                    },
                    body: Redex {
                        function: Force {
                            thunk: Identifier {
                                name: "cont",
                                may_have_complex_effects: false,
                            },
                            may_have_complex_effects: true,
                        },
                        args: [
                            Int {
                                value: 0,
                            },
                            Identifier {
                                name: "r",
                                may_have_complex_effects: false,
                            },
                            Identifier {
                                name: "r",
                                may_have_complex_effects: false,
                            },
                        ],
                    },
                },
                may_have_complex_effects: true,
            },
        ),
    ],
    input: Thunk {
        computation: Let {
            name: "_",
            t: OperationCall {
                eff: Str {
                    value: "accumulate",
                },
                args: [
                    Int {
                        value: 2,
                    },
                ],
                may_be_complex: true,
            },
            body: Let {
                name: "_",
                t: OperationCall {
                    eff: Str {
                        value: "accumulate",
                    },
                    args: [
                        Int {
                            value: 4,
                        },
                    ],
                    may_be_complex: true,
                },
                body: Let {
                    name: "_",
                    t: OperationCall {
                        eff: Str {
                            value: "dissipate",
                        },
                        args: [
                            Int {
                                value: 1,
                            },
                        ],
                        may_be_complex: true,
                    },
                    body: OperationCall {
                        eff: Str {
                            value: "proliferate",
                        },
                        args: [],
                        may_be_complex: true,
                    },
                },
            },
        },
        may_have_complex_effects: true,
    },
}

Defs
========
[
    (
        "main",
        FunctionDefinition {
            args: [],
            body: Handler {
                parameter: Int {
                    value: 0,
                },
                parameter_disposer: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_0",
                            may_have_complex_effects: false,
                        },
                        args: [],
                    },
                    may_have_complex_effects: true,
                },
                parameter_replicator: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_1",
                            may_have_complex_effects: false,
                        },
                        args: [],
                    },
                    may_have_complex_effects: true,
                },
                transform: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_2",
                            may_have_complex_effects: false,
                        },
                        args: [],
                    },
                    may_have_complex_effects: true,
                },
                complex_handlers: [
                    (
                        Str {
                            value: "accumulate",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_3",
                                    may_have_complex_effects: true,
                                },
                                args: [],
                            },
                            may_have_complex_effects: true,
                        },
                    ),
                    (
                        Str {
                            value: "dissipate",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_4",
                                    may_have_complex_effects: true,
                                },
                                args: [],
                            },
                            may_have_complex_effects: true,
                        },
                    ),
                    (
                        Str {
                            value: "proliferate",
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_5",
                                    may_have_complex_effects: true,
                                },
                                args: [],
                            },
                            may_have_complex_effects: true,
                        },
                    ),
                ],
                simple_handlers: [],
                input: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_6",
                            may_have_complex_effects: true,
                        },
                        args: [],
                    },
                    may_have_complex_effects: true,
                },
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 0,
            may_be_simple: false,
            may_be_complex: false,
            may_be_specialized: true,
        },
    ),
    (
        "main$__lambda_0",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [],
                },
            },
            c_type: Default,
            var_bound: 1,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_1",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 0,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 1,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_2",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Return {
                value: Var {
                    index: 1,
                },
            },
            c_type: Default,
            var_bound: 2,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_3",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
                (
                    2,
                    Uniform,
                ),
            ],
            body: Let {
                t: PrimitiveCall {
                    name: "_int_add",
                    args: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 1,
                        },
                    ],
                },
                bound_index: 3,
                body: Redex {
                    function: Force {
                        thunk: Var {
                            index: 2,
                        },
                        may_have_complex_effects: true,
                    },
                    args: [
                        Int {
                            value: 0,
                        },
                        Var {
                            index: 3,
                        },
                        Var {
                            index: 3,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 4,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_4",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
                (
                    2,
                    Uniform,
                ),
            ],
            body: Let {
                t: PrimitiveCall {
                    name: "_int_sub",
                    args: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 1,
                        },
                    ],
                },
                bound_index: 3,
                body: Redex {
                    function: Force {
                        thunk: Var {
                            index: 2,
                        },
                        may_have_complex_effects: true,
                    },
                    args: [
                        Int {
                            value: 0,
                        },
                        Var {
                            index: 3,
                        },
                        Var {
                            index: 3,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 4,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_5",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Let {
                t: PrimitiveCall {
                    name: "_int_mul",
                    args: [
                        Var {
                            index: 0,
                        },
                        Int {
                            value: 2,
                        },
                    ],
                },
                bound_index: 2,
                body: Redex {
                    function: Force {
                        thunk: Var {
                            index: 1,
                        },
                        may_have_complex_effects: true,
                    },
                    args: [
                        Int {
                            value: 0,
                        },
                        Var {
                            index: 2,
                        },
                        Var {
                            index: 2,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 3,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_6",
        FunctionDefinition {
            args: [],
            body: Let {
                t: OperationCall {
                    eff: Str {
                        value: "accumulate",
                    },
                    args: [
                        Int {
                            value: 2,
                        },
                    ],
                    may_be_complex: true,
                },
                bound_index: 0,
                body: Let {
                    t: OperationCall {
                        eff: Str {
                            value: "accumulate",
                        },
                        args: [
                            Int {
                                value: 4,
                            },
                        ],
                        may_be_complex: true,
                    },
                    bound_index: 1,
                    body: Let {
                        t: OperationCall {
                            eff: Str {
                                value: "dissipate",
                            },
                            args: [
                                Int {
                                    value: 1,
                                },
                            ],
                            may_be_complex: true,
                        },
                        bound_index: 2,
                        body: OperationCall {
                            eff: Str {
                                value: "proliferate",
                            },
                            args: [],
                            may_be_complex: true,
                        },
                    },
                },
            },
            c_type: Default,
            var_bound: 3,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
]

CLIR
========
[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname8
    gv1 = symbol colocated userextname10
    gv2 = symbol colocated userextname12
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64, i64) -> i64 tail
    sig5 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig6 = (i64, i64, i64) apple_aarch64
    sig7 = (i64, i64, i64) apple_aarch64
    sig8 = (i64, i64) -> i64 tail
    sig9 = (i64, i64) -> i64 tail
    sig10 = (i64, i64) -> i64 tail
    sig11 = (i64, i64) -> i64 tail
    sig12 = (i64, i64) -> i64 apple_aarch64
    sig13 = (i64, i64) -> i64 tail
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:15 sig1
    fn2 = colocated u0:17 sig2
    fn3 = colocated u0:19 sig3
    fn4 = colocated u0:13 sig4
    fn5 = u0:6 sig5
    fn6 = u0:7 sig6
    fn7 = u0:8 sig7
    fn8 = colocated u0:21 sig8
    fn9 = colocated u0:23 sig9
    fn10 = colocated u0:25 sig10
    fn11 = colocated u0:27 sig11
    fn12 = u0:1 sig12

block0(v0: i64):
    v1 = call fn0()
    v2 = iconst.i64 0
    v3 = ishl_imm v2, 1  ; v2 = 0
    v4 = func_addr.i64 fn1
    v5 = iadd_imm v4, 3
    v6 = func_addr.i64 fn2
    v7 = iadd_imm v6, 3
    v8 = func_addr.i64 fn3
    v9 = iadd_imm v8, 3
    v10 = func_addr.i64 fn4
    stack_store v0, ss0
    v11 = stack_addr.i64 ss0
    v12 = call fn5(v11, v1, v3, v5, v7, v9, v10)
    v13 = stack_load.i64 ss0
    v14 = symbol_value.i64 gv0
    v15 = iadd_imm v14, 8
    v16 = iadd_imm v15, 3
    v17 = func_addr.i64 fn8
    v18 = iadd_imm v17, 3
    call fn7(v12, v16, v18)
    v19 = symbol_value.i64 gv1
    v20 = iadd_imm v19, 8
    v21 = iadd_imm v20, 3
    v22 = func_addr.i64 fn9
    v23 = iadd_imm v22, 3
    call fn7(v12, v21, v23)
    v24 = symbol_value.i64 gv2
    v25 = iadd_imm v24, 8
    v26 = iadd_imm v25, 3
    v27 = func_addr.i64 fn10
    v28 = iadd_imm v27, 3
    call fn7(v12, v26, v28)
    v29 = load.i64 v12
    v30 = func_addr.i64 fn11
    v31 = iadd_imm v30, 3
    stack_store v13, ss0
    v32 = stack_addr.i64 ss0
    v33 = call fn12(v31, v32)
    v34 = stack_load.i64 ss0
    v35 = isub v13, v34
    v36 = ushr_imm v35, 3
    v37 = load.i64 v29+8
    v38 = iadd v37, v36
    store v38, v29+8
    v39 = call_indirect sig13, v33(v34, v29)
    v40 = load.i64 v39
    v41 = iadd_imm v39, 8
    v42 = sshr_imm v40, 1
    return v42
}


[main$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 0
    v4 = call fn0(v3)  ; v3 = 0
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_1__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 2
    v4 = call fn0(v3)  ; v3 = 2
    store aligned v2, v4
    store aligned v2, v4+8
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_2__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iadd_imm v0, 8
    store v3, v4
    v5 = load.i64 v1+8
    v6 = ishl_imm v5, 3
    v7 = iadd v0, v6
    v8 = load.i64 v1
    return_call_indirect sig0, v8(v7, v1, v4)
}


[main$__lambda_3__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 apple_aarch64
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64) -> i64 apple_aarch64
    fn0 = colocated u0:11 sig0
    fn1 = u0:1 sig1
    fn2 = %Memmove sig3

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = load.i64 v0+16
    v5 = sshr_imm v2, 1
    v6 = sshr_imm v3, 1
    v7 = iadd v5, v6
    v8 = iconst.i64 0
    v9 = ishl_imm v8, 1  ; v8 = 0
    v10 = ishl_imm v7, 1
    v11 = ishl_imm v7, 1
    v12 = iadd_imm v0, -8
    store aligned v11, v12
    v13 = iadd_imm v12, -8
    store aligned v10, v13
    v14 = iadd_imm v13, -8
    store aligned v9, v14
    v15 = call fn0()
    stack_store v14, ss0
    v16 = stack_addr.i64 ss0
    v17 = call fn1(v4, v16)
    v18 = stack_load.i64 ss0
    v19 = isub v14, v18
    v20 = ushr_imm v19, 3
    v21 = load.i64 v15+8
    v22 = iadd v21, v20
    store v22, v15+8
    v23 = iadd_imm v18, 24
    v24 = isub v0, v18
    v25 = call fn2(v23, v18, v24)
    return_call_indirect sig2, v17(v23, v15)
}


[main$__lambda_4__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 apple_aarch64
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64) -> i64 apple_aarch64
    fn0 = colocated u0:11 sig0
    fn1 = u0:1 sig1
    fn2 = %Memmove sig3

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = load.i64 v0+16
    v5 = sshr_imm v2, 1
    v6 = sshr_imm v3, 1
    v7 = isub v5, v6
    v8 = iconst.i64 0
    v9 = ishl_imm v8, 1  ; v8 = 0
    v10 = ishl_imm v7, 1
    v11 = ishl_imm v7, 1
    v12 = iadd_imm v0, -8
    store aligned v11, v12
    v13 = iadd_imm v12, -8
    store aligned v10, v13
    v14 = iadd_imm v13, -8
    store aligned v9, v14
    v15 = call fn0()
    stack_store v14, ss0
    v16 = stack_addr.i64 ss0
    v17 = call fn1(v4, v16)
    v18 = stack_load.i64 ss0
    v19 = isub v14, v18
    v20 = ushr_imm v19, 3
    v21 = load.i64 v15+8
    v22 = iadd v21, v20
    store v22, v15+8
    v23 = iadd_imm v18, 24
    v24 = isub v0, v18
    v25 = call fn2(v23, v18, v24)
    return_call_indirect sig2, v17(v23, v15)
}


[main$__lambda_5__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 apple_aarch64
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64, i64) -> i64 apple_aarch64
    fn0 = colocated u0:11 sig0
    fn1 = u0:1 sig1
    fn2 = %Memmove sig3

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = iconst.i64 2
    v5 = sshr_imm v2, 1
    v6 = imul v5, v4  ; v4 = 2
    v7 = iconst.i64 0
    v8 = ishl_imm v7, 1  ; v7 = 0
    v9 = ishl_imm v6, 1
    v10 = ishl_imm v6, 1
    v11 = iadd_imm v0, -8
    store aligned v10, v11
    v12 = iadd_imm v11, -8
    store aligned v9, v12
    v13 = iadd_imm v12, -8
    store aligned v8, v13
    v14 = call fn0()
    stack_store v13, ss0
    v15 = stack_addr.i64 ss0
    v16 = call fn1(v3, v15)
    v17 = stack_load.i64 ss0
    v18 = isub v13, v17
    v19 = ushr_imm v18, 3
    v20 = load.i64 v14+8
    v21 = iadd v20, v19
    store v21, v14+8
    v22 = iadd_imm v17, 16
    v23 = isub v0, v17
    v24 = call fn2(v22, v17, v23)
    return_call_indirect sig2, v16(v22, v14)
}


[main$__lambda_6__cps_impl]
function u0:0(i64, i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    gv0 = symbol colocated userextname0
    gv1 = symbol colocated userextname0
    gv2 = symbol colocated userextname3
    gv3 = symbol colocated userextname4
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig5 = (i64, i64) -> i64 tail
    sig6 = (i64, i64) -> i64 tail
    sig7 = (i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig8 = (i64, i64) -> i64 tail
    sig9 = (i64, i64) -> i64 tail
    sig10 = (i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig11 = (i64, i64) -> i64 tail
    fn0 = colocated u0:12 sig0
    fn1 = u0:4 sig1
    fn2 = colocated u0:12 sig3
    fn3 = u0:4 sig4
    fn4 = colocated u0:12 sig6
    fn5 = u0:4 sig7
    fn6 = colocated u0:12 sig9
    fn7 = u0:4 sig10

block0(v0: i64, v1: i64, v2: i64):
    v3 = load.i64 v1+24
    v4 = iadd_imm v1, 32
    v5 = iadd_imm v2, 8
    v6 = load.i64 v2
    v7 = icmp_imm ugt v3, 0xffff_ffff
    brif v7, block1, block5

block5:
    v8 = ireduce.i32 v3
    br_table v8, block1, [block1, block2, block3, block4]

block1:
    v9 = symbol_value.i64 gv0
    v10 = iadd_imm v9, 8
    v11 = iadd_imm v10, 3
    v12 = iconst.i64 2
    v13 = ishl_imm v12, 1  ; v12 = 2
    v14 = iadd_imm.i64 v5, -8
    store aligned v13, v14
    v15 = isub.i64 v0, v14
    v16 = ushr_imm v15, 3
    store v16, v1+8
    v17 = iconst.i64 1
    store v17, v1+24  ; v17 = 1
    v18 = iconst.i64 1
    v19 = func_addr.i64 fn0
    v20 = iconst.i64 1
    v21 = call fn1(v11, v14, v1, v18, v19, v20)  ; v18 = 1, v20 = 1
    v22 = load.i64 v21
    v23 = load.i64 v21+8
    v24 = load.i64 v21+16
    return_call_indirect sig2, v22(v23, v24)

block2:
    v25 = symbol_value.i64 gv1
    v26 = iadd_imm v25, 8
    v27 = iadd_imm v26, 3
    v28 = iconst.i64 4
    v29 = ishl_imm v28, 1  ; v28 = 4
    v30 = iadd_imm.i64 v5, -8
    store aligned v29, v30
    v31 = isub.i64 v0, v30
    v32 = ushr_imm v31, 3
    store v32, v1+8
    v33 = iconst.i64 2
    store v33, v1+24  ; v33 = 2
    store.i64 v6, v4
    v34 = iconst.i64 1
    v35 = func_addr.i64 fn2
    v36 = iconst.i64 1
    v37 = call fn3(v27, v30, v1, v34, v35, v36)  ; v34 = 1, v36 = 1
    v38 = load.i64 v37
    v39 = load.i64 v37+8
    v40 = load.i64 v37+16
    return_call_indirect sig5, v38(v39, v40)

block3:
    v41 = symbol_value.i64 gv2
    v42 = iadd_imm v41, 8
    v43 = iadd_imm v42, 3
    v44 = iconst.i64 1
    v45 = ishl_imm v44, 1  ; v44 = 1
    v46 = iadd_imm.i64 v5, -8
    store aligned v45, v46
    v47 = isub.i64 v0, v46
    v48 = ushr_imm v47, 3
    store v48, v1+8
    v49 = iconst.i64 3
    store v49, v1+24  ; v49 = 3
    store.i64 v6, v4+8
    v50 = iconst.i64 1
    v51 = func_addr.i64 fn4
    v52 = iconst.i64 1
    v53 = call fn5(v43, v46, v1, v50, v51, v52)  ; v50 = 1, v52 = 1
    v54 = load.i64 v53
    v55 = load.i64 v53+8
    v56 = load.i64 v53+16
    return_call_indirect sig8, v54(v55, v56)

block4:
    v57 = symbol_value.i64 gv3
    v58 = iadd_imm v57, 8
    v59 = iadd_imm v58, 3
    v60 = load.i64 v1+16
    v61 = load.i64 v60+8
    v62 = ishl_imm v61, 3
    v63 = iadd.i64 v0, v62
    v64 = isub v63, v5
    v65 = ushr_imm v64, 3
    store v65, v60+8
    v66 = iconst.i64 0
    v67 = func_addr.i64 fn6
    v68 = iconst.i64 1
    v69 = call fn7(v59, v5, v60, v66, v67, v68)  ; v66 = 0, v68 = 1
    v70 = load.i64 v69
    v71 = load.i64 v69+8
    v72 = load.i64 v69+16
    return_call_indirect sig11, v70(v71, v72)
}


[main$__lambda_6__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = colocated u0:28 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 56
    v3 = call fn0(v2)  ; v2 = 56
    v4 = func_addr.i64 fn1
    store v4, v3
    store v1, v3+16
    v5 = iadd_imm v0, -8
    return_call fn1(v0, v3, v5)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:14 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}


Result
========
10