FTerm
========
Let {
    name: "a",
    t: Int {
        value: 1,
    },
    body: Let {
        name: "f",
        t: Thunk {
            computation: Lambda {
                arg_names: [
                    (
                        "x",
                        Specialized(
                            Integer,
                        ),
                    ),
                ],
                body: Redex {
                    function: Identifier {
                        name: "_int_add",
                        may_have_complex_effects: false,
                    },
                    args: [
                        Identifier {
                            name: "x",
                            may_have_complex_effects: false,
                        },
                        Identifier {
                            name: "a",
                            may_have_complex_effects: false,
                        },
                    ],
                },
                may_have_complex_effects: false,
            },
            may_have_complex_effects: false,
        },
        body: Redex {
            function: Force {
                thunk: Identifier {
                    name: "f",
                    may_have_complex_effects: false,
                },
                may_have_complex_effects: false,
            },
            args: [
                Int {
                    value: 2,
                },
            ],
        },
    },
}

Defs
========
[
    (
        "main",
        FunctionDefinition {
            args: [],
            body: Let {
                t: Return {
                    value: Int {
                        value: 1,
                    },
                },
                bound_index: 0,
                body: Let {
                    t: Return {
                        value: Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_0",
                                    may_have_complex_effects: false,
                                },
                                args: [
                                    Var {
                                        index: 0,
                                    },
                                ],
                            },
                            may_have_complex_effects: false,
                        },
                    },
                    bound_index: 1,
                    body: Redex {
                        function: Force {
                            thunk: Var {
                                index: 1,
                            },
                            may_have_complex_effects: false,
                        },
                        args: [
                            Int {
                                value: 2,
                            },
                        ],
                    },
                },
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 2,
            may_be_simple: false,
            may_be_complex: false,
            may_be_specialized: true,
        },
    ),
    (
        "main$__lambda_0",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Specialized(
                        Integer,
                    ),
                ),
            ],
            body: PrimitiveCall {
                name: "_int_add",
                args: [
                    Var {
                        index: 1,
                    },
                    Var {
                        index: 0,
                    },
                ],
            },
            c_type: Default,
            var_bound: 2,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
]

CLIR
========
[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64) -> i64 apple_aarch64
    sig2 = () -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 apple_aarch64
    sig4 = (i64, i64) -> i64 tail
    fn0 = colocated u0:16 sig0
    fn1 = u0:0 sig1
    fn2 = colocated u0:11 sig2
    fn3 = u0:1 sig3

block0(v0: i64):
    v1 = iconst.i64 1
    v2 = func_addr.i64 fn0
    v3 = iconst.i64 1
    v4 = iadd_imm v2, 3
    v5 = ishl_imm v1, 1  ; v1 = 1
    v6 = iconst.i64 3
    v7 = call fn1(v6)  ; v6 = 3
    store aligned v4, v7
    store aligned v3, v7+8  ; v3 = 1
    store aligned v5, v7+16
    v8 = iconst.i64 2
    v9 = ishl_imm v8, 1  ; v8 = 2
    v10 = iadd_imm v0, -8
    store aligned v9, v10
    v11 = call fn2()
    v12 = iadd_imm v7, 1
    stack_store v10, ss0
    v13 = stack_addr.i64 ss0
    v14 = call fn3(v12, v13)
    v15 = stack_load.i64 ss0
    v16 = isub v10, v15
    v17 = ushr_imm v16, 3
    v18 = load.i64 v11+8
    v19 = iadd v18, v17
    store v19, v11+8
    v20 = call_indirect sig4, v14(v15, v11)
    v21 = load.i64 v20
    v22 = iadd_imm v20, 8
    v23 = sshr_imm v21, 1
    return v23
}


[main$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = sshr_imm v3, 1
    v5 = sshr_imm v2, 1
    v6 = iadd v4, v5
    v7 = ishl_imm v6, 1
    v8 = iadd_imm v0, 8
    store v7, v8
    v9 = load.i64 v1+8
    v10 = ishl_imm v9, 3
    v11 = iadd v0, v10
    v12 = load.i64 v1
    return_call_indirect sig0, v12(v11, v1, v8)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:15 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}


Result
========
3