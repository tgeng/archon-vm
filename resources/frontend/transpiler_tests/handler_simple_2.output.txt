FTerm
========
Handler {
    parameter: Int {
        value: 2,
    },
    parameter_disposer: Lambda {
        arg_names: [
            (
                "_",
                Uniform,
            ),
        ],
        body: Struct {
            values: [],
        },
        effect: Basic,
    },
    parameter_replicator: Lambda {
        arg_names: [
            (
                "p",
                Uniform,
            ),
        ],
        body: Struct {
            values: [
                Identifier {
                    name: "p",
                    effect: Basic,
                },
                Identifier {
                    name: "p",
                    effect: Basic,
                },
            ],
        },
        effect: Basic,
    },
    transform: Lambda {
        arg_names: [
            (
                "p",
                Uniform,
            ),
            (
                "x",
                Uniform,
            ),
        ],
        body: Redex {
            function: Identifier {
                name: "_int_mul",
                effect: Basic,
            },
            args: [
                Identifier {
                    name: "x",
                    effect: Basic,
                },
                Identifier {
                    name: "p",
                    effect: Basic,
                },
            ],
        },
        effect: Basic,
    },
    simple_handlers: [
        (
            Int {
                value: 11,
            },
            Lambda {
                arg_names: [
                    (
                        "p",
                        Uniform,
                    ),
                    (
                        "y",
                        Uniform,
                    ),
                ],
                body: Struct {
                    values: [
                        Int {
                            value: 3,
                        },
                        Struct {
                            values: [
                                Int {
                                    value: 1,
                                },
                                Redex {
                                    function: Identifier {
                                        name: "_int_mul",
                                        effect: Basic,
                                    },
                                    args: [
                                        Identifier {
                                            name: "p",
                                            effect: Basic,
                                        },
                                        Identifier {
                                            name: "y",
                                            effect: Basic,
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
                effect: Basic,
            },
        ),
    ],
    complex_handlers: [],
    input: Thunk {
        computation: OperationCall {
            eff: Int {
                value: 11,
            },
            args: [
                Int {
                    value: 5,
                },
            ],
            effect: Simple,
        },
        effect: Basic,
    },
}

Defs
========
[
    (
        "main",
        FunctionDefinition {
            args: [],
            body: Handler {
                parameter: Int {
                    value: 2,
                },
                parameter_disposer: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_0",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
                parameter_replicator: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_1",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
                transform: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_2",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
                complex_handlers: [],
                simple_handlers: [
                    (
                        Int {
                            value: 11,
                        },
                        Thunk {
                            t: Redex {
                                function: Def {
                                    name: "main$__lambda_3",
                                    effect: Basic,
                                },
                                args: [],
                            },
                            effect: Basic,
                        },
                    ),
                ],
                input: Thunk {
                    t: Redex {
                        function: Def {
                            name: "main$__lambda_4",
                            effect: Basic,
                        },
                        args: [],
                    },
                    effect: Basic,
                },
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 0,
            may_be_simple: false,
            may_be_complex: false,
            may_be_specialized: true,
        },
    ),
    (
        "main$__lambda_0",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [],
                },
            },
            c_type: Default,
            var_bound: 1,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_1",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Return {
                value: Struct {
                    values: [
                        Var {
                            index: 0,
                        },
                        Var {
                            index: 0,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 1,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_2",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: PrimitiveCall {
                name: "_int_mul",
                args: [
                    Var {
                        index: 1,
                    },
                    Var {
                        index: 0,
                    },
                ],
            },
            c_type: Default,
            var_bound: 2,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_3",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
                (
                    1,
                    Uniform,
                ),
            ],
            body: Let {
                t: Let {
                    t: PrimitiveCall {
                        name: "_int_mul",
                        args: [
                            Var {
                                index: 0,
                            },
                            Var {
                                index: 1,
                            },
                        ],
                    },
                    bound_index: 2,
                    body: Return {
                        value: Struct {
                            values: [
                                Int {
                                    value: 1,
                                },
                                Var {
                                    index: 2,
                                },
                            ],
                        },
                    },
                },
                bound_index: 3,
                body: Return {
                    value: Struct {
                        values: [
                            Int {
                                value: 3,
                            },
                            Var {
                                index: 3,
                            },
                        ],
                    },
                },
            },
            c_type: Default,
            var_bound: 4,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
    (
        "main$__lambda_4",
        FunctionDefinition {
            args: [],
            body: OperationCall {
                eff: Int {
                    value: 11,
                },
                args: [
                    Int {
                        value: 5,
                    },
                ],
                effect: Simple,
            },
            c_type: Default,
            var_bound: 0,
            may_be_simple: false,
            may_be_complex: true,
            may_be_specialized: false,
        },
    ),
]

CLIR
========
[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64) -> i64 tail
    sig3 = (i64, i64) -> i64 tail
    sig4 = (i64, i64, i64) -> i64 tail
    sig5 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig6 = (i64, i64, i64) apple_aarch64
    sig7 = (i64, i64) -> i64 tail
    sig8 = (i64, i64, i64) apple_aarch64
    sig9 = (i64, i64) -> i64 tail
    sig10 = (i64, i64) -> i64 apple_aarch64
    sig11 = (i64, i64) -> i64 tail
    fn0 = colocated u0:12 sig0
    fn1 = colocated u0:19 sig1
    fn2 = colocated u0:21 sig2
    fn3 = colocated u0:23 sig3
    fn4 = colocated u0:17 sig4
    fn5 = u0:6 sig5
    fn6 = u0:7 sig6
    fn7 = colocated u0:25 sig7
    fn8 = u0:8 sig8
    fn9 = colocated u0:27 sig9
    fn10 = u0:1 sig10

block0(v0: i64):
    v1 = call fn0()
    v2 = iconst.i64 2
    v3 = ishl_imm v2, 1  ; v2 = 2
    v4 = func_addr.i64 fn1
    v5 = iadd_imm v4, 3
    v6 = func_addr.i64 fn2
    v7 = iadd_imm v6, 3
    v8 = func_addr.i64 fn3
    v9 = iadd_imm v8, 3
    v10 = func_addr.i64 fn4
    stack_store v0, ss0
    v11 = stack_addr.i64 ss0
    v12 = call fn5(v11, v1, v3, v5, v7, v9, v10)
    v13 = stack_load.i64 ss0
    v14 = iconst.i64 11
    v15 = ishl_imm v14, 1  ; v14 = 11
    v16 = func_addr.i64 fn7
    v17 = iadd_imm v16, 3
    call fn6(v12, v15, v17)
    v18 = load.i64 v12
    v19 = func_addr.i64 fn9
    v20 = iadd_imm v19, 3
    stack_store v13, ss0
    v21 = stack_addr.i64 ss0
    v22 = call fn10(v20, v21)
    v23 = stack_load.i64 ss0
    v24 = call_indirect sig11, v22(v23, v18)
    v25 = load.i64 v24
    v26 = iadd_imm v24, 8
    v27 = sshr_imm v25, 1
    return v27
}


[main$__lambda_0__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 0
    v4 = call fn0(v3)  ; v3 = 0
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_1__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 2
    v4 = call fn0(v3)  ; v3 = 2
    store aligned v2, v4
    store aligned v2, v4+8
    v5 = iadd_imm v4, 1
    v6 = iadd_imm v0, 0
    store v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = load.i64 v1
    return_call_indirect sig1, v10(v9, v1, v6)
}


[main$__lambda_2__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = sshr_imm v3, 1
    v5 = sshr_imm v2, 1
    v6 = imul v4, v5
    v7 = ishl_imm v6, 1
    v8 = iadd_imm v0, 8
    store v7, v8
    v9 = load.i64 v1+8
    v10 = ishl_imm v9, 3
    v11 = iadd v0, v10
    v12 = load.i64 v1
    return_call_indirect sig0, v12(v11, v1, v8)
}


[main$__lambda_3__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64) -> i64 apple_aarch64
    sig2 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = u0:0 sig1

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = load.i64 v0+8
    v4 = sshr_imm v2, 1
    v5 = sshr_imm v3, 1
    v6 = imul v4, v5
    v7 = iconst.i64 1
    v8 = ishl_imm v7, 1  ; v7 = 1
    v9 = ishl_imm v6, 1
    v10 = iconst.i64 2
    v11 = call fn0(v10)  ; v10 = 2
    store aligned v8, v11
    store aligned v9, v11+8
    v12 = iconst.i64 3
    v13 = ishl_imm v12, 1  ; v12 = 3
    v14 = iadd_imm v11, 1
    v15 = iconst.i64 2
    v16 = call fn1(v15)  ; v15 = 2
    store aligned v13, v16
    store aligned v14, v16+8
    v17 = iadd_imm v16, 1
    v18 = iadd_imm v0, 8
    store v17, v18
    v19 = load.i64 v1+8
    v20 = ishl_imm v19, 3
    v21 = iadd v0, v20
    v22 = load.i64 v1
    return_call_indirect sig2, v22(v21, v1, v18)
}


[main$__lambda_4__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64) -> i64 tail
    sig2 = (i64, i64, i64, i64, i64, i64, i64) -> i64 apple_aarch64
    sig3 = (i64, i64) -> i64 tail
    fn0 = colocated u0:14 sig0
    fn1 = colocated u0:16 sig1
    fn2 = u0:4 sig2

block0(v0: i64, v1: i64):
    v2 = iconst.i64 11
    v3 = ishl_imm v2, 1  ; v2 = 11
    v4 = iconst.i64 5
    v5 = ishl_imm v4, 1  ; v4 = 5
    v6 = iadd_imm v0, -8
    store aligned v5, v6
    v7 = load.i64 v1+8
    v8 = ishl_imm v7, 3
    v9 = iadd v0, v8
    v10 = isub v9, v6
    v11 = ushr_imm v10, 3
    store v11, v1+8
    v12 = iconst.i64 1
    v13 = func_addr.i64 fn0
    v14 = func_addr.i64 fn1
    v15 = iconst.i64 1
    v16 = call fn2(v3, v6, v1, v12, v13, v14, v15)  ; v12 = 1, v15 = 1
    v17 = load.i64 v16
    v18 = load.i64 v16+8
    v19 = load.i64 v16+16
    return_call_indirect sig3, v17(v18, v19)
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:18 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}


Result
========
30