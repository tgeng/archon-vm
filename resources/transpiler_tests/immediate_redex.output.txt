FTerm
========
Redex {
    function: Force {
        thunk: Thunk {
            computation: Lambda {
                arg_names: [
                    (
                        "x",
                        Uniform,
                    ),
                    (
                        "y",
                        Uniform,
                    ),
                ],
                body: Redex {
                    function: Identifier {
                        name: "_int_add",
                    },
                    args: [
                        Identifier {
                            name: "x",
                        },
                        Identifier {
                            name: "y",
                        },
                    ],
                },
            },
        },
    },
    args: [
        Int {
            value: 1,
        },
        Int {
            value: 2,
        },
    ],
}

Defs
========
[
    (
        "main",
        FunctionDefinition {
            args: [],
            body: PrimitiveCall {
                name: "_int_add",
                args: [
                    Int {
                        value: 1,
                    },
                    Int {
                        value: 2,
                    },
                ],
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 0,
            may_be_simple: true,
        },
    ),
]

CLIR
========
[main__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = iconst.i64 1
    v3 = iconst.i64 2
    v4 = iadd v2, v3  ; v2 = 1, v3 = 2
    v5 = ishl_imm v4, 1
    v6 = iadd_imm v0, -8
    store v5, v6
    v7 = load.i64 v1+8
    v8 = iadd v0, v7
    v9 = load.i64 v1
    return_call_indirect sig0, v9(v8, v1, v6)
}


[main__simple]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8

block0(v0: i64):
    v1 = iconst.i64 1
    v2 = iconst.i64 2
    v3 = iadd v1, v2  ; v1 = 1, v2 = 2
    v4 = ishl_imm v3, 1
    v5 = iadd_imm v0, -8
    store v4, v5
    return v5
}


[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8

block0(v0: i64):
    v1 = iconst.i64 1
    v2 = iconst.i64 2
    v3 = iadd v1, v2  ; v1 = 1, v2 = 2
    return v3
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:18 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}


Result
========
3