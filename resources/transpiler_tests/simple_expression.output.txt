FTerm
========
Let {
    name: "a",
    t: Int {
        value: 1,
    },
    body: Let {
        name: "b",
        t: Int {
            value: 2,
        },
        body: Redex {
            function: Identifier {
                name: "_int_add",
            },
            args: [
                Identifier {
                    name: "a",
                },
                Identifier {
                    name: "b",
                },
            ],
        },
    },
}

Defs
========
[
    (
        "main",
        FunctionDefinition {
            args: [],
            body: Let {
                t: Return {
                    value: Int {
                        value: 1,
                    },
                },
                bound_index: 0,
                body: Let {
                    t: Return {
                        value: Int {
                            value: 2,
                        },
                    },
                    bound_index: 1,
                    body: PrimitiveCall {
                        name: "_int_add",
                        args: [
                            Var {
                                index: 0,
                            },
                            Var {
                                index: 1,
                            },
                        ],
                    },
                },
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 2,
            may_be_simple: true,
            may_be_complex: false,
        },
    ),
]

CLIR
========
[main__simple]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8

block0(v0: i64):
    v1 = iconst.i64 1
    v2 = iconst.i64 2
    v3 = iadd v1, v2  ; v1 = 1, v2 = 2
    v4 = ishl_imm v3, 1
    v5 = iadd_imm v0, -8
    store v4, v5
    return v5
}


[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8

block0(v0: i64):
    v1 = iconst.i64 1
    v2 = iconst.i64 2
    v3 = iadd v1, v2  ; v1 = 1, v2 = 2
    return v3
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:16 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}


Result
========
3