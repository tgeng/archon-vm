FTerm
========
Let {
    name: "a",
    t: Struct {
        values: [
            Int {
                value: 1,
            },
            Int {
                value: 2,
            },
            Int {
                value: 3,
            },
        ],
    },
    body: Let {
        name: "_",
        t: MemSet {
            base: Identifier {
                name: "a",
            },
            offset: Int {
                value: 0,
            },
            value: Int {
                value: 4,
            },
        },
        body: Let {
            name: "_",
            t: MemSet {
                base: Identifier {
                    name: "a",
                },
                offset: Int {
                    value: 1,
                },
                value: Int {
                    value: 5,
                },
            },
            body: Let {
                name: "_",
                t: MemSet {
                    base: Identifier {
                        name: "a",
                    },
                    offset: Int {
                        value: 2,
                    },
                    value: Int {
                        value: 6,
                    },
                },
                body: Redex {
                    function: Identifier {
                        name: "_int_add",
                    },
                    args: [
                        Redex {
                            function: Identifier {
                                name: "_int_add",
                            },
                            args: [
                                MemGet {
                                    base: Identifier {
                                        name: "a",
                                    },
                                    offset: Int {
                                        value: 0,
                                    },
                                },
                                MemGet {
                                    base: Identifier {
                                        name: "a",
                                    },
                                    offset: Int {
                                        value: 1,
                                    },
                                },
                            ],
                        },
                        MemGet {
                            base: Identifier {
                                name: "a",
                            },
                            offset: Int {
                                value: 2,
                            },
                        },
                    ],
                },
            },
        },
    },
}

Defs
========
[
    (
        "main",
        FunctionDefinition {
            args: [],
            body: Let {
                t: Return {
                    value: Struct {
                        values: [
                            Int {
                                value: 1,
                            },
                            Int {
                                value: 2,
                            },
                            Int {
                                value: 3,
                            },
                        ],
                    },
                },
                bound_index: 0,
                body: Let {
                    t: MemSet {
                        base: Var {
                            index: 0,
                        },
                        offset: Int {
                            value: 0,
                        },
                        value: Int {
                            value: 4,
                        },
                    },
                    bound_index: 1,
                    body: Let {
                        t: MemSet {
                            base: Var {
                                index: 0,
                            },
                            offset: Int {
                                value: 1,
                            },
                            value: Int {
                                value: 5,
                            },
                        },
                        bound_index: 2,
                        body: Let {
                            t: MemSet {
                                base: Var {
                                    index: 0,
                                },
                                offset: Int {
                                    value: 2,
                                },
                                value: Int {
                                    value: 6,
                                },
                            },
                            bound_index: 3,
                            body: Let {
                                t: Let {
                                    t: MemGet {
                                        base: Var {
                                            index: 0,
                                        },
                                        offset: Int {
                                            value: 0,
                                        },
                                    },
                                    bound_index: 4,
                                    body: Let {
                                        t: MemGet {
                                            base: Var {
                                                index: 0,
                                            },
                                            offset: Int {
                                                value: 1,
                                            },
                                        },
                                        bound_index: 5,
                                        body: PrimitiveCall {
                                            name: "_int_add",
                                            args: [
                                                Var {
                                                    index: 4,
                                                },
                                                Var {
                                                    index: 5,
                                                },
                                            ],
                                        },
                                    },
                                },
                                bound_index: 6,
                                body: Let {
                                    t: MemGet {
                                        base: Var {
                                            index: 0,
                                        },
                                        offset: Int {
                                            value: 2,
                                        },
                                    },
                                    bound_index: 7,
                                    body: PrimitiveCall {
                                        name: "_int_add",
                                        args: [
                                            Var {
                                                index: 6,
                                            },
                                            Var {
                                                index: 7,
                                            },
                                        ],
                                    },
                                },
                            },
                        },
                    },
                },
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 8,
            may_be_simple: true,
        },
    ),
]

CLIR
========
[main]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v2 = iconst.i64 1
    v3 = ishl_imm v2, 1  ; v2 = 1
    v4 = iconst.i64 2
    v5 = ishl_imm v4, 1  ; v4 = 2
    v6 = iconst.i64 3
    v7 = ishl_imm v6, 1  ; v6 = 3
    v8 = iconst.i64 3
    v9 = call fn0(v8)  ; v8 = 3
    store aligned v3, v9
    store aligned v5, v9+8
    store aligned v7, v9+16
    v10 = iconst.i64 0
    v11 = iconst.i64 4
    v12 = ishl_imm v10, 3  ; v10 = 0
    v13 = ishl_imm v11, 1  ; v11 = 4
    v14 = iadd v9, v12
    store v13, v14
    v15 = iconst.i64 1
    v16 = iconst.i64 5
    v17 = ishl_imm v15, 3  ; v15 = 1
    v18 = ishl_imm v16, 1  ; v16 = 5
    v19 = iadd v9, v17
    store v18, v19
    v20 = iconst.i64 2
    v21 = iconst.i64 6
    v22 = ishl_imm v20, 3  ; v20 = 2
    v23 = ishl_imm v21, 1  ; v21 = 6
    v24 = iadd v9, v22
    store v23, v24
    v25 = iconst.i64 0
    v26 = ishl_imm v25, 3  ; v25 = 0
    v27 = iadd v9, v26
    v28 = load.i64 v27
    v29 = iconst.i64 1
    v30 = ishl_imm v29, 3  ; v29 = 1
    v31 = iadd v9, v30
    v32 = load.i64 v31
    v33 = sshr_imm v28, 1
    v34 = sshr_imm v32, 1
    v35 = iadd v33, v34
    v36 = iconst.i64 2
    v37 = ishl_imm v36, 3  ; v36 = 2
    v38 = iadd v9, v37
    v39 = load.i64 v38
    v40 = sshr_imm v39, 1
    v41 = iadd v35, v40
    v42 = ishl_imm v41, 1
    v43 = iadd_imm v0, -8
    store v42, v43
    v44 = load.i64 v1+8
    v45 = iadd v0, v44
    v46 = load.i64 v1
    return_call_indirect sig1, v46(v45, v1, v43)
}


[main__simple]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    fn0 = u0:0 sig0

block0(v0: i64):
    v1 = iconst.i64 1
    v2 = ishl_imm v1, 1  ; v1 = 1
    v3 = iconst.i64 2
    v4 = ishl_imm v3, 1  ; v3 = 2
    v5 = iconst.i64 3
    v6 = ishl_imm v5, 1  ; v5 = 3
    v7 = iconst.i64 3
    v8 = call fn0(v7)  ; v7 = 3
    store aligned v2, v8
    store aligned v4, v8+8
    store aligned v6, v8+16
    v9 = iconst.i64 0
    v10 = iconst.i64 4
    v11 = ishl_imm v9, 3  ; v9 = 0
    v12 = ishl_imm v10, 1  ; v10 = 4
    v13 = iadd v8, v11
    store v12, v13
    v14 = iconst.i64 1
    v15 = iconst.i64 5
    v16 = ishl_imm v14, 3  ; v14 = 1
    v17 = ishl_imm v15, 1  ; v15 = 5
    v18 = iadd v8, v16
    store v17, v18
    v19 = iconst.i64 2
    v20 = iconst.i64 6
    v21 = ishl_imm v19, 3  ; v19 = 2
    v22 = ishl_imm v20, 1  ; v20 = 6
    v23 = iadd v8, v21
    store v22, v23
    v24 = iconst.i64 0
    v25 = ishl_imm v24, 3  ; v24 = 0
    v26 = iadd v8, v25
    v27 = load.i64 v26
    v28 = iconst.i64 1
    v29 = ishl_imm v28, 3  ; v28 = 1
    v30 = iadd v8, v29
    v31 = load.i64 v30
    v32 = sshr_imm v27, 1
    v33 = sshr_imm v31, 1
    v34 = iadd v32, v33
    v35 = iconst.i64 2
    v36 = ishl_imm v35, 3  ; v35 = 2
    v37 = iadd v8, v36
    v38 = load.i64 v37
    v39 = sshr_imm v38, 1
    v40 = iadd v34, v39
    v41 = ishl_imm v40, 1
    v42 = iadd_imm v0, -8
    store v41, v42
    return v42
}


[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    fn0 = u0:0 sig0

block0(v0: i64):
    v1 = iconst.i64 1
    v2 = ishl_imm v1, 1  ; v1 = 1
    v3 = iconst.i64 2
    v4 = ishl_imm v3, 1  ; v3 = 2
    v5 = iconst.i64 3
    v6 = ishl_imm v5, 1  ; v5 = 3
    v7 = iconst.i64 3
    v8 = call fn0(v7)  ; v7 = 3
    store aligned v2, v8
    store aligned v4, v8+8
    store aligned v6, v8+16
    v9 = iconst.i64 0
    v10 = iconst.i64 4
    v11 = ishl_imm v9, 3  ; v9 = 0
    v12 = ishl_imm v10, 1  ; v10 = 4
    v13 = iadd v8, v11
    store v12, v13
    v14 = iconst.i64 1
    v15 = iconst.i64 5
    v16 = ishl_imm v14, 3  ; v14 = 1
    v17 = ishl_imm v15, 1  ; v15 = 5
    v18 = iadd v8, v16
    store v17, v18
    v19 = iconst.i64 2
    v20 = iconst.i64 6
    v21 = ishl_imm v19, 3  ; v19 = 2
    v22 = ishl_imm v20, 1  ; v20 = 6
    v23 = iadd v8, v21
    store v22, v23
    v24 = iconst.i64 0
    v25 = ishl_imm v24, 3  ; v24 = 0
    v26 = iadd v8, v25
    v27 = load.i64 v26
    v28 = iconst.i64 1
    v29 = ishl_imm v28, 3  ; v28 = 1
    v30 = iadd v8, v29
    v31 = load.i64 v30
    v32 = sshr_imm v27, 1
    v33 = sshr_imm v31, 1
    v34 = iadd v32, v33
    v35 = iconst.i64 2
    v36 = ishl_imm v35, 3  ; v35 = 2
    v37 = iadd v8, v36
    v38 = load.i64 v37
    v39 = sshr_imm v38, 1
    v40 = iadd v34, v39
    return v40
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:18 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}


Result
========
15