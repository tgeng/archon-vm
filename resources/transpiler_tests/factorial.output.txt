FTerm
========
Defs {
    defs: [
        (
            "factorial",
            Def {
                args: [
                    (
                        "n",
                        Specialized(
                            Integer,
                        ),
                    ),
                ],
                body: CaseInt {
                    t: Identifier {
                        name: "n",
                    },
                    result_type: SpecializedF(
                        Specialized(
                            Integer,
                        ),
                    ),
                    branches: [
                        (
                            0,
                            Int {
                                value: 1,
                            },
                        ),
                    ],
                    default_branch: Some(
                        Redex {
                            function: Identifier {
                                name: "_int_mul",
                            },
                            args: [
                                Identifier {
                                    name: "n",
                                },
                                Redex {
                                    function: Identifier {
                                        name: "factorial",
                                    },
                                    args: [
                                        Redex {
                                            function: Identifier {
                                                name: "_int_sub",
                                            },
                                            args: [
                                                Identifier {
                                                    name: "n",
                                                },
                                                Int {
                                                    value: 1,
                                                },
                                            ],
                                        },
                                    ],
                                },
                            ],
                        },
                    ),
                },
                c_type: SpecializedF(
                    Specialized(
                        Integer,
                    ),
                ),
            },
        ),
    ],
    body: Some(
        Redex {
            function: Identifier {
                name: "factorial",
            },
            args: [
                Int {
                    value: 5,
                },
            ],
        },
    ),
}

Defs
========
[
    (
        "factorial",
        FunctionDefinition {
            args: [
                (
                    0,
                    Specialized(
                        Integer,
                    ),
                ),
            ],
            body: CaseInt {
                t: Var {
                    index: 0,
                },
                result_type: SpecializedF(
                    Specialized(
                        Integer,
                    ),
                ),
                branches: [
                    (
                        0,
                        Return {
                            value: Int {
                                value: 1,
                            },
                        },
                    ),
                ],
                default_branch: Some(
                    Let {
                        t: Let {
                            t: PrimitiveCall {
                                name: "_int_sub",
                                args: [
                                    Var {
                                        index: 0,
                                    },
                                    Int {
                                        value: 1,
                                    },
                                ],
                            },
                            bound_index: 1,
                            body: Redex {
                                function: Def {
                                    name: "factorial",
                                    may_have_complex_effects: true,
                                },
                                args: [
                                    Var {
                                        index: 1,
                                    },
                                ],
                            },
                        },
                        bound_index: 2,
                        body: PrimitiveCall {
                            name: "_int_mul",
                            args: [
                                Var {
                                    index: 0,
                                },
                                Var {
                                    index: 2,
                                },
                            ],
                        },
                    },
                ),
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 3,
            may_be_simple: true,
            may_be_complex: true,
        },
    ),
    (
        "main",
        FunctionDefinition {
            args: [],
            body: Redex {
                function: Def {
                    name: "factorial",
                    may_have_complex_effects: true,
                },
                args: [
                    Int {
                        value: 5,
                    },
                ],
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 0,
            may_be_simple: true,
            may_be_complex: false,
        },
    ),
]

CLIR
========
[factorial__cps_impl]
function u0:0(i64, i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 tail
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = colocated u0:15 sig0

block0(v0: i64, v1: i64, v2: i64):
    v3 = load.i64 v1+24
    v4 = iadd_imm v1, 32
    v5 = iadd_imm v2, 8
    v6 = icmp_imm eq v3, 3
    brif v6, block4, block6

block6:
    brif.i64 v3, block1, block1

block1:
    v7 = load.i64 v0
    v8 = sshr_imm v7, 1
    brif v8, block3, block2

block2:
    v11 = iconst.i64 1
    jump block5(v11, v5)  ; v11 = 1

block3:
    v12 = iconst.i64 1
    v13 = sshr_imm.i64 v7, 1
    v14 = isub v13, v12  ; v12 = 1
    v15 = ishl_imm v14, 1
    v16 = iadd_imm.i64 v5, -8
    store aligned v15, v16
    v17 = isub v16, v0
    store v17, v1+16
    v18 = iconst.i64 3
    store v18, v1+24  ; v18 = 3
    v19 = ishl_imm v14, 1
    store v19, v4+8
    return_call fn0(v16, v1)

block4:
    v20 = iadd_imm.i64 v2, 8
    v21 = load.i64 v2
    v22 = load.i64 v0
    v23 = sshr_imm v22, 1
    v24 = sshr_imm v21, 1
    v25 = imul v23, v24
    jump block5(v25, v20)

block5(v9: i64, v10: i64):
    v26 = ishl_imm v9, 1
    v27 = iadd_imm.i64 v0, 0
    store v26, v27
    v28 = load.i64 v1+16
    v29 = load.i64 v28+8
    v30 = iadd.i64 v0, v29
    v31 = load.i64 v28
    return_call_indirect sig1, v31(v30, v28, v27)
}


[factorial__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 apple_aarch64
    sig1 = (i64, i64, i64) -> i64 tail
    fn0 = u0:0 sig0
    fn1 = colocated u0:16 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 48
    v3 = call fn0(v2)  ; v2 = 48
    v4 = iadd_imm v0, -8
    return_call fn1(v0, v3, v4)
}


[factorial__simple]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 tail
    fn0 = colocated u0:18 sig0

block0(v0: i64):
    v1 = load.i64 v0
    v2 = sshr_imm v1, 1
    brif v2, block3, block2

block2:
    v5 = iconst.i64 1
    jump block1(v5, v0)  ; v5 = 1

block3:
    v6 = iconst.i64 1
    v7 = sshr_imm.i64 v1, 1
    v8 = isub v7, v6  ; v6 = 1
    v9 = call fn0(v0, v8)
    v10 = sshr_imm.i64 v1, 1
    v11 = imul v10, v9
    jump block1(v11, v0)

block1(v3: i64, v4: i64):
    v12 = ishl_imm v3, 1
    v13 = iadd_imm.i64 v0, 0
    store v12, v13
    return v13
}


[factorial__specialized]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 tail
    fn0 = colocated u0:18 sig0

block0(v0: i64, v1: i64):
    brif v1, block3, block2

block2:
    v4 = iconst.i64 1
    jump block1(v4, v0)  ; v4 = 1

block3:
    v5 = iconst.i64 1
    v6 = isub.i64 v1, v5  ; v5 = 1
    v7 = call fn0(v0, v6)
    v8 = imul.i64 v1, v7
    jump block1(v8, v0)

block1(v2: i64, v3: i64):
    return v2
}


[main__simple]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 tail
    fn0 = colocated u0:18 sig0

block0(v0: i64):
    v1 = iconst.i64 5
    v2 = call fn0(v0, v1)  ; v1 = 5
    v3 = ishl_imm v2, 1
    v4 = iadd_imm v0, -8
    store v3, v4
    return v4
}


[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64) -> i64 tail
    fn0 = colocated u0:18 sig0

block0(v0: i64):
    v1 = iconst.i64 5
    return_call fn0(v0, v1)  ; v1 = 5
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:20 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}


Result
========
120