FTerm
========
Defs {
    defs: [
        (
            "f",
            Def {
                args: [
                    (
                        "x",
                        Uniform,
                    ),
                ],
                body: Let {
                    name: "y",
                    t: Let {
                        name: "x",
                        t: Int {
                            value: 1,
                        },
                        body: Redex {
                            function: Identifier {
                                name: "_int_add",
                            },
                            args: [
                                Identifier {
                                    name: "x",
                                },
                                Int {
                                    value: 1,
                                },
                            ],
                        },
                    },
                    body: Redex {
                        function: Identifier {
                            name: "_int_add",
                        },
                        args: [
                            Identifier {
                                name: "x",
                            },
                            Int {
                                value: 2,
                            },
                        ],
                    },
                },
                c_type: Default,
            },
        ),
    ],
    body: Some(
        Redex {
            function: Identifier {
                name: "f",
            },
            args: [
                Int {
                    value: 0,
                },
            ],
        },
    ),
}

Defs
========
[
    (
        "f",
        FunctionDefinition {
            args: [
                (
                    0,
                    Uniform,
                ),
            ],
            body: Let {
                t: Let {
                    t: Return {
                        value: Int {
                            value: 1,
                        },
                    },
                    bound_index: 1,
                    body: PrimitiveCall {
                        name: "_int_add",
                        args: [
                            Var {
                                index: 1,
                            },
                            Int {
                                value: 1,
                            },
                        ],
                    },
                },
                bound_index: 2,
                body: PrimitiveCall {
                    name: "_int_add",
                    args: [
                        Var {
                            index: 0,
                        },
                        Int {
                            value: 2,
                        },
                    ],
                },
            },
            c_type: Default,
            var_bound: 3,
            may_be_simple: true,
        },
    ),
    (
        "main",
        FunctionDefinition {
            args: [],
            body: Redex {
                function: Def {
                    name: "f",
                    may_have_complex_effects: false,
                },
                args: [
                    Int {
                        value: 0,
                    },
                ],
            },
            c_type: SpecializedF(
                Specialized(
                    Integer,
                ),
            ),
            var_bound: 0,
            may_be_simple: true,
        },
    ),
]

CLIR
========
[f__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64, i64, i64) -> i64 tail

block0(v0: i64, v1: i64):
    v2 = load.i64 v0
    v3 = iconst.i64 1
    v4 = iconst.i64 1
    v5 = iadd v3, v4  ; v3 = 1, v4 = 1
    v6 = iconst.i64 2
    v7 = sshr_imm v2, 1
    v8 = iadd v7, v6  ; v6 = 2
    v9 = ishl_imm v8, 1
    v10 = iadd_imm v0, 0
    store v9, v10
    v11 = load.i64 v1+8
    v12 = iadd v0, v11
    v13 = load.i64 v1
    return_call_indirect sig0, v13(v12, v1, v10)
}


[f__simple]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8

block0(v0: i64):
    v1 = load.i64 v0
    v2 = iconst.i64 1
    v3 = iconst.i64 1
    v4 = iadd v2, v3  ; v2 = 1, v3 = 1
    v5 = iconst.i64 2
    v6 = sshr_imm v1, 1
    v7 = iadd v6, v5  ; v5 = 2
    v8 = ishl_imm v7, 1
    v9 = iadd_imm v0, 0
    store v8, v9
    return v9
}


[main__cps]
function u0:0(i64, i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 tail
    fn0 = colocated u0:17 sig0

block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    v3 = ishl_imm v2, 1  ; v2 = 0
    v4 = iadd_imm v0, -8
    store aligned v3, v4
    return_call fn0(v4)
}


[main__simple]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 tail
    fn0 = colocated u0:17 sig0

block0(v0: i64):
    v1 = iconst.i64 0
    v2 = ishl_imm v1, 1  ; v1 = 0
    v3 = iadd_imm v0, -8
    store aligned v2, v3
    return_call fn0(v3)
}


[main__specialized]
function u0:0(i64) -> i64 tail {
    ss0 = explicit_slot 8
    sig0 = (i64) -> i64 tail
    fn0 = colocated u0:17 sig0

block0(v0: i64):
    v1 = iconst.i64 0
    v2 = ishl_imm v1, 1  ; v1 = 0
    v3 = iadd_imm v0, -8
    store aligned v2, v3
    v4 = call fn0(v3)
    v5 = load.i64 v4
    v6 = iadd_imm v4, 8
    v7 = sshr_imm v5, 1
    return v7
}


[__main__]
function u0:0() -> i64 fast {
    sig0 = () -> i64 apple_aarch64
    sig1 = (i64) -> i64 tail
    fn0 = u0:2 sig0
    fn1 = colocated u0:21 sig1

block0:
    v0 = call fn0()
    v1 = call fn1(v0)
    return v1
}


Result
========
2